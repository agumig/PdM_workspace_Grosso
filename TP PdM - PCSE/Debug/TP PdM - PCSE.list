
TP PdM - PCSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003290  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800343c  0800343c  0001343c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034f4  080034f4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080034f4  080034f4  000134f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034fc  080034fc  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034fc  080034fc  000134fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003500  08003500  00013500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          000000d0  20000020  20000020  00020020  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200000f0  200000f0  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a658  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020bb  00000000  00000000  0002a6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000918  00000000  00000000  0002c760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000810  00000000  00000000  0002d078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027762  00000000  00000000  0002d888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f769  00000000  00000000  00054fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e93cb  00000000  00000000  00064753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014db1e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000022d8  00000000  00000000  0014db70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000020 	.word	0x20000020
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003424 	.word	0x08003424

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000024 	.word	0x20000024
 80001e8:	08003424 	.word	0x08003424

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	; 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	3c01      	subs	r4, #1
 8000338:	bf28      	it	cs
 800033a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800033e:	d2e9      	bcs.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_dmul>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000582:	bf1d      	ittte	ne
 8000584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000588:	ea94 0f0c 	teqne	r4, ip
 800058c:	ea95 0f0c 	teqne	r5, ip
 8000590:	f000 f8de 	bleq	8000750 <__aeabi_dmul+0x1dc>
 8000594:	442c      	add	r4, r5
 8000596:	ea81 0603 	eor.w	r6, r1, r3
 800059a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a6:	bf18      	it	ne
 80005a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b4:	d038      	beq.n	8000628 <__aeabi_dmul+0xb4>
 80005b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ca:	f04f 0600 	mov.w	r6, #0
 80005ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d2:	f09c 0f00 	teq	ip, #0
 80005d6:	bf18      	it	ne
 80005d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e8:	d204      	bcs.n	80005f4 <__aeabi_dmul+0x80>
 80005ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ee:	416d      	adcs	r5, r5
 80005f0:	eb46 0606 	adc.w	r6, r6, r6
 80005f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000608:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800060c:	bf88      	it	hi
 800060e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000612:	d81e      	bhi.n	8000652 <__aeabi_dmul+0xde>
 8000614:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800062c:	ea46 0101 	orr.w	r1, r6, r1
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	ea81 0103 	eor.w	r1, r1, r3
 8000638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800063c:	bfc2      	ittt	gt
 800063e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000646:	bd70      	popgt	{r4, r5, r6, pc}
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f04f 0e00 	mov.w	lr, #0
 8000650:	3c01      	subs	r4, #1
 8000652:	f300 80ab 	bgt.w	80007ac <__aeabi_dmul+0x238>
 8000656:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065a:	bfde      	ittt	le
 800065c:	2000      	movle	r0, #0
 800065e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000662:	bd70      	pople	{r4, r5, r6, pc}
 8000664:	f1c4 0400 	rsb	r4, r4, #0
 8000668:	3c20      	subs	r4, #32
 800066a:	da35      	bge.n	80006d8 <__aeabi_dmul+0x164>
 800066c:	340c      	adds	r4, #12
 800066e:	dc1b      	bgt.n	80006a8 <__aeabi_dmul+0x134>
 8000670:	f104 0414 	add.w	r4, r4, #20
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f305 	lsl.w	r3, r0, r5
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800068c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	fa21 f604 	lsr.w	r6, r1, r4
 8000698:	eb42 0106 	adc.w	r1, r2, r6
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 040c 	rsb	r4, r4, #12
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f304 	lsl.w	r3, r0, r4
 80006b4:	fa20 f005 	lsr.w	r0, r0, r5
 80006b8:	fa01 f204 	lsl.w	r2, r1, r4
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	f141 0100 	adc.w	r1, r1, #0
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f205 	lsl.w	r2, r0, r5
 80006e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e4:	fa20 f304 	lsr.w	r3, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea43 0302 	orr.w	r3, r3, r2
 80006f0:	fa21 f004 	lsr.w	r0, r1, r4
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	fa21 f204 	lsr.w	r2, r1, r4
 80006fc:	ea20 0002 	bic.w	r0, r0, r2
 8000700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f094 0f00 	teq	r4, #0
 8000714:	d10f      	bne.n	8000736 <__aeabi_dmul+0x1c2>
 8000716:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071a:	0040      	lsls	r0, r0, #1
 800071c:	eb41 0101 	adc.w	r1, r1, r1
 8000720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000724:	bf08      	it	eq
 8000726:	3c01      	subeq	r4, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1a6>
 800072a:	ea41 0106 	orr.w	r1, r1, r6
 800072e:	f095 0f00 	teq	r5, #0
 8000732:	bf18      	it	ne
 8000734:	4770      	bxne	lr
 8000736:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	eb43 0303 	adc.w	r3, r3, r3
 8000740:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000744:	bf08      	it	eq
 8000746:	3d01      	subeq	r5, #1
 8000748:	d0f7      	beq.n	800073a <__aeabi_dmul+0x1c6>
 800074a:	ea43 0306 	orr.w	r3, r3, r6
 800074e:	4770      	bx	lr
 8000750:	ea94 0f0c 	teq	r4, ip
 8000754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000758:	bf18      	it	ne
 800075a:	ea95 0f0c 	teqne	r5, ip
 800075e:	d00c      	beq.n	800077a <__aeabi_dmul+0x206>
 8000760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000764:	bf18      	it	ne
 8000766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076a:	d1d1      	bne.n	8000710 <__aeabi_dmul+0x19c>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077e:	bf06      	itte	eq
 8000780:	4610      	moveq	r0, r2
 8000782:	4619      	moveq	r1, r3
 8000784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000788:	d019      	beq.n	80007be <__aeabi_dmul+0x24a>
 800078a:	ea94 0f0c 	teq	r4, ip
 800078e:	d102      	bne.n	8000796 <__aeabi_dmul+0x222>
 8000790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000794:	d113      	bne.n	80007be <__aeabi_dmul+0x24a>
 8000796:	ea95 0f0c 	teq	r5, ip
 800079a:	d105      	bne.n	80007a8 <__aeabi_dmul+0x234>
 800079c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a0:	bf1c      	itt	ne
 80007a2:	4610      	movne	r0, r2
 80007a4:	4619      	movne	r1, r3
 80007a6:	d10a      	bne.n	80007be <__aeabi_dmul+0x24a>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c6:	bd70      	pop	{r4, r5, r6, pc}

080007c8 <__aeabi_ddiv>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d6:	bf1d      	ittte	ne
 80007d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007dc:	ea94 0f0c 	teqne	r4, ip
 80007e0:	ea95 0f0c 	teqne	r5, ip
 80007e4:	f000 f8a7 	bleq	8000936 <__aeabi_ddiv+0x16e>
 80007e8:	eba4 0405 	sub.w	r4, r4, r5
 80007ec:	ea81 0e03 	eor.w	lr, r1, r3
 80007f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f8:	f000 8088 	beq.w	800090c <__aeabi_ddiv+0x144>
 80007fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000800:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800080c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000818:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800081c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000820:	429d      	cmp	r5, r3
 8000822:	bf08      	it	eq
 8000824:	4296      	cmpeq	r6, r2
 8000826:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082e:	d202      	bcs.n	8000836 <__aeabi_ddiv+0x6e>
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	1ab6      	subs	r6, r6, r2
 8000838:	eb65 0503 	sbc.w	r5, r5, r3
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000846:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 000c 	orrcs.w	r0, r0, ip
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a8:	d018      	beq.n	80008dc <__aeabi_ddiv+0x114>
 80008aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c6:	d1c0      	bne.n	800084a <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	d10b      	bne.n	80008e6 <__aeabi_ddiv+0x11e>
 80008ce:	ea41 0100 	orr.w	r1, r1, r0
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008da:	e7b6      	b.n	800084a <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	bf04      	itt	eq
 80008e2:	4301      	orreq	r1, r0
 80008e4:	2000      	moveq	r0, #0
 80008e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ea:	bf88      	it	hi
 80008ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f0:	f63f aeaf 	bhi.w	8000652 <__aeabi_dmul+0xde>
 80008f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f8:	bf04      	itt	eq
 80008fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000902:	f150 0000 	adcs.w	r0, r0, #0
 8000906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000918:	bfc2      	ittt	gt
 800091a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000922:	bd70      	popgt	{r4, r5, r6, pc}
 8000924:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000928:	f04f 0e00 	mov.w	lr, #0
 800092c:	3c01      	subs	r4, #1
 800092e:	e690      	b.n	8000652 <__aeabi_dmul+0xde>
 8000930:	ea45 0e06 	orr.w	lr, r5, r6
 8000934:	e68d      	b.n	8000652 <__aeabi_dmul+0xde>
 8000936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093a:	ea94 0f0c 	teq	r4, ip
 800093e:	bf08      	it	eq
 8000940:	ea95 0f0c 	teqeq	r5, ip
 8000944:	f43f af3b 	beq.w	80007be <__aeabi_dmul+0x24a>
 8000948:	ea94 0f0c 	teq	r4, ip
 800094c:	d10a      	bne.n	8000964 <__aeabi_ddiv+0x19c>
 800094e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000952:	f47f af34 	bne.w	80007be <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	f47f af25 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e72c      	b.n	80007be <__aeabi_dmul+0x24a>
 8000964:	ea95 0f0c 	teq	r5, ip
 8000968:	d106      	bne.n	8000978 <__aeabi_ddiv+0x1b0>
 800096a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096e:	f43f aefd 	beq.w	800076c <__aeabi_dmul+0x1f8>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e722      	b.n	80007be <__aeabi_dmul+0x24a>
 8000978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097c:	bf18      	it	ne
 800097e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000982:	f47f aec5 	bne.w	8000710 <__aeabi_dmul+0x19c>
 8000986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098a:	f47f af0d 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800098e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000992:	f47f aeeb 	bne.w	800076c <__aeabi_dmul+0x1f8>
 8000996:	e712      	b.n	80007be <__aeabi_dmul+0x24a>

08000998 <__gedf2>:
 8000998:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800099c:	e006      	b.n	80009ac <__cmpdf2+0x4>
 800099e:	bf00      	nop

080009a0 <__ledf2>:
 80009a0:	f04f 0c01 	mov.w	ip, #1
 80009a4:	e002      	b.n	80009ac <__cmpdf2+0x4>
 80009a6:	bf00      	nop

080009a8 <__cmpdf2>:
 80009a8:	f04f 0c01 	mov.w	ip, #1
 80009ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009bc:	bf18      	it	ne
 80009be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c2:	d01b      	beq.n	80009fc <__cmpdf2+0x54>
 80009c4:	b001      	add	sp, #4
 80009c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ca:	bf0c      	ite	eq
 80009cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d0:	ea91 0f03 	teqne	r1, r3
 80009d4:	bf02      	ittt	eq
 80009d6:	ea90 0f02 	teqeq	r0, r2
 80009da:	2000      	moveq	r0, #0
 80009dc:	4770      	bxeq	lr
 80009de:	f110 0f00 	cmn.w	r0, #0
 80009e2:	ea91 0f03 	teq	r1, r3
 80009e6:	bf58      	it	pl
 80009e8:	4299      	cmppl	r1, r3
 80009ea:	bf08      	it	eq
 80009ec:	4290      	cmpeq	r0, r2
 80009ee:	bf2c      	ite	cs
 80009f0:	17d8      	asrcs	r0, r3, #31
 80009f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009f6:	f040 0001 	orr.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__cmpdf2+0x64>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d107      	bne.n	8000a1c <__cmpdf2+0x74>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d1d6      	bne.n	80009c4 <__cmpdf2+0x1c>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d0d3      	beq.n	80009c4 <__cmpdf2+0x1c>
 8000a1c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdrcmple>:
 8000a24:	4684      	mov	ip, r0
 8000a26:	4610      	mov	r0, r2
 8000a28:	4662      	mov	r2, ip
 8000a2a:	468c      	mov	ip, r1
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4663      	mov	r3, ip
 8000a30:	e000      	b.n	8000a34 <__aeabi_cdcmpeq>
 8000a32:	bf00      	nop

08000a34 <__aeabi_cdcmpeq>:
 8000a34:	b501      	push	{r0, lr}
 8000a36:	f7ff ffb7 	bl	80009a8 <__cmpdf2>
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	bf48      	it	mi
 8000a3e:	f110 0f00 	cmnmi.w	r0, #0
 8000a42:	bd01      	pop	{r0, pc}

08000a44 <__aeabi_dcmpeq>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff fff4 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a4c:	bf0c      	ite	eq
 8000a4e:	2001      	moveq	r0, #1
 8000a50:	2000      	movne	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmplt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffea 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmple>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffe0 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpge>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffce 	bl	8000a24 <__aeabi_cdrcmple>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpgt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffc4 	bl	8000a24 <__aeabi_cdrcmple>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_uldivmod>:
 8000aa8:	b953      	cbnz	r3, 8000ac0 <__aeabi_uldivmod+0x18>
 8000aaa:	b94a      	cbnz	r2, 8000ac0 <__aeabi_uldivmod+0x18>
 8000aac:	2900      	cmp	r1, #0
 8000aae:	bf08      	it	eq
 8000ab0:	2800      	cmpeq	r0, #0
 8000ab2:	bf1c      	itt	ne
 8000ab4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ab8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000abc:	f000 b974 	b.w	8000da8 <__aeabi_idiv0>
 8000ac0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac8:	f000 f806 	bl	8000ad8 <__udivmoddi4>
 8000acc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad4:	b004      	add	sp, #16
 8000ad6:	4770      	bx	lr

08000ad8 <__udivmoddi4>:
 8000ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000adc:	9d08      	ldr	r5, [sp, #32]
 8000ade:	4604      	mov	r4, r0
 8000ae0:	468e      	mov	lr, r1
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d14d      	bne.n	8000b82 <__udivmoddi4+0xaa>
 8000ae6:	428a      	cmp	r2, r1
 8000ae8:	4694      	mov	ip, r2
 8000aea:	d969      	bls.n	8000bc0 <__udivmoddi4+0xe8>
 8000aec:	fab2 f282 	clz	r2, r2
 8000af0:	b152      	cbz	r2, 8000b08 <__udivmoddi4+0x30>
 8000af2:	fa01 f302 	lsl.w	r3, r1, r2
 8000af6:	f1c2 0120 	rsb	r1, r2, #32
 8000afa:	fa20 f101 	lsr.w	r1, r0, r1
 8000afe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b02:	ea41 0e03 	orr.w	lr, r1, r3
 8000b06:	4094      	lsls	r4, r2
 8000b08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b0c:	0c21      	lsrs	r1, r4, #16
 8000b0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000b12:	fa1f f78c 	uxth.w	r7, ip
 8000b16:	fb08 e316 	mls	r3, r8, r6, lr
 8000b1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b1e:	fb06 f107 	mul.w	r1, r6, r7
 8000b22:	4299      	cmp	r1, r3
 8000b24:	d90a      	bls.n	8000b3c <__udivmoddi4+0x64>
 8000b26:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b2e:	f080 811f 	bcs.w	8000d70 <__udivmoddi4+0x298>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 811c 	bls.w	8000d70 <__udivmoddi4+0x298>
 8000b38:	3e02      	subs	r6, #2
 8000b3a:	4463      	add	r3, ip
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3310 	mls	r3, r8, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 f707 	mul.w	r7, r0, r7
 8000b50:	42a7      	cmp	r7, r4
 8000b52:	d90a      	bls.n	8000b6a <__udivmoddi4+0x92>
 8000b54:	eb1c 0404 	adds.w	r4, ip, r4
 8000b58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b5c:	f080 810a 	bcs.w	8000d74 <__udivmoddi4+0x29c>
 8000b60:	42a7      	cmp	r7, r4
 8000b62:	f240 8107 	bls.w	8000d74 <__udivmoddi4+0x29c>
 8000b66:	4464      	add	r4, ip
 8000b68:	3802      	subs	r0, #2
 8000b6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6e:	1be4      	subs	r4, r4, r7
 8000b70:	2600      	movs	r6, #0
 8000b72:	b11d      	cbz	r5, 8000b7c <__udivmoddi4+0xa4>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c5 4300 	strd	r4, r3, [r5]
 8000b7c:	4631      	mov	r1, r6
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d909      	bls.n	8000b9a <__udivmoddi4+0xc2>
 8000b86:	2d00      	cmp	r5, #0
 8000b88:	f000 80ef 	beq.w	8000d6a <__udivmoddi4+0x292>
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000b92:	4630      	mov	r0, r6
 8000b94:	4631      	mov	r1, r6
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	fab3 f683 	clz	r6, r3
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d14a      	bne.n	8000c38 <__udivmoddi4+0x160>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d302      	bcc.n	8000bac <__udivmoddi4+0xd4>
 8000ba6:	4282      	cmp	r2, r0
 8000ba8:	f200 80f9 	bhi.w	8000d9e <__udivmoddi4+0x2c6>
 8000bac:	1a84      	subs	r4, r0, r2
 8000bae:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	469e      	mov	lr, r3
 8000bb6:	2d00      	cmp	r5, #0
 8000bb8:	d0e0      	beq.n	8000b7c <__udivmoddi4+0xa4>
 8000bba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bbe:	e7dd      	b.n	8000b7c <__udivmoddi4+0xa4>
 8000bc0:	b902      	cbnz	r2, 8000bc4 <__udivmoddi4+0xec>
 8000bc2:	deff      	udf	#255	; 0xff
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	f040 8092 	bne.w	8000cf2 <__udivmoddi4+0x21a>
 8000bce:	eba1 010c 	sub.w	r1, r1, ip
 8000bd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd6:	fa1f fe8c 	uxth.w	lr, ip
 8000bda:	2601      	movs	r6, #1
 8000bdc:	0c20      	lsrs	r0, r4, #16
 8000bde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000be2:	fb07 1113 	mls	r1, r7, r3, r1
 8000be6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bea:	fb0e f003 	mul.w	r0, lr, r3
 8000bee:	4288      	cmp	r0, r1
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x12c>
 8000bf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x12a>
 8000bfc:	4288      	cmp	r0, r1
 8000bfe:	f200 80cb 	bhi.w	8000d98 <__udivmoddi4+0x2c0>
 8000c02:	4643      	mov	r3, r8
 8000c04:	1a09      	subs	r1, r1, r0
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000c10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c14:	fb0e fe00 	mul.w	lr, lr, r0
 8000c18:	45a6      	cmp	lr, r4
 8000c1a:	d908      	bls.n	8000c2e <__udivmoddi4+0x156>
 8000c1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c24:	d202      	bcs.n	8000c2c <__udivmoddi4+0x154>
 8000c26:	45a6      	cmp	lr, r4
 8000c28:	f200 80bb 	bhi.w	8000da2 <__udivmoddi4+0x2ca>
 8000c2c:	4608      	mov	r0, r1
 8000c2e:	eba4 040e 	sub.w	r4, r4, lr
 8000c32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c36:	e79c      	b.n	8000b72 <__udivmoddi4+0x9a>
 8000c38:	f1c6 0720 	rsb	r7, r6, #32
 8000c3c:	40b3      	lsls	r3, r6
 8000c3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c46:	fa20 f407 	lsr.w	r4, r0, r7
 8000c4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c4e:	431c      	orrs	r4, r3
 8000c50:	40f9      	lsrs	r1, r7
 8000c52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c56:	fa00 f306 	lsl.w	r3, r0, r6
 8000c5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c5e:	0c20      	lsrs	r0, r4, #16
 8000c60:	fa1f fe8c 	uxth.w	lr, ip
 8000c64:	fb09 1118 	mls	r1, r9, r8, r1
 8000c68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000c70:	4288      	cmp	r0, r1
 8000c72:	fa02 f206 	lsl.w	r2, r2, r6
 8000c76:	d90b      	bls.n	8000c90 <__udivmoddi4+0x1b8>
 8000c78:	eb1c 0101 	adds.w	r1, ip, r1
 8000c7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c80:	f080 8088 	bcs.w	8000d94 <__udivmoddi4+0x2bc>
 8000c84:	4288      	cmp	r0, r1
 8000c86:	f240 8085 	bls.w	8000d94 <__udivmoddi4+0x2bc>
 8000c8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8e:	4461      	add	r1, ip
 8000c90:	1a09      	subs	r1, r1, r0
 8000c92:	b2a4      	uxth	r4, r4
 8000c94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c98:	fb09 1110 	mls	r1, r9, r0, r1
 8000c9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ca0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca4:	458e      	cmp	lr, r1
 8000ca6:	d908      	bls.n	8000cba <__udivmoddi4+0x1e2>
 8000ca8:	eb1c 0101 	adds.w	r1, ip, r1
 8000cac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000cb0:	d26c      	bcs.n	8000d8c <__udivmoddi4+0x2b4>
 8000cb2:	458e      	cmp	lr, r1
 8000cb4:	d96a      	bls.n	8000d8c <__udivmoddi4+0x2b4>
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	4461      	add	r1, ip
 8000cba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000cc2:	eba1 010e 	sub.w	r1, r1, lr
 8000cc6:	42a1      	cmp	r1, r4
 8000cc8:	46c8      	mov	r8, r9
 8000cca:	46a6      	mov	lr, r4
 8000ccc:	d356      	bcc.n	8000d7c <__udivmoddi4+0x2a4>
 8000cce:	d053      	beq.n	8000d78 <__udivmoddi4+0x2a0>
 8000cd0:	b15d      	cbz	r5, 8000cea <__udivmoddi4+0x212>
 8000cd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000cd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000cda:	fa01 f707 	lsl.w	r7, r1, r7
 8000cde:	fa22 f306 	lsr.w	r3, r2, r6
 8000ce2:	40f1      	lsrs	r1, r6
 8000ce4:	431f      	orrs	r7, r3
 8000ce6:	e9c5 7100 	strd	r7, r1, [r5]
 8000cea:	2600      	movs	r6, #0
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	40d8      	lsrs	r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000d00:	4091      	lsls	r1, r2
 8000d02:	4301      	orrs	r1, r0
 8000d04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d10:	fb07 3610 	mls	r6, r7, r0, r3
 8000d14:	0c0b      	lsrs	r3, r1, #16
 8000d16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000d1e:	429e      	cmp	r6, r3
 8000d20:	fa04 f402 	lsl.w	r4, r4, r2
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x260>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d2e:	d22f      	bcs.n	8000d90 <__udivmoddi4+0x2b8>
 8000d30:	429e      	cmp	r6, r3
 8000d32:	d92d      	bls.n	8000d90 <__udivmoddi4+0x2b8>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1b9b      	subs	r3, r3, r6
 8000d3a:	b289      	uxth	r1, r1
 8000d3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d40:	fb07 3316 	mls	r3, r7, r6, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb06 f30e 	mul.w	r3, r6, lr
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x28a>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d58:	d216      	bcs.n	8000d88 <__udivmoddi4+0x2b0>
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	d914      	bls.n	8000d88 <__udivmoddi4+0x2b0>
 8000d5e:	3e02      	subs	r6, #2
 8000d60:	4461      	add	r1, ip
 8000d62:	1ac9      	subs	r1, r1, r3
 8000d64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d68:	e738      	b.n	8000bdc <__udivmoddi4+0x104>
 8000d6a:	462e      	mov	r6, r5
 8000d6c:	4628      	mov	r0, r5
 8000d6e:	e705      	b.n	8000b7c <__udivmoddi4+0xa4>
 8000d70:	4606      	mov	r6, r0
 8000d72:	e6e3      	b.n	8000b3c <__udivmoddi4+0x64>
 8000d74:	4618      	mov	r0, r3
 8000d76:	e6f8      	b.n	8000b6a <__udivmoddi4+0x92>
 8000d78:	454b      	cmp	r3, r9
 8000d7a:	d2a9      	bcs.n	8000cd0 <__udivmoddi4+0x1f8>
 8000d7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000d80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d84:	3801      	subs	r0, #1
 8000d86:	e7a3      	b.n	8000cd0 <__udivmoddi4+0x1f8>
 8000d88:	4646      	mov	r6, r8
 8000d8a:	e7ea      	b.n	8000d62 <__udivmoddi4+0x28a>
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	e794      	b.n	8000cba <__udivmoddi4+0x1e2>
 8000d90:	4640      	mov	r0, r8
 8000d92:	e7d1      	b.n	8000d38 <__udivmoddi4+0x260>
 8000d94:	46d0      	mov	r8, sl
 8000d96:	e77b      	b.n	8000c90 <__udivmoddi4+0x1b8>
 8000d98:	3b02      	subs	r3, #2
 8000d9a:	4461      	add	r1, ip
 8000d9c:	e732      	b.n	8000c04 <__udivmoddi4+0x12c>
 8000d9e:	4630      	mov	r0, r6
 8000da0:	e709      	b.n	8000bb6 <__udivmoddi4+0xde>
 8000da2:	4464      	add	r4, ip
 8000da4:	3802      	subs	r0, #2
 8000da6:	e742      	b.n	8000c2e <__udivmoddi4+0x156>

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <debounceFSM_init>:
 * @details	Set the initial state
 * @param 	none
 * @return 	none
 */
void debounceFSM_init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	delayInit(&delayButton, BUTTON_DEBOUNCE_DELAY);
 8000db0:	2128      	movs	r1, #40	; 0x28
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <debounceFSM_init+0x1c>)
 8000db4:	f000 f896 	bl	8000ee4 <delayInit>
	currentState = BUTTON_UP;
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <debounceFSM_init+0x20>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
	fallingEdge = false;
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <debounceFSM_init+0x24>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2000003c 	.word	0x2000003c
 8000dcc:	20000048 	.word	0x20000048
 8000dd0:	20000049 	.word	0x20000049

08000dd4 <debounceFSM_update>:
 * 			Must be called frequently.
 * @param 	none
 * @return 	none
 */
void debounceFSM_update()
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	switch(currentState){
 8000dd8:	4b30      	ldr	r3, [pc, #192]	; (8000e9c <debounceFSM_update+0xc8>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d850      	bhi.n	8000e82 <debounceFSM_update+0xae>
 8000de0:	a201      	add	r2, pc, #4	; (adr r2, 8000de8 <debounceFSM_update+0x14>)
 8000de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de6:	bf00      	nop
 8000de8:	08000df9 	.word	0x08000df9
 8000dec:	08000e13 	.word	0x08000e13
 8000df0:	08000e41 	.word	0x08000e41
 8000df4:	08000e5b 	.word	0x08000e5b
			case BUTTON_UP:
				if(BSP_PB_GetState(BUTTON_USER))
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f000 f9cd 	bl	8001198 <BSP_PB_GetState>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d041      	beq.n	8000e88 <debounceFSM_update+0xb4>
				{
					currentState = BUTTON_FALLING;
 8000e04:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <debounceFSM_update+0xc8>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	701a      	strb	r2, [r3, #0]
					delayRead(&delayButton);		// Set the initial value of the delay
 8000e0a:	4825      	ldr	r0, [pc, #148]	; (8000ea0 <debounceFSM_update+0xcc>)
 8000e0c:	f000 f887 	bl	8000f1e <delayRead>
				}

				break;
 8000e10:	e03a      	b.n	8000e88 <debounceFSM_update+0xb4>
			case BUTTON_FALLING:
				if(delayRead(&delayButton))
 8000e12:	4823      	ldr	r0, [pc, #140]	; (8000ea0 <debounceFSM_update+0xcc>)
 8000e14:	f000 f883 	bl	8000f1e <delayRead>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d036      	beq.n	8000e8c <debounceFSM_update+0xb8>
				{
					if(BSP_PB_GetState(BUTTON_USER))
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f000 f9ba 	bl	8001198 <BSP_PB_GetState>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d006      	beq.n	8000e38 <debounceFSM_update+0x64>
					{
						currentState = BUTTON_DOWN;
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <debounceFSM_update+0xc8>)
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	701a      	strb	r2, [r3, #0]
						fallingEdge = true;
 8000e30:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <debounceFSM_update+0xd0>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	701a      	strb	r2, [r3, #0]
					else
					{
						currentState = BUTTON_UP;
					}
				}
				break;
 8000e36:	e029      	b.n	8000e8c <debounceFSM_update+0xb8>
						currentState = BUTTON_UP;
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <debounceFSM_update+0xc8>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
				break;
 8000e3e:	e025      	b.n	8000e8c <debounceFSM_update+0xb8>
			case BUTTON_DOWN:
				if(!BSP_PB_GetState(BUTTON_USER))
 8000e40:	2000      	movs	r0, #0
 8000e42:	f000 f9a9 	bl	8001198 <BSP_PB_GetState>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d121      	bne.n	8000e90 <debounceFSM_update+0xbc>
				{
					currentState = BUTTON_RAISING;
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <debounceFSM_update+0xc8>)
 8000e4e:	2203      	movs	r2, #3
 8000e50:	701a      	strb	r2, [r3, #0]
					delayRead(&delayButton);		// Set the initial value of the delay
 8000e52:	4813      	ldr	r0, [pc, #76]	; (8000ea0 <debounceFSM_update+0xcc>)
 8000e54:	f000 f863 	bl	8000f1e <delayRead>
				}
				break;
 8000e58:	e01a      	b.n	8000e90 <debounceFSM_update+0xbc>
			case BUTTON_RAISING:
				if(delayRead(&delayButton))
 8000e5a:	4811      	ldr	r0, [pc, #68]	; (8000ea0 <debounceFSM_update+0xcc>)
 8000e5c:	f000 f85f 	bl	8000f1e <delayRead>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d016      	beq.n	8000e94 <debounceFSM_update+0xc0>
				{
					if(!BSP_PB_GetState(BUTTON_USER))
 8000e66:	2000      	movs	r0, #0
 8000e68:	f000 f996 	bl	8001198 <BSP_PB_GetState>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d103      	bne.n	8000e7a <debounceFSM_update+0xa6>
					{
						currentState = BUTTON_UP;
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <debounceFSM_update+0xc8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
					else
					{
						currentState = BUTTON_DOWN;
					}
				}
				break;
 8000e78:	e00c      	b.n	8000e94 <debounceFSM_update+0xc0>
						currentState = BUTTON_DOWN;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <debounceFSM_update+0xc8>)
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	701a      	strb	r2, [r3, #0]
				break;
 8000e80:	e008      	b.n	8000e94 <debounceFSM_update+0xc0>
			default:
				Error_Handler();
 8000e82:	f000 f829 	bl	8000ed8 <Error_Handler>
				break;
 8000e86:	e006      	b.n	8000e96 <debounceFSM_update+0xc2>
				break;
 8000e88:	bf00      	nop
 8000e8a:	e004      	b.n	8000e96 <debounceFSM_update+0xc2>
				break;
 8000e8c:	bf00      	nop
 8000e8e:	e002      	b.n	8000e96 <debounceFSM_update+0xc2>
				break;
 8000e90:	bf00      	nop
 8000e92:	e000      	b.n	8000e96 <debounceFSM_update+0xc2>
				break;
 8000e94:	bf00      	nop
			}
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000048 	.word	0x20000048
 8000ea0:	2000003c 	.word	0x2000003c
 8000ea4:	20000049 	.word	0x20000049

08000ea8 <readKeyPressed>:
 * @brief   Read button state.
 * @param 	none
 * @return	True if button was pressed, False if not.
 */
bool_t readKeyPressed(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
	bool_t returnValue = false;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	71fb      	strb	r3, [r7, #7]

	if(fallingEdge)
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <readKeyPressed+0x2c>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d004      	beq.n	8000ec4 <readKeyPressed+0x1c>
	{
		fallingEdge = false;
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <readKeyPressed+0x2c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
		returnValue = true;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	71fb      	strb	r3, [r7, #7]
	}

	return returnValue;
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000049 	.word	0x20000049

08000ed8 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @return None
 */
static void Error_Handler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8000edc:	2001      	movs	r0, #1
 8000ede:	f000 f8eb 	bl	80010b8 <BSP_LED_On>
	while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <Error_Handler+0xa>

08000ee4 <delayInit>:
 * @param   delay 		Pointer to the delay structure
 * @param	duration 	Delay in milliseconds
 * @return  None
 */
void delayInit( delay_t * delay, tick_t duration )
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	if(delay != NULL && 0 < duration && duration < MAX_DELAY)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d00e      	beq.n	8000f12 <delayInit+0x2e>
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d00b      	beq.n	8000f12 <delayInit+0x2e>
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	f247 522f 	movw	r2, #29999	; 0x752f
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d806      	bhi.n	8000f12 <delayInit+0x2e>
	{
		delay->running = false;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	721a      	strb	r2, [r3, #8]
		delay->duration = duration;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
	}
	else
	{
		while(1);
	}
}
 8000f10:	e000      	b.n	8000f14 <delayInit+0x30>
		while(1);
 8000f12:	e7fe      	b.n	8000f12 <delayInit+0x2e>
}
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <delayRead>:
 * @brief   Read the delay state
 * @param   delay 		Pointer to the delay structure
 * @return  True if the delay happened, false if not.
 */
bool_t delayRead( delay_t * delay )
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b084      	sub	sp, #16
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
	bool_t returnValue = false;
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]

	if(delay == NULL)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d100      	bne.n	8000f32 <delayRead+0x14>
		while(1);
 8000f30:	e7fe      	b.n	8000f30 <delayRead+0x12>

	if(delay->running)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	7a1b      	ldrb	r3, [r3, #8]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d012      	beq.n	8000f60 <delayRead+0x42>
	{
		if((HAL_GetTick() - delay->startTime) >= delay->duration)
 8000f3a:	f000 fa07 	bl	800134c <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	1ad2      	subs	r2, r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d305      	bcc.n	8000f5a <delayRead+0x3c>
		{
			delay->running = false;		// At the next delayRead, it will be runned again.
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	721a      	strb	r2, [r3, #8]
			returnValue = true;
 8000f54:	2301      	movs	r3, #1
 8000f56:	73fb      	strb	r3, [r7, #15]
 8000f58:	e00a      	b.n	8000f70 <delayRead+0x52>

		}
		else
			returnValue = false;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	e007      	b.n	8000f70 <delayRead+0x52>
	}
	else
	{
		delay->startTime = HAL_GetTick();
 8000f60:	f000 f9f4 	bl	800134c <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	721a      	strb	r2, [r3, #8]
	}

	return returnValue;
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <uartInit>:
 * @details
 * @param	none
 * @return	true if the initialization was success, false if not
 */
bool_t uartInit(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
	bool_t returnValue = false;
 8000f82:	2300      	movs	r3, #0
 8000f84:	71fb      	strb	r3, [r7, #7]
		                  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	      - Stop Bit    = One Stop bit
	      - Parity      = ODD parity
	      - BaudRate    = 9600 baud
	      - Hardware flow control disabled (RTS and CTS signals) */
	  UartHandle.Instance        = USARTx;
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <uartInit+0x60>)
 8000f88:	4a15      	ldr	r2, [pc, #84]	; (8000fe0 <uartInit+0x64>)
 8000f8a:	601a      	str	r2, [r3, #0]

	  UartHandle.Init.BaudRate   = 9600;
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <uartInit+0x60>)
 8000f8e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f92:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <uartInit+0x60>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <uartInit+0x60>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity     = UART_PARITY_ODD;
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <uartInit+0x60>)
 8000fa2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000fa6:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <uartInit+0x60>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <uartInit+0x60>)
 8000fb0:	220c      	movs	r2, #12
 8000fb2:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <uartInit+0x60>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&UartHandle) == HAL_OK)
 8000fba:	4808      	ldr	r0, [pc, #32]	; (8000fdc <uartInit+0x60>)
 8000fbc:	f001 fa04 	bl	80023c8 <HAL_UART_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d104      	bne.n	8000fd0 <uartInit+0x54>
	  {
		  uartSendString((uint8_t*)"Initialization finished successfully\n");
 8000fc6:	4807      	ldr	r0, [pc, #28]	; (8000fe4 <uartInit+0x68>)
 8000fc8:	f000 f80e 	bl	8000fe8 <uartSendString>

		  returnValue = true;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	71fb      	strb	r3, [r7, #7]
	  }

	  return returnValue;
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000004c 	.word	0x2000004c
 8000fe0:	40004800 	.word	0x40004800
 8000fe4:	0800343c 	.word	0x0800343c

08000fe8 <uartSendString>:
 * @details	Send all the string
 * @param	uint8_t * string to send
 * @return	none
 */
void uartSendString(uint8_t * pstring)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	if(NULL != pstring)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d009      	beq.n	800100a <uartSendString+0x22>
		HAL_UART_Transmit(&UartHandle, pstring, strlen((const char *)pstring), UART_TRANSMIT_MAX_DELAY);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff f8f8 	bl	80001ec <strlen>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	2364      	movs	r3, #100	; 0x64
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	4803      	ldr	r0, [pc, #12]	; (8001014 <uartSendString+0x2c>)
 8001006:	f001 fa2c 	bl	8002462 <HAL_UART_Transmit>

}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	2000004c 	.word	0x2000004c

08001018 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d10e      	bne.n	8001046 <BSP_LED_Init+0x2e>
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <BSP_LED_Init+0x94>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	4a1e      	ldr	r2, [pc, #120]	; (80010ac <BSP_LED_Init+0x94>)
 8001032:	f043 0302 	orr.w	r3, r3, #2
 8001036:	6313      	str	r3, [r2, #48]	; 0x30
 8001038:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <BSP_LED_Init+0x94>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	e00d      	b.n	8001062 <BSP_LED_Init+0x4a>
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <BSP_LED_Init+0x94>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a17      	ldr	r2, [pc, #92]	; (80010ac <BSP_LED_Init+0x94>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <BSP_LED_Init+0x94>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <BSP_LED_Init+0x98>)
 8001066:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800106a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001074:	2302      	movs	r3, #2
 8001076:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <BSP_LED_Init+0x9c>)
 800107c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001080:	f107 0214 	add.w	r2, r7, #20
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f000 fa7e 	bl	8001588 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	4a09      	ldr	r2, [pc, #36]	; (80010b4 <BSP_LED_Init+0x9c>)
 8001090:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	4a06      	ldr	r2, [pc, #24]	; (80010b0 <BSP_LED_Init+0x98>)
 8001098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800109c:	2200      	movs	r2, #0
 800109e:	4619      	mov	r1, r3
 80010a0:	f000 fc36 	bl	8001910 <HAL_GPIO_WritePin>
}
 80010a4:	bf00      	nop
 80010a6:	3728      	adds	r7, #40	; 0x28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40023800 	.word	0x40023800
 80010b0:	080034d4 	.word	0x080034d4
 80010b4:	20000000 	.word	0x20000000

080010b8 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <BSP_LED_On+0x2c>)
 80010c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <BSP_LED_On+0x30>)
 80010ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010d2:	2201      	movs	r2, #1
 80010d4:	4619      	mov	r1, r3
 80010d6:	f000 fc1b 	bl	8001910 <HAL_GPIO_WritePin>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000000 	.word	0x20000000
 80010e8:	080034d4 	.word	0x080034d4

080010ec <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	460a      	mov	r2, r1
 80010f6:	71fb      	strb	r3, [r7, #7]
 80010f8:	4613      	mov	r3, r2
 80010fa:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	4b23      	ldr	r3, [pc, #140]	; (8001190 <BSP_PB_Init+0xa4>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	4a22      	ldr	r2, [pc, #136]	; (8001190 <BSP_PB_Init+0xa4>)
 8001106:	f043 0304 	orr.w	r3, r3, #4
 800110a:	6313      	str	r3, [r2, #48]	; 0x30
 800110c:	4b20      	ldr	r3, [pc, #128]	; (8001190 <BSP_PB_Init+0xa4>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001118:	79bb      	ldrb	r3, [r7, #6]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d112      	bne.n	8001144 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800111e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001122:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001128:	2302      	movs	r3, #2
 800112a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800112c:	2302      	movs	r3, #2
 800112e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	4a18      	ldr	r2, [pc, #96]	; (8001194 <BSP_PB_Init+0xa8>)
 8001134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001138:	f107 020c 	add.w	r2, r7, #12
 800113c:	4611      	mov	r1, r2
 800113e:	4618      	mov	r0, r3
 8001140:	f000 fa22 	bl	8001588 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001144:	79bb      	ldrb	r3, [r7, #6]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d11d      	bne.n	8001186 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800114a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800114e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8001154:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001158:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <BSP_PB_Init+0xa8>)
 800115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001162:	f107 020c 	add.w	r2, r7, #12
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f000 fa0d 	bl	8001588 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800116e:	2328      	movs	r3, #40	; 0x28
 8001170:	b25b      	sxtb	r3, r3
 8001172:	2200      	movs	r2, #0
 8001174:	210f      	movs	r1, #15
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f9cf 	bl	800151a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800117c:	2328      	movs	r3, #40	; 0x28
 800117e:	b25b      	sxtb	r3, r3
 8001180:	4618      	mov	r0, r3
 8001182:	f000 f9e6 	bl	8001552 <HAL_NVIC_EnableIRQ>
  }
}
 8001186:	bf00      	nop
 8001188:	3720      	adds	r7, #32
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	2000000c 	.word	0x2000000c

08001198 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <BSP_PB_GetState+0x28>)
 80011a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 fb95 	bl	80018e0 <HAL_GPIO_ReadPin>
 80011b6:	4603      	mov	r3, r0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2000000c 	.word	0x2000000c

080011c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <SystemInit+0x60>)
 80011ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ce:	4a15      	ldr	r2, [pc, #84]	; (8001224 <SystemInit+0x60>)
 80011d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <SystemInit+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a12      	ldr	r2, [pc, #72]	; (8001228 <SystemInit+0x64>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011e4:	4b10      	ldr	r3, [pc, #64]	; (8001228 <SystemInit+0x64>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <SystemInit+0x64>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <SystemInit+0x64>)
 80011f0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80011f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <SystemInit+0x64>)
 80011fc:	4a0b      	ldr	r2, [pc, #44]	; (800122c <SystemInit+0x68>)
 80011fe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <SystemInit+0x64>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a08      	ldr	r2, [pc, #32]	; (8001228 <SystemInit+0x64>)
 8001206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800120a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <SystemInit+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <SystemInit+0x60>)
 8001214:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001218:	609a      	str	r2, [r3, #8]
#endif
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00
 8001228:	40023800 	.word	0x40023800
 800122c:	24003010 	.word	0x24003010

08001230 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001242:	e7fe      	b.n	8001242 <HardFault_Handler+0x4>

08001244 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001248:	e7fe      	b.n	8001248 <MemManage_Handler+0x4>

0800124a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800124e:	e7fe      	b.n	800124e <BusFault_Handler+0x4>

08001250 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001254:	e7fe      	b.n	8001254 <UsageFault_Handler+0x4>

08001256 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001284:	f000 f84e 	bl	8001324 <HAL_IncTick>
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_Init+0x34>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <HAL_Init+0x34>)
 8001296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800129a:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <HAL_Init+0x34>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <HAL_Init+0x34>)
 80012a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a8:	2003      	movs	r0, #3
 80012aa:	f000 f92b 	bl	8001504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ae:	200f      	movs	r0, #15
 80012b0:	f000 f808 	bl	80012c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b4:	f000 fb98 	bl	80019e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023c00 	.word	0x40023c00

080012c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_InitTick+0x54>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_InitTick+0x58>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012da:	fbb3 f3f1 	udiv	r3, r3, r1
 80012de:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f943 	bl	800156e <HAL_SYSTICK_Config>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00e      	b.n	8001310 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b0f      	cmp	r3, #15
 80012f6:	d80a      	bhi.n	800130e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f8:	2200      	movs	r2, #0
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001300:	f000 f90b 	bl	800151a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001304:	4a06      	ldr	r2, [pc, #24]	; (8001320 <HAL_InitTick+0x5c>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	e000      	b.n	8001310 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000010 	.word	0x20000010
 800131c:	20000018 	.word	0x20000018
 8001320:	20000014 	.word	0x20000014

08001324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_IncTick+0x20>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_IncTick+0x24>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4413      	add	r3, r2
 8001334:	4a04      	ldr	r2, [pc, #16]	; (8001348 <HAL_IncTick+0x24>)
 8001336:	6013      	str	r3, [r2, #0]
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20000018 	.word	0x20000018
 8001348:	20000090 	.word	0x20000090

0800134c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return uwTick;
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <HAL_GetTick+0x14>)
 8001352:	681b      	ldr	r3, [r3, #0]
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000090 	.word	0x20000090

08001364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001380:	4013      	ands	r3, r2
 8001382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800138c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001396:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	60d3      	str	r3, [r2, #12]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <__NVIC_GetPriorityGrouping+0x18>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	f003 0307 	and.w	r3, r3, #7
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	db0b      	blt.n	80013f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	f003 021f 	and.w	r2, r3, #31
 80013e0:	4907      	ldr	r1, [pc, #28]	; (8001400 <__NVIC_EnableIRQ+0x38>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	095b      	lsrs	r3, r3, #5
 80013e8:	2001      	movs	r0, #1
 80013ea:	fa00 f202 	lsl.w	r2, r0, r2
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000e100 	.word	0xe000e100

08001404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	6039      	str	r1, [r7, #0]
 800140e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001414:	2b00      	cmp	r3, #0
 8001416:	db0a      	blt.n	800142e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	b2da      	uxtb	r2, r3
 800141c:	490c      	ldr	r1, [pc, #48]	; (8001450 <__NVIC_SetPriority+0x4c>)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	0112      	lsls	r2, r2, #4
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	440b      	add	r3, r1
 8001428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800142c:	e00a      	b.n	8001444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4908      	ldr	r1, [pc, #32]	; (8001454 <__NVIC_SetPriority+0x50>)
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	3b04      	subs	r3, #4
 800143c:	0112      	lsls	r2, r2, #4
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	440b      	add	r3, r1
 8001442:	761a      	strb	r2, [r3, #24]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000e100 	.word	0xe000e100
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001458:	b480      	push	{r7}
 800145a:	b089      	sub	sp, #36	; 0x24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f1c3 0307 	rsb	r3, r3, #7
 8001472:	2b04      	cmp	r3, #4
 8001474:	bf28      	it	cs
 8001476:	2304      	movcs	r3, #4
 8001478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3304      	adds	r3, #4
 800147e:	2b06      	cmp	r3, #6
 8001480:	d902      	bls.n	8001488 <NVIC_EncodePriority+0x30>
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3b03      	subs	r3, #3
 8001486:	e000      	b.n	800148a <NVIC_EncodePriority+0x32>
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43da      	mvns	r2, r3
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	401a      	ands	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	43d9      	mvns	r1, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	4313      	orrs	r3, r2
         );
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3724      	adds	r7, #36	; 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d0:	d301      	bcc.n	80014d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00f      	b.n	80014f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <SysTick_Config+0x40>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014de:	210f      	movs	r1, #15
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014e4:	f7ff ff8e 	bl	8001404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <SysTick_Config+0x40>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ee:	4b04      	ldr	r3, [pc, #16]	; (8001500 <SysTick_Config+0x40>)
 80014f0:	2207      	movs	r2, #7
 80014f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	e000e010 	.word	0xe000e010

08001504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ff29 	bl	8001364 <__NVIC_SetPriorityGrouping>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800152c:	f7ff ff3e 	bl	80013ac <__NVIC_GetPriorityGrouping>
 8001530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	6978      	ldr	r0, [r7, #20]
 8001538:	f7ff ff8e 	bl	8001458 <NVIC_EncodePriority>
 800153c:	4602      	mov	r2, r0
 800153e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff5d 	bl	8001404 <__NVIC_SetPriority>
}
 800154a:	bf00      	nop
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff31 	bl	80013c8 <__NVIC_EnableIRQ>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ffa2 	bl	80014c0 <SysTick_Config>
 800157c:	4603      	mov	r3, r0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
 80015a2:	e177      	b.n	8001894 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015a4:	2201      	movs	r2, #1
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	429a      	cmp	r2, r3
 80015be:	f040 8166 	bne.w	800188e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d005      	beq.n	80015da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d130      	bne.n	800163c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	2203      	movs	r2, #3
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43db      	mvns	r3, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4013      	ands	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001610:	2201      	movs	r2, #1
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	091b      	lsrs	r3, r3, #4
 8001626:	f003 0201 	and.w	r2, r3, #1
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	2b03      	cmp	r3, #3
 8001646:	d017      	beq.n	8001678 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	2203      	movs	r2, #3
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d123      	bne.n	80016cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	08da      	lsrs	r2, r3, #3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3208      	adds	r2, #8
 800168c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001690:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	220f      	movs	r2, #15
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	691a      	ldr	r2, [r3, #16]
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	08da      	lsrs	r2, r3, #3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3208      	adds	r2, #8
 80016c6:	69b9      	ldr	r1, [r7, #24]
 80016c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	2203      	movs	r2, #3
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0203 	and.w	r2, r3, #3
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 80c0 	beq.w	800188e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b66      	ldr	r3, [pc, #408]	; (80018ac <HAL_GPIO_Init+0x324>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	4a65      	ldr	r2, [pc, #404]	; (80018ac <HAL_GPIO_Init+0x324>)
 8001718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171c:	6453      	str	r3, [r2, #68]	; 0x44
 800171e:	4b63      	ldr	r3, [pc, #396]	; (80018ac <HAL_GPIO_Init+0x324>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800172a:	4a61      	ldr	r2, [pc, #388]	; (80018b0 <HAL_GPIO_Init+0x328>)
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	089b      	lsrs	r3, r3, #2
 8001730:	3302      	adds	r3, #2
 8001732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	220f      	movs	r2, #15
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a58      	ldr	r2, [pc, #352]	; (80018b4 <HAL_GPIO_Init+0x32c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d037      	beq.n	80017c6 <HAL_GPIO_Init+0x23e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a57      	ldr	r2, [pc, #348]	; (80018b8 <HAL_GPIO_Init+0x330>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d031      	beq.n	80017c2 <HAL_GPIO_Init+0x23a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a56      	ldr	r2, [pc, #344]	; (80018bc <HAL_GPIO_Init+0x334>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d02b      	beq.n	80017be <HAL_GPIO_Init+0x236>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a55      	ldr	r2, [pc, #340]	; (80018c0 <HAL_GPIO_Init+0x338>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d025      	beq.n	80017ba <HAL_GPIO_Init+0x232>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a54      	ldr	r2, [pc, #336]	; (80018c4 <HAL_GPIO_Init+0x33c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d01f      	beq.n	80017b6 <HAL_GPIO_Init+0x22e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a53      	ldr	r2, [pc, #332]	; (80018c8 <HAL_GPIO_Init+0x340>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d019      	beq.n	80017b2 <HAL_GPIO_Init+0x22a>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a52      	ldr	r2, [pc, #328]	; (80018cc <HAL_GPIO_Init+0x344>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d013      	beq.n	80017ae <HAL_GPIO_Init+0x226>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a51      	ldr	r2, [pc, #324]	; (80018d0 <HAL_GPIO_Init+0x348>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d00d      	beq.n	80017aa <HAL_GPIO_Init+0x222>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a50      	ldr	r2, [pc, #320]	; (80018d4 <HAL_GPIO_Init+0x34c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d007      	beq.n	80017a6 <HAL_GPIO_Init+0x21e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4f      	ldr	r2, [pc, #316]	; (80018d8 <HAL_GPIO_Init+0x350>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d101      	bne.n	80017a2 <HAL_GPIO_Init+0x21a>
 800179e:	2309      	movs	r3, #9
 80017a0:	e012      	b.n	80017c8 <HAL_GPIO_Init+0x240>
 80017a2:	230a      	movs	r3, #10
 80017a4:	e010      	b.n	80017c8 <HAL_GPIO_Init+0x240>
 80017a6:	2308      	movs	r3, #8
 80017a8:	e00e      	b.n	80017c8 <HAL_GPIO_Init+0x240>
 80017aa:	2307      	movs	r3, #7
 80017ac:	e00c      	b.n	80017c8 <HAL_GPIO_Init+0x240>
 80017ae:	2306      	movs	r3, #6
 80017b0:	e00a      	b.n	80017c8 <HAL_GPIO_Init+0x240>
 80017b2:	2305      	movs	r3, #5
 80017b4:	e008      	b.n	80017c8 <HAL_GPIO_Init+0x240>
 80017b6:	2304      	movs	r3, #4
 80017b8:	e006      	b.n	80017c8 <HAL_GPIO_Init+0x240>
 80017ba:	2303      	movs	r3, #3
 80017bc:	e004      	b.n	80017c8 <HAL_GPIO_Init+0x240>
 80017be:	2302      	movs	r3, #2
 80017c0:	e002      	b.n	80017c8 <HAL_GPIO_Init+0x240>
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <HAL_GPIO_Init+0x240>
 80017c6:	2300      	movs	r3, #0
 80017c8:	69fa      	ldr	r2, [r7, #28]
 80017ca:	f002 0203 	and.w	r2, r2, #3
 80017ce:	0092      	lsls	r2, r2, #2
 80017d0:	4093      	lsls	r3, r2
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017d8:	4935      	ldr	r1, [pc, #212]	; (80018b0 <HAL_GPIO_Init+0x328>)
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	3302      	adds	r3, #2
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017e6:	4b3d      	ldr	r3, [pc, #244]	; (80018dc <HAL_GPIO_Init+0x354>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4013      	ands	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800180a:	4a34      	ldr	r2, [pc, #208]	; (80018dc <HAL_GPIO_Init+0x354>)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001810:	4b32      	ldr	r3, [pc, #200]	; (80018dc <HAL_GPIO_Init+0x354>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001834:	4a29      	ldr	r2, [pc, #164]	; (80018dc <HAL_GPIO_Init+0x354>)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800183a:	4b28      	ldr	r3, [pc, #160]	; (80018dc <HAL_GPIO_Init+0x354>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800185e:	4a1f      	ldr	r2, [pc, #124]	; (80018dc <HAL_GPIO_Init+0x354>)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001864:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <HAL_GPIO_Init+0x354>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001888:	4a14      	ldr	r2, [pc, #80]	; (80018dc <HAL_GPIO_Init+0x354>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3301      	adds	r3, #1
 8001892:	61fb      	str	r3, [r7, #28]
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	2b0f      	cmp	r3, #15
 8001898:	f67f ae84 	bls.w	80015a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800189c:	bf00      	nop
 800189e:	bf00      	nop
 80018a0:	3724      	adds	r7, #36	; 0x24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40013800 	.word	0x40013800
 80018b4:	40020000 	.word	0x40020000
 80018b8:	40020400 	.word	0x40020400
 80018bc:	40020800 	.word	0x40020800
 80018c0:	40020c00 	.word	0x40020c00
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40021400 	.word	0x40021400
 80018cc:	40021800 	.word	0x40021800
 80018d0:	40021c00 	.word	0x40021c00
 80018d4:	40022000 	.word	0x40022000
 80018d8:	40022400 	.word	0x40022400
 80018dc:	40013c00 	.word	0x40013c00

080018e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691a      	ldr	r2, [r3, #16]
 80018f0:	887b      	ldrh	r3, [r7, #2]
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d002      	beq.n	80018fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018f8:	2301      	movs	r3, #1
 80018fa:	73fb      	strb	r3, [r7, #15]
 80018fc:	e001      	b.n	8001902 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018fe:	2300      	movs	r3, #0
 8001900:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001902:	7bfb      	ldrb	r3, [r7, #15]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	807b      	strh	r3, [r7, #2]
 800191c:	4613      	mov	r3, r2
 800191e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001920:	787b      	ldrb	r3, [r7, #1]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001926:	887a      	ldrh	r2, [r7, #2]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800192c:	e003      	b.n	8001936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800192e:	887b      	ldrh	r3, [r7, #2]
 8001930:	041a      	lsls	r2, r3, #16
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	619a      	str	r2, [r3, #24]
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	4b23      	ldr	r3, [pc, #140]	; (80019e0 <HAL_UART_MspInit+0x9c>)
 8001952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001954:	4a22      	ldr	r2, [pc, #136]	; (80019e0 <HAL_UART_MspInit+0x9c>)
 8001956:	f043 0308 	orr.w	r3, r3, #8
 800195a:	6313      	str	r3, [r2, #48]	; 0x30
 800195c:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <HAL_UART_MspInit+0x9c>)
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <HAL_UART_MspInit+0x9c>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	4a1b      	ldr	r2, [pc, #108]	; (80019e0 <HAL_UART_MspInit+0x9c>)
 8001972:	f043 0308 	orr.w	r3, r3, #8
 8001976:	6313      	str	r3, [r2, #48]	; 0x30
 8001978:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <HAL_UART_MspInit+0x9c>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <HAL_UART_MspInit+0x9c>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <HAL_UART_MspInit+0x9c>)
 800198e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001992:	6413      	str	r3, [r2, #64]	; 0x40
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_UART_MspInit+0x9c>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80019a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80019aa:	2301      	movs	r3, #1
 80019ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ae:	2303      	movs	r3, #3
 80019b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80019b2:	2307      	movs	r3, #7
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4619      	mov	r1, r3
 80019bc:	4809      	ldr	r0, [pc, #36]	; (80019e4 <HAL_UART_MspInit+0xa0>)
 80019be:	f7ff fde3 	bl	8001588 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80019c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80019c8:	2307      	movs	r3, #7
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	4619      	mov	r1, r3
 80019d2:	4804      	ldr	r0, [pc, #16]	; (80019e4 <HAL_UART_MspInit+0xa0>)
 80019d4:	f7ff fdd8 	bl	8001588 <HAL_GPIO_Init>
}
 80019d8:	bf00      	nop
 80019da:	3728      	adds	r7, #40	; 0x28
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020c00 	.word	0x40020c00

080019e8 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0

}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	603b      	str	r3, [r7, #0]
 8001a06:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	4a1f      	ldr	r2, [pc, #124]	; (8001a88 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a10:	6413      	str	r3, [r2, #64]	; 0x40
 8001a12:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a1e:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <HAL_PWREx_EnableOverDrive+0x94>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a24:	f7ff fc92 	bl	800134c <HAL_GetTick>
 8001a28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a2a:	e009      	b.n	8001a40 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a2c:	f7ff fc8e 	bl	800134c <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a3a:	d901      	bls.n	8001a40 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e01f      	b.n	8001a80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a40:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4c:	d1ee      	bne.n	8001a2c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a54:	f7ff fc7a 	bl	800134c <HAL_GetTick>
 8001a58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a5a:	e009      	b.n	8001a70 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a5c:	f7ff fc76 	bl	800134c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a6a:	d901      	bls.n	8001a70 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e007      	b.n	8001a80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a7c:	d1ee      	bne.n	8001a5c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	420e0040 	.word	0x420e0040
 8001a90:	40007000 	.word	0x40007000
 8001a94:	420e0044 	.word	0x420e0044

08001a98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e267      	b.n	8001f7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d075      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ab6:	4b88      	ldr	r3, [pc, #544]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	d00c      	beq.n	8001adc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ac2:	4b85      	ldr	r3, [pc, #532]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d112      	bne.n	8001af4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ace:	4b82      	ldr	r3, [pc, #520]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ada:	d10b      	bne.n	8001af4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001adc:	4b7e      	ldr	r3, [pc, #504]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d05b      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x108>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d157      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e242      	b.n	8001f7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afc:	d106      	bne.n	8001b0c <HAL_RCC_OscConfig+0x74>
 8001afe:	4b76      	ldr	r3, [pc, #472]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a75      	ldr	r2, [pc, #468]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	e01d      	b.n	8001b48 <HAL_RCC_OscConfig+0xb0>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b14:	d10c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x98>
 8001b16:	4b70      	ldr	r3, [pc, #448]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a6f      	ldr	r2, [pc, #444]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	4b6d      	ldr	r3, [pc, #436]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a6c      	ldr	r2, [pc, #432]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e00b      	b.n	8001b48 <HAL_RCC_OscConfig+0xb0>
 8001b30:	4b69      	ldr	r3, [pc, #420]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a68      	ldr	r2, [pc, #416]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	4b66      	ldr	r3, [pc, #408]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a65      	ldr	r2, [pc, #404]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d013      	beq.n	8001b78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b50:	f7ff fbfc 	bl	800134c <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b58:	f7ff fbf8 	bl	800134c <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b64      	cmp	r3, #100	; 0x64
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e207      	b.n	8001f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6a:	4b5b      	ldr	r3, [pc, #364]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0xc0>
 8001b76:	e014      	b.n	8001ba2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7ff fbe8 	bl	800134c <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b80:	f7ff fbe4 	bl	800134c <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b64      	cmp	r3, #100	; 0x64
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e1f3      	b.n	8001f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b92:	4b51      	ldr	r3, [pc, #324]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0xe8>
 8001b9e:	e000      	b.n	8001ba2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d063      	beq.n	8001c76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bae:	4b4a      	ldr	r3, [pc, #296]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00b      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bba:	4b47      	ldr	r3, [pc, #284]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	d11c      	bne.n	8001c00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bc6:	4b44      	ldr	r3, [pc, #272]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d116      	bne.n	8001c00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd2:	4b41      	ldr	r3, [pc, #260]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d005      	beq.n	8001bea <HAL_RCC_OscConfig+0x152>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d001      	beq.n	8001bea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e1c7      	b.n	8001f7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bea:	4b3b      	ldr	r3, [pc, #236]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4937      	ldr	r1, [pc, #220]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfe:	e03a      	b.n	8001c76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d020      	beq.n	8001c4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c08:	4b34      	ldr	r3, [pc, #208]	; (8001cdc <HAL_RCC_OscConfig+0x244>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0e:	f7ff fb9d 	bl	800134c <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c16:	f7ff fb99 	bl	800134c <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e1a8      	b.n	8001f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c28:	4b2b      	ldr	r3, [pc, #172]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0f0      	beq.n	8001c16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c34:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	4925      	ldr	r1, [pc, #148]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	600b      	str	r3, [r1, #0]
 8001c48:	e015      	b.n	8001c76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c4a:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <HAL_RCC_OscConfig+0x244>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7ff fb7c 	bl	800134c <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c58:	f7ff fb78 	bl	800134c <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e187      	b.n	8001f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6a:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d036      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d016      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <HAL_RCC_OscConfig+0x248>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c90:	f7ff fb5c 	bl	800134c <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c98:	f7ff fb58 	bl	800134c <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e167      	b.n	8001f7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_RCC_OscConfig+0x240>)
 8001cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0x200>
 8001cb6:	e01b      	b.n	8001cf0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_RCC_OscConfig+0x248>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cbe:	f7ff fb45 	bl	800134c <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc4:	e00e      	b.n	8001ce4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc6:	f7ff fb41 	bl	800134c <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d907      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e150      	b.n	8001f7a <HAL_RCC_OscConfig+0x4e2>
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	42470000 	.word	0x42470000
 8001ce0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce4:	4b88      	ldr	r3, [pc, #544]	; (8001f08 <HAL_RCC_OscConfig+0x470>)
 8001ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1ea      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 8097 	beq.w	8001e2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d02:	4b81      	ldr	r3, [pc, #516]	; (8001f08 <HAL_RCC_OscConfig+0x470>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10f      	bne.n	8001d2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	4b7d      	ldr	r3, [pc, #500]	; (8001f08 <HAL_RCC_OscConfig+0x470>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	4a7c      	ldr	r2, [pc, #496]	; (8001f08 <HAL_RCC_OscConfig+0x470>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1e:	4b7a      	ldr	r3, [pc, #488]	; (8001f08 <HAL_RCC_OscConfig+0x470>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2e:	4b77      	ldr	r3, [pc, #476]	; (8001f0c <HAL_RCC_OscConfig+0x474>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d118      	bne.n	8001d6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d3a:	4b74      	ldr	r3, [pc, #464]	; (8001f0c <HAL_RCC_OscConfig+0x474>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a73      	ldr	r2, [pc, #460]	; (8001f0c <HAL_RCC_OscConfig+0x474>)
 8001d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d46:	f7ff fb01 	bl	800134c <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4e:	f7ff fafd 	bl	800134c <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e10c      	b.n	8001f7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d60:	4b6a      	ldr	r3, [pc, #424]	; (8001f0c <HAL_RCC_OscConfig+0x474>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f0      	beq.n	8001d4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d106      	bne.n	8001d82 <HAL_RCC_OscConfig+0x2ea>
 8001d74:	4b64      	ldr	r3, [pc, #400]	; (8001f08 <HAL_RCC_OscConfig+0x470>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d78:	4a63      	ldr	r2, [pc, #396]	; (8001f08 <HAL_RCC_OscConfig+0x470>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d80:	e01c      	b.n	8001dbc <HAL_RCC_OscConfig+0x324>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b05      	cmp	r3, #5
 8001d88:	d10c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x30c>
 8001d8a:	4b5f      	ldr	r3, [pc, #380]	; (8001f08 <HAL_RCC_OscConfig+0x470>)
 8001d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8e:	4a5e      	ldr	r2, [pc, #376]	; (8001f08 <HAL_RCC_OscConfig+0x470>)
 8001d90:	f043 0304 	orr.w	r3, r3, #4
 8001d94:	6713      	str	r3, [r2, #112]	; 0x70
 8001d96:	4b5c      	ldr	r3, [pc, #368]	; (8001f08 <HAL_RCC_OscConfig+0x470>)
 8001d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9a:	4a5b      	ldr	r2, [pc, #364]	; (8001f08 <HAL_RCC_OscConfig+0x470>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6713      	str	r3, [r2, #112]	; 0x70
 8001da2:	e00b      	b.n	8001dbc <HAL_RCC_OscConfig+0x324>
 8001da4:	4b58      	ldr	r3, [pc, #352]	; (8001f08 <HAL_RCC_OscConfig+0x470>)
 8001da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da8:	4a57      	ldr	r2, [pc, #348]	; (8001f08 <HAL_RCC_OscConfig+0x470>)
 8001daa:	f023 0301 	bic.w	r3, r3, #1
 8001dae:	6713      	str	r3, [r2, #112]	; 0x70
 8001db0:	4b55      	ldr	r3, [pc, #340]	; (8001f08 <HAL_RCC_OscConfig+0x470>)
 8001db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db4:	4a54      	ldr	r2, [pc, #336]	; (8001f08 <HAL_RCC_OscConfig+0x470>)
 8001db6:	f023 0304 	bic.w	r3, r3, #4
 8001dba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d015      	beq.n	8001df0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc4:	f7ff fac2 	bl	800134c <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dca:	e00a      	b.n	8001de2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dcc:	f7ff fabe 	bl	800134c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e0cb      	b.n	8001f7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de2:	4b49      	ldr	r3, [pc, #292]	; (8001f08 <HAL_RCC_OscConfig+0x470>)
 8001de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0ee      	beq.n	8001dcc <HAL_RCC_OscConfig+0x334>
 8001dee:	e014      	b.n	8001e1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df0:	f7ff faac 	bl	800134c <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df6:	e00a      	b.n	8001e0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df8:	f7ff faa8 	bl	800134c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e0b5      	b.n	8001f7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0e:	4b3e      	ldr	r3, [pc, #248]	; (8001f08 <HAL_RCC_OscConfig+0x470>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1ee      	bne.n	8001df8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e1a:	7dfb      	ldrb	r3, [r7, #23]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d105      	bne.n	8001e2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e20:	4b39      	ldr	r3, [pc, #228]	; (8001f08 <HAL_RCC_OscConfig+0x470>)
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	4a38      	ldr	r2, [pc, #224]	; (8001f08 <HAL_RCC_OscConfig+0x470>)
 8001e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 80a1 	beq.w	8001f78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e36:	4b34      	ldr	r3, [pc, #208]	; (8001f08 <HAL_RCC_OscConfig+0x470>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d05c      	beq.n	8001efc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d141      	bne.n	8001ece <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4a:	4b31      	ldr	r3, [pc, #196]	; (8001f10 <HAL_RCC_OscConfig+0x478>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e50:	f7ff fa7c 	bl	800134c <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e58:	f7ff fa78 	bl	800134c <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e087      	b.n	8001f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6a:	4b27      	ldr	r3, [pc, #156]	; (8001f08 <HAL_RCC_OscConfig+0x470>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69da      	ldr	r2, [r3, #28]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	019b      	lsls	r3, r3, #6
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8c:	085b      	lsrs	r3, r3, #1
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	041b      	lsls	r3, r3, #16
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	061b      	lsls	r3, r3, #24
 8001e9a:	491b      	ldr	r1, [pc, #108]	; (8001f08 <HAL_RCC_OscConfig+0x470>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <HAL_RCC_OscConfig+0x478>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea6:	f7ff fa51 	bl	800134c <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eae:	f7ff fa4d 	bl	800134c <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e05c      	b.n	8001f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_RCC_OscConfig+0x470>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0x416>
 8001ecc:	e054      	b.n	8001f78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <HAL_RCC_OscConfig+0x478>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7ff fa3a 	bl	800134c <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001edc:	f7ff fa36 	bl	800134c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e045      	b.n	8001f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_RCC_OscConfig+0x470>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x444>
 8001efa:	e03d      	b.n	8001f78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d107      	bne.n	8001f14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e038      	b.n	8001f7a <HAL_RCC_OscConfig+0x4e2>
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40007000 	.word	0x40007000
 8001f10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f14:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <HAL_RCC_OscConfig+0x4ec>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d028      	beq.n	8001f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d121      	bne.n	8001f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d11a      	bne.n	8001f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f44:	4013      	ands	r3, r2
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d111      	bne.n	8001f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5a:	085b      	lsrs	r3, r3, #1
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d107      	bne.n	8001f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d001      	beq.n	8001f78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e000      	b.n	8001f7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800

08001f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0cc      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b68      	ldr	r3, [pc, #416]	; (8002140 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d90c      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b65      	ldr	r3, [pc, #404]	; (8002140 <HAL_RCC_ClockConfig+0x1b8>)
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b63      	ldr	r3, [pc, #396]	; (8002140 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0b8      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d020      	beq.n	8002012 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fdc:	4b59      	ldr	r3, [pc, #356]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	4a58      	ldr	r2, [pc, #352]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fe6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ff4:	4b53      	ldr	r3, [pc, #332]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	4a52      	ldr	r2, [pc, #328]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ffe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002000:	4b50      	ldr	r3, [pc, #320]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	494d      	ldr	r1, [pc, #308]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 800200e:	4313      	orrs	r3, r2
 8002010:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d044      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d107      	bne.n	8002036 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002026:	4b47      	ldr	r3, [pc, #284]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d119      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e07f      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d003      	beq.n	8002046 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002042:	2b03      	cmp	r3, #3
 8002044:	d107      	bne.n	8002056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002046:	4b3f      	ldr	r3, [pc, #252]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d109      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e06f      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002056:	4b3b      	ldr	r3, [pc, #236]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e067      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002066:	4b37      	ldr	r3, [pc, #220]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f023 0203 	bic.w	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	4934      	ldr	r1, [pc, #208]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002074:	4313      	orrs	r3, r2
 8002076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002078:	f7ff f968 	bl	800134c <HAL_GetTick>
 800207c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	e00a      	b.n	8002096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002080:	f7ff f964 	bl	800134c <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f241 3288 	movw	r2, #5000	; 0x1388
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e04f      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002096:	4b2b      	ldr	r3, [pc, #172]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 020c 	and.w	r2, r3, #12
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d1eb      	bne.n	8002080 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020a8:	4b25      	ldr	r3, [pc, #148]	; (8002140 <HAL_RCC_ClockConfig+0x1b8>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 030f 	and.w	r3, r3, #15
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d20c      	bcs.n	80020d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b6:	4b22      	ldr	r3, [pc, #136]	; (8002140 <HAL_RCC_ClockConfig+0x1b8>)
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020be:	4b20      	ldr	r3, [pc, #128]	; (8002140 <HAL_RCC_ClockConfig+0x1b8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d001      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e032      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4916      	ldr	r1, [pc, #88]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d009      	beq.n	800210e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	490e      	ldr	r1, [pc, #56]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	4313      	orrs	r3, r2
 800210c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800210e:	f000 f821 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8002112:	4602      	mov	r2, r0
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	490a      	ldr	r1, [pc, #40]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	5ccb      	ldrb	r3, [r1, r3]
 8002122:	fa22 f303 	lsr.w	r3, r2, r3
 8002126:	4a09      	ldr	r2, [pc, #36]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff f8c8 	bl	80012c4 <HAL_InitTick>

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023c00 	.word	0x40023c00
 8002144:	40023800 	.word	0x40023800
 8002148:	080034dc 	.word	0x080034dc
 800214c:	20000010 	.word	0x20000010
 8002150:	20000014 	.word	0x20000014

08002154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002158:	b094      	sub	sp, #80	; 0x50
 800215a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	647b      	str	r3, [r7, #68]	; 0x44
 8002160:	2300      	movs	r3, #0
 8002162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002164:	2300      	movs	r3, #0
 8002166:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800216c:	4b79      	ldr	r3, [pc, #484]	; (8002354 <HAL_RCC_GetSysClockFreq+0x200>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 030c 	and.w	r3, r3, #12
 8002174:	2b08      	cmp	r3, #8
 8002176:	d00d      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0x40>
 8002178:	2b08      	cmp	r3, #8
 800217a:	f200 80e1 	bhi.w	8002340 <HAL_RCC_GetSysClockFreq+0x1ec>
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0x34>
 8002182:	2b04      	cmp	r3, #4
 8002184:	d003      	beq.n	800218e <HAL_RCC_GetSysClockFreq+0x3a>
 8002186:	e0db      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002188:	4b73      	ldr	r3, [pc, #460]	; (8002358 <HAL_RCC_GetSysClockFreq+0x204>)
 800218a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800218c:	e0db      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800218e:	4b73      	ldr	r3, [pc, #460]	; (800235c <HAL_RCC_GetSysClockFreq+0x208>)
 8002190:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002192:	e0d8      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002194:	4b6f      	ldr	r3, [pc, #444]	; (8002354 <HAL_RCC_GetSysClockFreq+0x200>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800219c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800219e:	4b6d      	ldr	r3, [pc, #436]	; (8002354 <HAL_RCC_GetSysClockFreq+0x200>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d063      	beq.n	8002272 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021aa:	4b6a      	ldr	r3, [pc, #424]	; (8002354 <HAL_RCC_GetSysClockFreq+0x200>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	099b      	lsrs	r3, r3, #6
 80021b0:	2200      	movs	r2, #0
 80021b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80021b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80021b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021bc:	633b      	str	r3, [r7, #48]	; 0x30
 80021be:	2300      	movs	r3, #0
 80021c0:	637b      	str	r3, [r7, #52]	; 0x34
 80021c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021c6:	4622      	mov	r2, r4
 80021c8:	462b      	mov	r3, r5
 80021ca:	f04f 0000 	mov.w	r0, #0
 80021ce:	f04f 0100 	mov.w	r1, #0
 80021d2:	0159      	lsls	r1, r3, #5
 80021d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021d8:	0150      	lsls	r0, r2, #5
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4621      	mov	r1, r4
 80021e0:	1a51      	subs	r1, r2, r1
 80021e2:	6139      	str	r1, [r7, #16]
 80021e4:	4629      	mov	r1, r5
 80021e6:	eb63 0301 	sbc.w	r3, r3, r1
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021f8:	4659      	mov	r1, fp
 80021fa:	018b      	lsls	r3, r1, #6
 80021fc:	4651      	mov	r1, sl
 80021fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002202:	4651      	mov	r1, sl
 8002204:	018a      	lsls	r2, r1, #6
 8002206:	4651      	mov	r1, sl
 8002208:	ebb2 0801 	subs.w	r8, r2, r1
 800220c:	4659      	mov	r1, fp
 800220e:	eb63 0901 	sbc.w	r9, r3, r1
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800221e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002222:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002226:	4690      	mov	r8, r2
 8002228:	4699      	mov	r9, r3
 800222a:	4623      	mov	r3, r4
 800222c:	eb18 0303 	adds.w	r3, r8, r3
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	462b      	mov	r3, r5
 8002234:	eb49 0303 	adc.w	r3, r9, r3
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	f04f 0300 	mov.w	r3, #0
 8002242:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002246:	4629      	mov	r1, r5
 8002248:	024b      	lsls	r3, r1, #9
 800224a:	4621      	mov	r1, r4
 800224c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002250:	4621      	mov	r1, r4
 8002252:	024a      	lsls	r2, r1, #9
 8002254:	4610      	mov	r0, r2
 8002256:	4619      	mov	r1, r3
 8002258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800225a:	2200      	movs	r2, #0
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
 800225e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002260:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002264:	f7fe fc20 	bl	8000aa8 <__aeabi_uldivmod>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4613      	mov	r3, r2
 800226e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002270:	e058      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002272:	4b38      	ldr	r3, [pc, #224]	; (8002354 <HAL_RCC_GetSysClockFreq+0x200>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	099b      	lsrs	r3, r3, #6
 8002278:	2200      	movs	r2, #0
 800227a:	4618      	mov	r0, r3
 800227c:	4611      	mov	r1, r2
 800227e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002282:	623b      	str	r3, [r7, #32]
 8002284:	2300      	movs	r3, #0
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
 8002288:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800228c:	4642      	mov	r2, r8
 800228e:	464b      	mov	r3, r9
 8002290:	f04f 0000 	mov.w	r0, #0
 8002294:	f04f 0100 	mov.w	r1, #0
 8002298:	0159      	lsls	r1, r3, #5
 800229a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800229e:	0150      	lsls	r0, r2, #5
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4641      	mov	r1, r8
 80022a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80022aa:	4649      	mov	r1, r9
 80022ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022c4:	ebb2 040a 	subs.w	r4, r2, sl
 80022c8:	eb63 050b 	sbc.w	r5, r3, fp
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	00eb      	lsls	r3, r5, #3
 80022d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022da:	00e2      	lsls	r2, r4, #3
 80022dc:	4614      	mov	r4, r2
 80022de:	461d      	mov	r5, r3
 80022e0:	4643      	mov	r3, r8
 80022e2:	18e3      	adds	r3, r4, r3
 80022e4:	603b      	str	r3, [r7, #0]
 80022e6:	464b      	mov	r3, r9
 80022e8:	eb45 0303 	adc.w	r3, r5, r3
 80022ec:	607b      	str	r3, [r7, #4]
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022fa:	4629      	mov	r1, r5
 80022fc:	028b      	lsls	r3, r1, #10
 80022fe:	4621      	mov	r1, r4
 8002300:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002304:	4621      	mov	r1, r4
 8002306:	028a      	lsls	r2, r1, #10
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800230e:	2200      	movs	r2, #0
 8002310:	61bb      	str	r3, [r7, #24]
 8002312:	61fa      	str	r2, [r7, #28]
 8002314:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002318:	f7fe fbc6 	bl	8000aa8 <__aeabi_uldivmod>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4613      	mov	r3, r2
 8002322:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <HAL_RCC_GetSysClockFreq+0x200>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	0c1b      	lsrs	r3, r3, #16
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	3301      	adds	r3, #1
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002334:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002338:	fbb2 f3f3 	udiv	r3, r2, r3
 800233c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800233e:	e002      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_RCC_GetSysClockFreq+0x204>)
 8002342:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002348:	4618      	mov	r0, r3
 800234a:	3750      	adds	r7, #80	; 0x50
 800234c:	46bd      	mov	sp, r7
 800234e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800
 8002358:	00f42400 	.word	0x00f42400
 800235c:	007a1200 	.word	0x007a1200

08002360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <HAL_RCC_GetHCLKFreq+0x14>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000010 	.word	0x20000010

08002378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800237c:	f7ff fff0 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 8002380:	4602      	mov	r2, r0
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	0a9b      	lsrs	r3, r3, #10
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	4903      	ldr	r1, [pc, #12]	; (800239c <HAL_RCC_GetPCLK1Freq+0x24>)
 800238e:	5ccb      	ldrb	r3, [r1, r3]
 8002390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002394:	4618      	mov	r0, r3
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40023800 	.word	0x40023800
 800239c:	080034ec 	.word	0x080034ec

080023a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023a4:	f7ff ffdc 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 80023a8:	4602      	mov	r2, r0
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	0b5b      	lsrs	r3, r3, #13
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	4903      	ldr	r1, [pc, #12]	; (80023c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023b6:	5ccb      	ldrb	r3, [r1, r3]
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023bc:	4618      	mov	r0, r3
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40023800 	.word	0x40023800
 80023c4:	080034ec 	.word	0x080034ec

080023c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e03f      	b.n	800245a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff faa8 	bl	8001944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2224      	movs	r2, #36	; 0x24
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800240a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f929 	bl	8002664 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002420:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695a      	ldr	r2, [r3, #20]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002430:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002440:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2220      	movs	r2, #32
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b08a      	sub	sp, #40	; 0x28
 8002466:	af02      	add	r7, sp, #8
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	603b      	str	r3, [r7, #0]
 800246e:	4613      	mov	r3, r2
 8002470:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b20      	cmp	r3, #32
 8002480:	d17c      	bne.n	800257c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <HAL_UART_Transmit+0x2c>
 8002488:	88fb      	ldrh	r3, [r7, #6]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e075      	b.n	800257e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <HAL_UART_Transmit+0x3e>
 800249c:	2302      	movs	r3, #2
 800249e:	e06e      	b.n	800257e <HAL_UART_Transmit+0x11c>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2221      	movs	r2, #33	; 0x21
 80024b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024b6:	f7fe ff49 	bl	800134c <HAL_GetTick>
 80024ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	88fa      	ldrh	r2, [r7, #6]
 80024c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	88fa      	ldrh	r2, [r7, #6]
 80024c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d0:	d108      	bne.n	80024e4 <HAL_UART_Transmit+0x82>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d104      	bne.n	80024e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	e003      	b.n	80024ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80024f4:	e02a      	b.n	800254c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2200      	movs	r2, #0
 80024fe:	2180      	movs	r1, #128	; 0x80
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 f840 	bl	8002586 <UART_WaitOnFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e036      	b.n	800257e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10b      	bne.n	800252e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002524:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	3302      	adds	r3, #2
 800252a:	61bb      	str	r3, [r7, #24]
 800252c:	e007      	b.n	800253e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	781a      	ldrb	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	3301      	adds	r3, #1
 800253c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002542:	b29b      	uxth	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002550:	b29b      	uxth	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1cf      	bne.n	80024f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2200      	movs	r2, #0
 800255e:	2140      	movs	r1, #64	; 0x40
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 f810 	bl	8002586 <UART_WaitOnFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e006      	b.n	800257e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	e000      	b.n	800257e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800257c:	2302      	movs	r3, #2
  }
}
 800257e:	4618      	mov	r0, r3
 8002580:	3720      	adds	r7, #32
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b090      	sub	sp, #64	; 0x40
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	603b      	str	r3, [r7, #0]
 8002592:	4613      	mov	r3, r2
 8002594:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002596:	e050      	b.n	800263a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800259a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800259e:	d04c      	beq.n	800263a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d007      	beq.n	80025b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80025a6:	f7fe fed1 	bl	800134c <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d241      	bcs.n	800263a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	330c      	adds	r3, #12
 80025bc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c0:	e853 3f00 	ldrex	r3, [r3]
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80025cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	330c      	adds	r3, #12
 80025d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025d6:	637a      	str	r2, [r7, #52]	; 0x34
 80025d8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025de:	e841 2300 	strex	r3, r2, [r1]
 80025e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80025e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1e5      	bne.n	80025b6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	3314      	adds	r3, #20
 80025f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	e853 3f00 	ldrex	r3, [r3]
 80025f8:	613b      	str	r3, [r7, #16]
   return(result);
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	f023 0301 	bic.w	r3, r3, #1
 8002600:	63bb      	str	r3, [r7, #56]	; 0x38
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	3314      	adds	r3, #20
 8002608:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800260a:	623a      	str	r2, [r7, #32]
 800260c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800260e:	69f9      	ldr	r1, [r7, #28]
 8002610:	6a3a      	ldr	r2, [r7, #32]
 8002612:	e841 2300 	strex	r3, r2, [r1]
 8002616:	61bb      	str	r3, [r7, #24]
   return(result);
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1e5      	bne.n	80025ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2220      	movs	r2, #32
 8002622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2220      	movs	r2, #32
 800262a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e00f      	b.n	800265a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	4013      	ands	r3, r2
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	429a      	cmp	r2, r3
 8002648:	bf0c      	ite	eq
 800264a:	2301      	moveq	r3, #1
 800264c:	2300      	movne	r3, #0
 800264e:	b2db      	uxtb	r3, r3
 8002650:	461a      	mov	r2, r3
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	429a      	cmp	r2, r3
 8002656:	d09f      	beq.n	8002598 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3740      	adds	r7, #64	; 0x40
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002668:	b0c0      	sub	sp, #256	; 0x100
 800266a:	af00      	add	r7, sp, #0
 800266c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800267c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002680:	68d9      	ldr	r1, [r3, #12]
 8002682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	ea40 0301 	orr.w	r3, r0, r1
 800268c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800268e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	431a      	orrs	r2, r3
 800269c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80026bc:	f021 010c 	bic.w	r1, r1, #12
 80026c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80026ca:	430b      	orrs	r3, r1
 80026cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80026da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026de:	6999      	ldr	r1, [r3, #24]
 80026e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	ea40 0301 	orr.w	r3, r0, r1
 80026ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	4b8f      	ldr	r3, [pc, #572]	; (8002930 <UART_SetConfig+0x2cc>)
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d005      	beq.n	8002704 <UART_SetConfig+0xa0>
 80026f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	4b8d      	ldr	r3, [pc, #564]	; (8002934 <UART_SetConfig+0x2d0>)
 8002700:	429a      	cmp	r2, r3
 8002702:	d104      	bne.n	800270e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002704:	f7ff fe4c 	bl	80023a0 <HAL_RCC_GetPCLK2Freq>
 8002708:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800270c:	e003      	b.n	8002716 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800270e:	f7ff fe33 	bl	8002378 <HAL_RCC_GetPCLK1Freq>
 8002712:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002720:	f040 810c 	bne.w	800293c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002728:	2200      	movs	r2, #0
 800272a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800272e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002732:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002736:	4622      	mov	r2, r4
 8002738:	462b      	mov	r3, r5
 800273a:	1891      	adds	r1, r2, r2
 800273c:	65b9      	str	r1, [r7, #88]	; 0x58
 800273e:	415b      	adcs	r3, r3
 8002740:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002742:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002746:	4621      	mov	r1, r4
 8002748:	eb12 0801 	adds.w	r8, r2, r1
 800274c:	4629      	mov	r1, r5
 800274e:	eb43 0901 	adc.w	r9, r3, r1
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800275e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002762:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002766:	4690      	mov	r8, r2
 8002768:	4699      	mov	r9, r3
 800276a:	4623      	mov	r3, r4
 800276c:	eb18 0303 	adds.w	r3, r8, r3
 8002770:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002774:	462b      	mov	r3, r5
 8002776:	eb49 0303 	adc.w	r3, r9, r3
 800277a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800277e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800278a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800278e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002792:	460b      	mov	r3, r1
 8002794:	18db      	adds	r3, r3, r3
 8002796:	653b      	str	r3, [r7, #80]	; 0x50
 8002798:	4613      	mov	r3, r2
 800279a:	eb42 0303 	adc.w	r3, r2, r3
 800279e:	657b      	str	r3, [r7, #84]	; 0x54
 80027a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80027a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80027a8:	f7fe f97e 	bl	8000aa8 <__aeabi_uldivmod>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	4b61      	ldr	r3, [pc, #388]	; (8002938 <UART_SetConfig+0x2d4>)
 80027b2:	fba3 2302 	umull	r2, r3, r3, r2
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	011c      	lsls	r4, r3, #4
 80027ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027be:	2200      	movs	r2, #0
 80027c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80027c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80027cc:	4642      	mov	r2, r8
 80027ce:	464b      	mov	r3, r9
 80027d0:	1891      	adds	r1, r2, r2
 80027d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80027d4:	415b      	adcs	r3, r3
 80027d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80027dc:	4641      	mov	r1, r8
 80027de:	eb12 0a01 	adds.w	sl, r2, r1
 80027e2:	4649      	mov	r1, r9
 80027e4:	eb43 0b01 	adc.w	fp, r3, r1
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027fc:	4692      	mov	sl, r2
 80027fe:	469b      	mov	fp, r3
 8002800:	4643      	mov	r3, r8
 8002802:	eb1a 0303 	adds.w	r3, sl, r3
 8002806:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800280a:	464b      	mov	r3, r9
 800280c:	eb4b 0303 	adc.w	r3, fp, r3
 8002810:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002820:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002824:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002828:	460b      	mov	r3, r1
 800282a:	18db      	adds	r3, r3, r3
 800282c:	643b      	str	r3, [r7, #64]	; 0x40
 800282e:	4613      	mov	r3, r2
 8002830:	eb42 0303 	adc.w	r3, r2, r3
 8002834:	647b      	str	r3, [r7, #68]	; 0x44
 8002836:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800283a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800283e:	f7fe f933 	bl	8000aa8 <__aeabi_uldivmod>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4611      	mov	r1, r2
 8002848:	4b3b      	ldr	r3, [pc, #236]	; (8002938 <UART_SetConfig+0x2d4>)
 800284a:	fba3 2301 	umull	r2, r3, r3, r1
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	2264      	movs	r2, #100	; 0x64
 8002852:	fb02 f303 	mul.w	r3, r2, r3
 8002856:	1acb      	subs	r3, r1, r3
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800285e:	4b36      	ldr	r3, [pc, #216]	; (8002938 <UART_SetConfig+0x2d4>)
 8002860:	fba3 2302 	umull	r2, r3, r3, r2
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800286c:	441c      	add	r4, r3
 800286e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002872:	2200      	movs	r2, #0
 8002874:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002878:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800287c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002880:	4642      	mov	r2, r8
 8002882:	464b      	mov	r3, r9
 8002884:	1891      	adds	r1, r2, r2
 8002886:	63b9      	str	r1, [r7, #56]	; 0x38
 8002888:	415b      	adcs	r3, r3
 800288a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800288c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002890:	4641      	mov	r1, r8
 8002892:	1851      	adds	r1, r2, r1
 8002894:	6339      	str	r1, [r7, #48]	; 0x30
 8002896:	4649      	mov	r1, r9
 8002898:	414b      	adcs	r3, r1
 800289a:	637b      	str	r3, [r7, #52]	; 0x34
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80028a8:	4659      	mov	r1, fp
 80028aa:	00cb      	lsls	r3, r1, #3
 80028ac:	4651      	mov	r1, sl
 80028ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028b2:	4651      	mov	r1, sl
 80028b4:	00ca      	lsls	r2, r1, #3
 80028b6:	4610      	mov	r0, r2
 80028b8:	4619      	mov	r1, r3
 80028ba:	4603      	mov	r3, r0
 80028bc:	4642      	mov	r2, r8
 80028be:	189b      	adds	r3, r3, r2
 80028c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028c4:	464b      	mov	r3, r9
 80028c6:	460a      	mov	r2, r1
 80028c8:	eb42 0303 	adc.w	r3, r2, r3
 80028cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80028dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80028e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80028e4:	460b      	mov	r3, r1
 80028e6:	18db      	adds	r3, r3, r3
 80028e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ea:	4613      	mov	r3, r2
 80028ec:	eb42 0303 	adc.w	r3, r2, r3
 80028f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80028fa:	f7fe f8d5 	bl	8000aa8 <__aeabi_uldivmod>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <UART_SetConfig+0x2d4>)
 8002904:	fba3 1302 	umull	r1, r3, r3, r2
 8002908:	095b      	lsrs	r3, r3, #5
 800290a:	2164      	movs	r1, #100	; 0x64
 800290c:	fb01 f303 	mul.w	r3, r1, r3
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	3332      	adds	r3, #50	; 0x32
 8002916:	4a08      	ldr	r2, [pc, #32]	; (8002938 <UART_SetConfig+0x2d4>)
 8002918:	fba2 2303 	umull	r2, r3, r2, r3
 800291c:	095b      	lsrs	r3, r3, #5
 800291e:	f003 0207 	and.w	r2, r3, #7
 8002922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4422      	add	r2, r4
 800292a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800292c:	e105      	b.n	8002b3a <UART_SetConfig+0x4d6>
 800292e:	bf00      	nop
 8002930:	40011000 	.word	0x40011000
 8002934:	40011400 	.word	0x40011400
 8002938:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800293c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002940:	2200      	movs	r2, #0
 8002942:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002946:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800294a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800294e:	4642      	mov	r2, r8
 8002950:	464b      	mov	r3, r9
 8002952:	1891      	adds	r1, r2, r2
 8002954:	6239      	str	r1, [r7, #32]
 8002956:	415b      	adcs	r3, r3
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
 800295a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800295e:	4641      	mov	r1, r8
 8002960:	1854      	adds	r4, r2, r1
 8002962:	4649      	mov	r1, r9
 8002964:	eb43 0501 	adc.w	r5, r3, r1
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	00eb      	lsls	r3, r5, #3
 8002972:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002976:	00e2      	lsls	r2, r4, #3
 8002978:	4614      	mov	r4, r2
 800297a:	461d      	mov	r5, r3
 800297c:	4643      	mov	r3, r8
 800297e:	18e3      	adds	r3, r4, r3
 8002980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002984:	464b      	mov	r3, r9
 8002986:	eb45 0303 	adc.w	r3, r5, r3
 800298a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800298e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800299a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	f04f 0300 	mov.w	r3, #0
 80029a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80029aa:	4629      	mov	r1, r5
 80029ac:	008b      	lsls	r3, r1, #2
 80029ae:	4621      	mov	r1, r4
 80029b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029b4:	4621      	mov	r1, r4
 80029b6:	008a      	lsls	r2, r1, #2
 80029b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80029bc:	f7fe f874 	bl	8000aa8 <__aeabi_uldivmod>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4b60      	ldr	r3, [pc, #384]	; (8002b48 <UART_SetConfig+0x4e4>)
 80029c6:	fba3 2302 	umull	r2, r3, r3, r2
 80029ca:	095b      	lsrs	r3, r3, #5
 80029cc:	011c      	lsls	r4, r3, #4
 80029ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029d2:	2200      	movs	r2, #0
 80029d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80029d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80029dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80029e0:	4642      	mov	r2, r8
 80029e2:	464b      	mov	r3, r9
 80029e4:	1891      	adds	r1, r2, r2
 80029e6:	61b9      	str	r1, [r7, #24]
 80029e8:	415b      	adcs	r3, r3
 80029ea:	61fb      	str	r3, [r7, #28]
 80029ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029f0:	4641      	mov	r1, r8
 80029f2:	1851      	adds	r1, r2, r1
 80029f4:	6139      	str	r1, [r7, #16]
 80029f6:	4649      	mov	r1, r9
 80029f8:	414b      	adcs	r3, r1
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a08:	4659      	mov	r1, fp
 8002a0a:	00cb      	lsls	r3, r1, #3
 8002a0c:	4651      	mov	r1, sl
 8002a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a12:	4651      	mov	r1, sl
 8002a14:	00ca      	lsls	r2, r1, #3
 8002a16:	4610      	mov	r0, r2
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	4642      	mov	r2, r8
 8002a1e:	189b      	adds	r3, r3, r2
 8002a20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a24:	464b      	mov	r3, r9
 8002a26:	460a      	mov	r2, r1
 8002a28:	eb42 0303 	adc.w	r3, r2, r3
 8002a2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002a48:	4649      	mov	r1, r9
 8002a4a:	008b      	lsls	r3, r1, #2
 8002a4c:	4641      	mov	r1, r8
 8002a4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a52:	4641      	mov	r1, r8
 8002a54:	008a      	lsls	r2, r1, #2
 8002a56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002a5a:	f7fe f825 	bl	8000aa8 <__aeabi_uldivmod>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4b39      	ldr	r3, [pc, #228]	; (8002b48 <UART_SetConfig+0x4e4>)
 8002a64:	fba3 1302 	umull	r1, r3, r3, r2
 8002a68:	095b      	lsrs	r3, r3, #5
 8002a6a:	2164      	movs	r1, #100	; 0x64
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	3332      	adds	r3, #50	; 0x32
 8002a76:	4a34      	ldr	r2, [pc, #208]	; (8002b48 <UART_SetConfig+0x4e4>)
 8002a78:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7c:	095b      	lsrs	r3, r3, #5
 8002a7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a82:	441c      	add	r4, r3
 8002a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a88:	2200      	movs	r2, #0
 8002a8a:	673b      	str	r3, [r7, #112]	; 0x70
 8002a8c:	677a      	str	r2, [r7, #116]	; 0x74
 8002a8e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a92:	4642      	mov	r2, r8
 8002a94:	464b      	mov	r3, r9
 8002a96:	1891      	adds	r1, r2, r2
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	415b      	adcs	r3, r3
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002aa2:	4641      	mov	r1, r8
 8002aa4:	1851      	adds	r1, r2, r1
 8002aa6:	6039      	str	r1, [r7, #0]
 8002aa8:	4649      	mov	r1, r9
 8002aaa:	414b      	adcs	r3, r1
 8002aac:	607b      	str	r3, [r7, #4]
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002aba:	4659      	mov	r1, fp
 8002abc:	00cb      	lsls	r3, r1, #3
 8002abe:	4651      	mov	r1, sl
 8002ac0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ac4:	4651      	mov	r1, sl
 8002ac6:	00ca      	lsls	r2, r1, #3
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	4603      	mov	r3, r0
 8002ace:	4642      	mov	r2, r8
 8002ad0:	189b      	adds	r3, r3, r2
 8002ad2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ad4:	464b      	mov	r3, r9
 8002ad6:	460a      	mov	r2, r1
 8002ad8:	eb42 0303 	adc.w	r3, r2, r3
 8002adc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	663b      	str	r3, [r7, #96]	; 0x60
 8002ae8:	667a      	str	r2, [r7, #100]	; 0x64
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002af6:	4649      	mov	r1, r9
 8002af8:	008b      	lsls	r3, r1, #2
 8002afa:	4641      	mov	r1, r8
 8002afc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b00:	4641      	mov	r1, r8
 8002b02:	008a      	lsls	r2, r1, #2
 8002b04:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b08:	f7fd ffce 	bl	8000aa8 <__aeabi_uldivmod>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <UART_SetConfig+0x4e4>)
 8002b12:	fba3 1302 	umull	r1, r3, r3, r2
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	2164      	movs	r1, #100	; 0x64
 8002b1a:	fb01 f303 	mul.w	r3, r1, r3
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	3332      	adds	r3, #50	; 0x32
 8002b24:	4a08      	ldr	r2, [pc, #32]	; (8002b48 <UART_SetConfig+0x4e4>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	f003 020f 	and.w	r2, r3, #15
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4422      	add	r2, r4
 8002b38:	609a      	str	r2, [r3, #8]
}
 8002b3a:	bf00      	nop
 8002b3c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002b40:	46bd      	mov	sp, r7
 8002b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b46:	bf00      	nop
 8002b48:	51eb851f 	.word	0x51eb851f

08002b4c <HW_HX711_Init>:
 * @brief   Chip HX711 Init
 * @details GPIO init. Set gain. Set tare
 * @return 	void
 */
void HW_HX711_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
    HX711_init_port();
 8002b50:	f000 f966 	bl	8002e20 <HX711_init_port>

	HX711_set_scale(HX711_SCALE_GR);
 8002b54:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002b58:	f000 f898 	bl	8002c8c <HX711_set_scale>
	HX711_set_gain(eGAIN_128);
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	f000 f809 	bl	8002b74 <HX711_set_gain>
	HX711_set_offset(HX711_REAL_OFFSET);
 8002b62:	f240 2049 	movw	r0, #585	; 0x249
 8002b66:	f04f 0100 	mov.w	r1, #0
 8002b6a:	f000 f87d 	bl	8002c68 <HX711_set_offset>
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <HX711_set_gain>:
 * 			Depending on the parameter, the channel is also set to either A or B
 * @param 	HX711_GAIN gain
 * @return 	void
 */
void HX711_set_gain(HX711_GAIN gain)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	71fb      	strb	r3, [r7, #7]
	Gain = gain;
 8002b7e:	4a04      	ldr	r2, [pc, #16]	; (8002b90 <HX711_set_gain+0x1c>)
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	7013      	strb	r3, [r2, #0]
	HX711_read();		// It's necessary doing a reading to set the gain
 8002b84:	f000 f8a0 	bl	8002cc8 <HX711_read>
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20000094 	.word	0x20000094

08002b94 <HX711_get_value>:
 * @details Times = how many readings to do
 * @param   uint8_t times
 * @return 	Read_average() - OFFSET
 */
double HX711_get_value(uint8_t times)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	71fb      	strb	r3, [r7, #7]
	double avg = 0, returnValue = 0;
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	e9c7 2304 	strd	r2, r3, [r7, #16]

	avg = HX711_read_average(times);
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 f8f3 	bl	8002da4 <HX711_read_average>
 8002bbe:	ed87 0b02 	vstr	d0, [r7, #8]

	if(avg > Offset)
 8002bc2:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <HX711_get_value+0x88>)
 8002bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4619      	mov	r1, r3
 8002bcc:	f7fd fc9c 	bl	8000508 <__aeabi_ul2d>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bd8:	f7fd ff5c 	bl	8000a94 <__aeabi_dcmpgt>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d010      	beq.n	8002c04 <HX711_get_value+0x70>
		returnValue = avg - Offset;
 8002be2:	4b0e      	ldr	r3, [pc, #56]	; (8002c1c <HX711_get_value+0x88>)
 8002be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	f7fd fc8c 	bl	8000508 <__aeabi_ul2d>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bf8:	f7fd fb04 	bl	8000204 <__aeabi_dsub>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return returnValue;
 8002c04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c08:	ec43 2b17 	vmov	d7, r2, r3
}
 8002c0c:	eeb0 0a47 	vmov.f32	s0, s14
 8002c10:	eef0 0a67 	vmov.f32	s1, s15
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000098 	.word	0x20000098

08002c20 <HX711_get_units>:
 * @details Times = how many readings to do
 * @param   uint8_t times
 * @return 	Value divided by scale
 */
double HX711_get_units(uint8_t times)
{
 8002c20:	b5b0      	push	{r4, r5, r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	71fb      	strb	r3, [r7, #7]
	return HX711_get_value(times) / Scale;
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff ffb1 	bl	8002b94 <HX711_get_value>
 8002c32:	ec55 4b10 	vmov	r4, r5, d0
 8002c36:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <HX711_get_units+0x44>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fd fc42 	bl	80004c4 <__aeabi_f2d>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4620      	mov	r0, r4
 8002c46:	4629      	mov	r1, r5
 8002c48:	f7fd fdbe 	bl	80007c8 <__aeabi_ddiv>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	ec43 2b17 	vmov	d7, r2, r3
}
 8002c54:	eeb0 0a47 	vmov.f32	s0, s14
 8002c58:	eef0 0a67 	vmov.f32	s1, s15
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bdb0      	pop	{r4, r5, r7, pc}
 8002c62:	bf00      	nop
 8002c64:	200000a0 	.word	0x200000a0

08002c68 <HX711_set_offset>:
 * @brief   Set new offset
 * @details Set the value that's subtracted from the actual reading (tare weight)
 * @param   uint64_t offset
 */
void HX711_set_offset(uint64_t offset)
 {
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	e9c7 0100 	strd	r0, r1, [r7]
	Offset = offset;
 8002c72:	4905      	ldr	r1, [pc, #20]	; (8002c88 <HX711_set_offset+0x20>)
 8002c74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c78:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	20000098 	.word	0x20000098

08002c8c <HX711_set_scale>:
 * @brief   Set new scale value
 * @details This value is used to convert the raw data to "human readable" data (measure units)
 * @param   float scale
 */
void HX711_set_scale(float scale )
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	ed87 0a01 	vstr	s0, [r7, #4]
	Scale = scale;
 8002c96:	4a04      	ldr	r2, [pc, #16]	; (8002ca8 <HX711_set_scale+0x1c>)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6013      	str	r3, [r2, #0]
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	200000a0 	.word	0x200000a0

08002cac <HX711_is_ready>:
 * @details When output data is not ready for retrieval, digital output pin DOUT is high.
 * 			Serial clock should be low. When DOUT goes to low, it indicates data is ready for retrieval.
 * @return 	True if chip is ready, false if not.
 */
static bool_t HX711_is_ready()
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
	HX711_CLK_set_low();
 8002cb0:	f000 f8ee 	bl	8002e90 <HX711_CLK_set_low>

	if(HX711_get_level())
 8002cb4:	f000 f904 	bl	8002ec0 <HX711_get_level>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HX711_is_ready+0x16>
		return false;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	e000      	b.n	8002cc4 <HX711_is_ready+0x18>
	else
		return true;
 8002cc2:	2301      	movs	r3, #1
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HX711_read>:
 * @brief   Get weight
 * @details Waits for the chip to be ready and returns a reading
 * @return 	Weight readed
 */
static uint64_t HX711_read()
{
 8002cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ccc:	b084      	sub	sp, #16
 8002cce:	af00      	add	r7, sp, #0
	uint64_t value = 0;
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t i = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	607b      	str	r3, [r7, #4]

	HX711_CLK_set_low();
 8002ce0:	f000 f8d6 	bl	8002e90 <HX711_CLK_set_low>

	// Wait for GPIO DATA low level
	while (!HX711_is_ready())	// todo: que no sea bloqueante
 8002ce4:	e003      	b.n	8002cee <HX711_read+0x26>
	{
		HW711_delay(WAIT_FOR_READY_DELAY);
 8002ce6:	f242 7010 	movw	r0, #10000	; 0x2710
 8002cea:	f000 f8f5 	bl	8002ed8 <HW711_delay>
	while (!HX711_is_ready())	// todo: que no sea bloqueante
 8002cee:	f7ff ffdd 	bl	8002cac <HX711_is_ready>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f083 0301 	eor.w	r3, r3, #1
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f3      	bne.n	8002ce6 <HX711_read+0x1e>
	}

	HX711_interrupts_disable();	// Enter critical section
 8002cfe:	f000 f8ff 	bl	8002f00 <HX711_interrupts_disable>

	for( i = 0; i < HX711_ADC_PRECISION ; i++)
 8002d02:	2300      	movs	r3, #0
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	e020      	b.n	8002d4a <HX711_read+0x82>
	{
		HX711_CLK_set_high();
 8002d08:	f000 f8ce 	bl	8002ea8 <HX711_CLK_set_high>
		HW711_delay(CLOCK_DELAY_US);
 8002d0c:	2014      	movs	r0, #20
 8002d0e:	f000 f8e3 	bl	8002ed8 <HW711_delay>
        value = value << 1;
 8002d12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d16:	1894      	adds	r4, r2, r2
 8002d18:	eb43 0503 	adc.w	r5, r3, r3
 8002d1c:	e9c7 4502 	strd	r4, r5, [r7, #8]
		HX711_CLK_set_low();
 8002d20:	f000 f8b6 	bl	8002e90 <HX711_CLK_set_low>
        HW711_delay(CLOCK_DELAY_US);
 8002d24:	2014      	movs	r0, #20
 8002d26:	f000 f8d7 	bl	8002ed8 <HW711_delay>

        if(HX711_get_level())
 8002d2a:	f000 f8c9 	bl	8002ec0 <HX711_get_level>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d007      	beq.n	8002d44 <HX711_read+0x7c>
        	value++;
 8002d34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d38:	f112 0801 	adds.w	r8, r2, #1
 8002d3c:	f143 0900 	adc.w	r9, r3, #0
 8002d40:	e9c7 8902 	strd	r8, r9, [r7, #8]
	for( i = 0; i < HX711_ADC_PRECISION ; i++)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3301      	adds	r3, #1
 8002d48:	607b      	str	r3, [r7, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b17      	cmp	r3, #23
 8002d4e:	d9db      	bls.n	8002d08 <HX711_read+0x40>
	}

	// Set the channel and the gain factor for the next reading using the clock pin
	for ( i = 0; i < Gain; i++)
 8002d50:	2300      	movs	r3, #0
 8002d52:	607b      	str	r3, [r7, #4]
 8002d54:	e00c      	b.n	8002d70 <HX711_read+0xa8>
	{
		HX711_CLK_set_high();
 8002d56:	f000 f8a7 	bl	8002ea8 <HX711_CLK_set_high>
		HW711_delay(CLOCK_DELAY_US);
 8002d5a:	2014      	movs	r0, #20
 8002d5c:	f000 f8bc 	bl	8002ed8 <HW711_delay>
		HX711_CLK_set_low();
 8002d60:	f000 f896 	bl	8002e90 <HX711_CLK_set_low>
		HW711_delay(CLOCK_DELAY_US);
 8002d64:	2014      	movs	r0, #20
 8002d66:	f000 f8b7 	bl	8002ed8 <HW711_delay>
	for ( i = 0; i < Gain; i++)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	607b      	str	r3, [r7, #4]
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HX711_read+0xd8>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d3ec      	bcc.n	8002d56 <HX711_read+0x8e>
	}

	HX711_interrupts_enable();	// Exit critical section
 8002d7c:	f000 f8b9 	bl	8002ef2 <HX711_interrupts_enable>

	//DEBUGOUT(TAG, "Value: %llu", value);	//TODO

	value =value^0x800000;
 8002d80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d84:	f482 0a00 	eor.w	sl, r2, #8388608	; 0x800000
 8002d88:	469b      	mov	fp, r3
 8002d8a:	e9c7 ab02 	strd	sl, fp, [r7, #8]

	return (value);
 8002d8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8002d92:	4610      	mov	r0, r2
 8002d94:	4619      	mov	r1, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000094 	.word	0x20000094

08002da4 <HX711_read_average>:
 * @details Times = how many readings to do
 * @param   uint8_t times
 * @return 	Average reading
 */
static double  HX711_read_average(uint8_t times)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	71fb      	strb	r3, [r7, #7]
	double sum = 0;
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t i = 0;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	73fb      	strb	r3, [r7, #15]

	//DEBUGOUT(TAG, "Read Average Start"); //TODO

	for (i = 0; i < times; i++)
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	73fb      	strb	r3, [r7, #15]
 8002dc2:	e014      	b.n	8002dee <HX711_read_average+0x4a>
	{
		sum += HX711_read();
 8002dc4:	f7ff ff80 	bl	8002cc8 <HX711_read>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f7fd fb9a 	bl	8000508 <__aeabi_ul2d>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ddc:	f7fd fa14 	bl	8000208 <__adddf3>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (i = 0; i < times; i++)
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
 8002dea:	3301      	adds	r3, #1
 8002dec:	73fb      	strb	r3, [r7, #15]
 8002dee:	7bfa      	ldrb	r2, [r7, #15]
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d3e6      	bcc.n	8002dc4 <HX711_read_average+0x20>
	}

	//DEBUGOUT(TAG, "Read Average End : %lf",(sum / times));	//TODO

	return sum / times;
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7fd fb51 	bl	80004a0 <__aeabi_i2d>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e06:	f7fd fcdf 	bl	80007c8 <__aeabi_ddiv>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002e12:	eeb0 0a47 	vmov.f32	s0, s14
 8002e16:	eef0 0a67 	vmov.f32	s1, s15
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HX711_init_port>:
 * @brief   Chip HX711 Init
 * @details GPIO init.
 * @return 	none
 */
void HX711_init_port(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpioConfig;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	603b      	str	r3, [r7, #0]
 8002e2a:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <HX711_init_port+0x68>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4a16      	ldr	r2, [pc, #88]	; (8002e88 <HX711_init_port+0x68>)
 8002e30:	f043 0308 	orr.w	r3, r3, #8
 8002e34:	6313      	str	r3, [r2, #48]	; 0x30
 8002e36:	4b14      	ldr	r3, [pc, #80]	; (8002e88 <HX711_init_port+0x68>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(HX711_CLK_GPIO_Port, HX711_CLK, GPIO_PIN_RESET);
 8002e42:	2200      	movs	r2, #0
 8002e44:	2140      	movs	r1, #64	; 0x40
 8002e46:	4811      	ldr	r0, [pc, #68]	; (8002e8c <HX711_init_port+0x6c>)
 8002e48:	f7fe fd62 	bl	8001910 <HAL_GPIO_WritePin>


	gpioConfig.Pin = HX711_DATA;
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	607b      	str	r3, [r7, #4]
	gpioConfig.Mode = GPIO_MODE_INPUT;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60bb      	str	r3, [r7, #8]
	gpioConfig.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
	gpioConfig.Speed = GPIO_SPEED_FREQ_LOW;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(HX711_DATA_GPIO_Port, &gpioConfig);
 8002e5c:	1d3b      	adds	r3, r7, #4
 8002e5e:	4619      	mov	r1, r3
 8002e60:	480a      	ldr	r0, [pc, #40]	; (8002e8c <HX711_init_port+0x6c>)
 8002e62:	f7fe fb91 	bl	8001588 <HAL_GPIO_Init>

	gpioConfig.Pin = HX711_CLK;
 8002e66:	2340      	movs	r3, #64	; 0x40
 8002e68:	607b      	str	r3, [r7, #4]
	gpioConfig.Mode = GPIO_MODE_OUTPUT_PP;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	60bb      	str	r3, [r7, #8]
	gpioConfig.Pull = GPIO_NOPULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
	gpioConfig.Speed = GPIO_SPEED_FREQ_LOW;
 8002e72:	2300      	movs	r3, #0
 8002e74:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(HX711_CLK_GPIO_Port, &gpioConfig);
 8002e76:	1d3b      	adds	r3, r7, #4
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4804      	ldr	r0, [pc, #16]	; (8002e8c <HX711_init_port+0x6c>)
 8002e7c:	f7fe fb84 	bl	8001588 <HAL_GPIO_Init>

	//usTimerInit();
}
 8002e80:	bf00      	nop
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	40020c00 	.word	0x40020c00

08002e90 <HX711_CLK_set_low>:
/**
 * @brief   Set CLK GPIO in low level
 * @return 	none
 */
void HX711_CLK_set_low(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (HX711_CLK_GPIO_Port, HX711_CLK, GPIO_PIN_RESET);
 8002e94:	2200      	movs	r2, #0
 8002e96:	2140      	movs	r1, #64	; 0x40
 8002e98:	4802      	ldr	r0, [pc, #8]	; (8002ea4 <HX711_CLK_set_low+0x14>)
 8002e9a:	f7fe fd39 	bl	8001910 <HAL_GPIO_WritePin>
}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40020c00 	.word	0x40020c00

08002ea8 <HX711_CLK_set_high>:
/**
 * @brief   Set CLK GPIO in high level
 * @return 	none
 */
void HX711_CLK_set_high(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (HX711_CLK_GPIO_Port, HX711_CLK, GPIO_PIN_SET);
 8002eac:	2201      	movs	r2, #1
 8002eae:	2140      	movs	r1, #64	; 0x40
 8002eb0:	4802      	ldr	r0, [pc, #8]	; (8002ebc <HX711_CLK_set_high+0x14>)
 8002eb2:	f7fe fd2d 	bl	8001910 <HAL_GPIO_WritePin>
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40020c00 	.word	0x40020c00

08002ec0 <HX711_get_level>:
/**
 * @brief   Get DATA GPIO level
 * @return 	uint8_t Data pin level
 */
uint8_t HX711_get_level(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin (HX711_DATA_GPIO_Port, HX711_DATA);
 8002ec4:	2180      	movs	r1, #128	; 0x80
 8002ec6:	4803      	ldr	r0, [pc, #12]	; (8002ed4 <HX711_get_level+0x14>)
 8002ec8:	f7fe fd0a 	bl	80018e0 <HAL_GPIO_ReadPin>
 8002ecc:	4603      	mov	r3, r0

}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40020c00 	.word	0x40020c00

08002ed8 <HW711_delay>:
 * @brief   HX711 delay
 * @param   uint32_t delay [us]
 * @return 	none
 */
void HW711_delay(uint16_t delay)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	80fb      	strh	r3, [r7, #6]
	usTimerDelay(delay);
 8002ee2:	88fb      	ldrh	r3, [r7, #6]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 f819 	bl	8002f1c <usTimerDelay>
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HX711_interrupts_enable>:
/**
 * @brief   Disable interruptions
 * @return 	none
 */
void HX711_interrupts_enable(void)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	af00      	add	r7, sp, #0
	//portENABLE_INTERRUPTS();
}
 8002ef6:	bf00      	nop
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HX711_interrupts_disable>:
/**
 * @brief   Enable interruptions
 * @return 	none
 */
void HX711_interrupts_disable(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
	//portDISABLE_INTERRUPTS();
}
 8002f04:	bf00      	nop
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <usTimerInit>:
#include "hw_timer_us_port.h"

static void Error_Handler(void);

void usTimerInit(void)
{/*
 8002f0e:	b480      	push	{r7}
 8002f10:	af00      	add	r7, sp, #0
	if(usTimerInit_port() != true)
		Error_Handler();*/
}
 8002f12:	bf00      	nop
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <usTimerDelay>:
{
	usTimerStop_port();
}

void usTimerDelay(uint16_t delay_us)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	80fb      	strh	r3, [r7, #6]
	usTimerDelay_port(delay_us);
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 f805 	bl	8002f38 <usTimerDelay_port>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <usTimerDelay_port>:
{
	HAL_TIM_Base_Stop(&htim1);
}

void usTimerDelay_port(uint16_t delay_us)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	80fb      	strh	r3, [r7, #6]
	uint32_t timeout = 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]

	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002f46:	4b0e      	ldr	r3, [pc, #56]	; (8002f80 <usTimerDelay_port+0x48>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	625a      	str	r2, [r3, #36]	; 0x24

	while((__HAL_TIM_GET_COUNTER(&htim1) < delay_us) && timeout < MAX_TIMEOUT)
 8002f4e:	e002      	b.n	8002f56 <usTimerDelay_port+0x1e>
	{
		timeout++;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	3301      	adds	r3, #1
 8002f54:	60fb      	str	r3, [r7, #12]
	while((__HAL_TIM_GET_COUNTER(&htim1) < delay_us) && timeout < MAX_TIMEOUT)
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <usTimerDelay_port+0x48>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f5c:	88fb      	ldrh	r3, [r7, #6]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d203      	bcs.n	8002f6a <usTimerDelay_port+0x32>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f68:	d1f2      	bne.n	8002f50 <usTimerDelay_port+0x18>
	}

	if(timeout >= MAX_TIMEOUT)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f70:	d101      	bne.n	8002f76 <usTimerDelay_port+0x3e>
		Error_Handler();
 8002f72:	f000 f807 	bl	8002f84 <Error_Handler>
}
 8002f76:	bf00      	nop
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	200000a4 	.word	0x200000a4

08002f84 <Error_Handler>:


static void Error_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
	while (1);
 8002f88:	e7fe      	b.n	8002f88 <Error_Handler+0x4>
	...

08002f8c <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
	FSM_State_t state = IDLE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	75fb      	strb	r3, [r7, #23]
	double reservoirWeight = 0;
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	bool_t erogationButton = false;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	71fb      	strb	r3, [r7, #7]
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
	 */
	HAL_Init();
 8002fa6:	f7fe f971 	bl	800128c <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8002faa:	f000 f985 	bl	80032b8 <SystemClock_Config>

    usTimerInit();
 8002fae:	f7ff ffae 	bl	8002f0e <usTimerInit>
	/* Initialize BSP Led */
	BSP_LED_Init(LED1);
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	f7fe f830 	bl	8001018 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 8002fb8:	2001      	movs	r0, #1
 8002fba:	f7fe f82d 	bl	8001018 <BSP_LED_Init>
	BSP_LED_Init(LED3);
 8002fbe:	2002      	movs	r0, #2
 8002fc0:	f7fe f82a 	bl	8001018 <BSP_LED_Init>


	/* Initialize BSP PB for BUTTON_USER */
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f7fe f890 	bl	80010ec <BSP_PB_Init>

	/* Initialize anti-debounce */
	debounceFSM_init();
 8002fcc:	f7fd feee 	bl	8000dac <debounceFSM_init>

	if(!uartInit())
 8002fd0:	f7fd ffd4 	bl	8000f7c <uartInit>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	f083 0301 	eor.w	r3, r3, #1
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <main+0x58>
		Error_Handler();
 8002fe0:	f000 f9cc 	bl	800337c <Error_Handler>
	HX711_get_offset();
#endif

#ifndef _CALIBRATION__
	/* Initialize */
	HW_HX711_Init();
 8002fe4:	f7ff fdb2 	bl	8002b4c <HW_HX711_Init>
#endif

	Pump_Init();	// todo: Create a folder for HW_PUMP
 8002fe8:	f000 f8e2 	bl	80031b0 <Pump_Init>
	Valves_Init();	// todo: Create a folder for HW_VALVE
 8002fec:	f000 f8ec 	bl	80031c8 <Valves_Init>

	/* Infinite loop */
	while (1)
	{

		debounceFSM_update();
 8002ff0:	f7fd fef0 	bl	8000dd4 <debounceFSM_update>

		reservoirWeight = HX711_get_units(WEIGHT_READINGS);
 8002ff4:	200a      	movs	r0, #10
 8002ff6:	f7ff fe13 	bl	8002c20 <HX711_get_units>
 8002ffa:	ed87 0b02 	vstr	d0, [r7, #8]
		erogationButton = readKeyPressed();		// Button User was pressed
 8002ffe:	f7fd ff53 	bl	8000ea8 <readKeyPressed>
 8003002:	4603      	mov	r3, r0
 8003004:	71fb      	strb	r3, [r7, #7]

		switch(state)
 8003006:	7dfb      	ldrb	r3, [r7, #23]
 8003008:	2b02      	cmp	r3, #2
 800300a:	d070      	beq.n	80030ee <main+0x162>
 800300c:	2b02      	cmp	r3, #2
 800300e:	f300 80b9 	bgt.w	8003184 <main+0x1f8>
 8003012:	2b00      	cmp	r3, #0
 8003014:	d002      	beq.n	800301c <main+0x90>
 8003016:	2b01      	cmp	r3, #1
 8003018:	d014      	beq.n	8003044 <main+0xb8>
 800301a:	e0b3      	b.n	8003184 <main+0x1f8>
		{
		case IDLE:
			if(RESERVORY_LIMIT_MIN > reservoirWeight)
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	4b5d      	ldr	r3, [pc, #372]	; (8003198 <main+0x20c>)
 8003022:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003026:	f7fd fd17 	bl	8000a58 <__aeabi_dcmplt>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <main+0xaa>
			{
				state = FILL;
 8003030:	2301      	movs	r3, #1
 8003032:	75fb      	strb	r3, [r7, #23]
				{
					state = EROGATION;
				}
			}

			break;
 8003034:	e0a9      	b.n	800318a <main+0x1fe>
				if(erogationButton)
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80a6 	beq.w	800318a <main+0x1fe>
					state = EROGATION;
 800303e:	2302      	movs	r3, #2
 8003040:	75fb      	strb	r3, [r7, #23]
			break;
 8003042:	e0a2      	b.n	800318a <main+0x1fe>
		case FILL:

			if(erogationButton && (RESERVORY_LIMIT_MIN < reservoirWeight))
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d01c      	beq.n	8003084 <main+0xf8>
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	4b52      	ldr	r3, [pc, #328]	; (8003198 <main+0x20c>)
 8003050:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003054:	f7fd fd1e 	bl	8000a94 <__aeabi_dcmpgt>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d012      	beq.n	8003084 <main+0xf8>
			{
				state = EROGATION;
 800305e:	2302      	movs	r3, #2
 8003060:	75fb      	strb	r3, [r7, #23]

				if(valveFillState)
 8003062:	4b4e      	ldr	r3, [pc, #312]	; (800319c <main+0x210>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <main+0xe6>
					valveSet(FillValve, false);
 800306a:	2100      	movs	r1, #0
 800306c:	2003      	movs	r0, #3
 800306e:	f000 f8ed 	bl	800324c <valveSet>
				if(pumpFillState)
 8003072:	4b4b      	ldr	r3, [pc, #300]	; (80031a0 <main+0x214>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d038      	beq.n	80030ec <main+0x160>
					pumpSet(FillPump,false);
 800307a:	2100      	movs	r1, #0
 800307c:	2002      	movs	r0, #2
 800307e:	f000 f8af 	bl	80031e0 <pumpSet>
				if(pumpFillState)
 8003082:	e033      	b.n	80030ec <main+0x160>
			}else
			{
				if(RESERVORY_LIMIT_MAX > reservoirWeight)
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	4b46      	ldr	r3, [pc, #280]	; (80031a4 <main+0x218>)
 800308a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800308e:	f7fd fce3 	bl	8000a58 <__aeabi_dcmplt>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d016      	beq.n	80030c6 <main+0x13a>
				{
					if(!valveFillState)
 8003098:	4b40      	ldr	r3, [pc, #256]	; (800319c <main+0x210>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	f083 0301 	eor.w	r3, r3, #1
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <main+0x122>
						valveSet(FillValve, true);
 80030a6:	2101      	movs	r1, #1
 80030a8:	2003      	movs	r0, #3
 80030aa:	f000 f8cf 	bl	800324c <valveSet>
					if(!pumpFillState)
 80030ae:	4b3c      	ldr	r3, [pc, #240]	; (80031a0 <main+0x214>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	f083 0301 	eor.w	r3, r3, #1
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d068      	beq.n	800318e <main+0x202>
						pumpSet(FillPump,true);
 80030bc:	2101      	movs	r1, #1
 80030be:	2002      	movs	r0, #2
 80030c0:	f000 f88e 	bl	80031e0 <pumpSet>
						pumpSet(FillPump,false);

					state = IDLE;
				}
			}
			break;
 80030c4:	e063      	b.n	800318e <main+0x202>
					if(valveFillState)
 80030c6:	4b35      	ldr	r3, [pc, #212]	; (800319c <main+0x210>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <main+0x14a>
						valveSet(FillValve, false);
 80030ce:	2100      	movs	r1, #0
 80030d0:	2003      	movs	r0, #3
 80030d2:	f000 f8bb 	bl	800324c <valveSet>
					if(pumpFillState)
 80030d6:	4b32      	ldr	r3, [pc, #200]	; (80031a0 <main+0x214>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <main+0x15a>
						pumpSet(FillPump,false);
 80030de:	2100      	movs	r1, #0
 80030e0:	2002      	movs	r0, #2
 80030e2:	f000 f87d 	bl	80031e0 <pumpSet>
					state = IDLE;
 80030e6:	2300      	movs	r3, #0
 80030e8:	75fb      	strb	r3, [r7, #23]
			break;
 80030ea:	e050      	b.n	800318e <main+0x202>
 80030ec:	e04f      	b.n	800318e <main+0x202>
		case EROGATION:
			if(erogationButton && (RESERVORY_LIMIT_MIN < reservoirWeight))
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d020      	beq.n	8003136 <main+0x1aa>
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	4b27      	ldr	r3, [pc, #156]	; (8003198 <main+0x20c>)
 80030fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030fe:	f7fd fcc9 	bl	8000a94 <__aeabi_dcmpgt>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d016      	beq.n	8003136 <main+0x1aa>
			{
				if(!valveErogationState)
 8003108:	4b27      	ldr	r3, [pc, #156]	; (80031a8 <main+0x21c>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	f083 0301 	eor.w	r3, r3, #1
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <main+0x192>
					valveSet(ErogationValve, true);
 8003116:	2101      	movs	r1, #1
 8003118:	2001      	movs	r0, #1
 800311a:	f000 f897 	bl	800324c <valveSet>
				if(!pumpErogationState)
 800311e:	4b23      	ldr	r3, [pc, #140]	; (80031ac <main+0x220>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	f083 0301 	eor.w	r3, r3, #1
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d02a      	beq.n	8003182 <main+0x1f6>
					pumpSet(ErogationPump,true);
 800312c:	2101      	movs	r1, #1
 800312e:	2000      	movs	r0, #0
 8003130:	f000 f856 	bl	80031e0 <pumpSet>
				if(!pumpErogationState)
 8003134:	e025      	b.n	8003182 <main+0x1f6>
			}
			else
			{
				if(valveErogationState)
 8003136:	4b1c      	ldr	r3, [pc, #112]	; (80031a8 <main+0x21c>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <main+0x1ba>
					valveSet(ErogationValve, false);
 800313e:	2100      	movs	r1, #0
 8003140:	2001      	movs	r0, #1
 8003142:	f000 f883 	bl	800324c <valveSet>
				if(pumpErogationState)
 8003146:	4b19      	ldr	r3, [pc, #100]	; (80031ac <main+0x220>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <main+0x1ca>
					pumpSet(ErogationPump,false);
 800314e:	2100      	movs	r1, #0
 8003150:	2000      	movs	r0, #0
 8003152:	f000 f845 	bl	80031e0 <pumpSet>

				if(RESERVORY_LIMIT_MIN > reservoirWeight)
 8003156:	f04f 0200 	mov.w	r2, #0
 800315a:	4b0f      	ldr	r3, [pc, #60]	; (8003198 <main+0x20c>)
 800315c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003160:	f7fd fc7a 	bl	8000a58 <__aeabi_dcmplt>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <main+0x1e4>
				{
					state = FILL;
 800316a:	2301      	movs	r3, #1
 800316c:	75fb      	strb	r3, [r7, #23]
				{
					if(!erogationButton)
						state = IDLE;
				}
			}
			break;
 800316e:	e010      	b.n	8003192 <main+0x206>
					if(!erogationButton)
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	f083 0301 	eor.w	r3, r3, #1
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <main+0x206>
						state = IDLE;
 800317c:	2300      	movs	r3, #0
 800317e:	75fb      	strb	r3, [r7, #23]
			break;
 8003180:	e007      	b.n	8003192 <main+0x206>
 8003182:	e006      	b.n	8003192 <main+0x206>
		default:
			Error_Handler();
 8003184:	f000 f8fa 	bl	800337c <Error_Handler>
			break;
 8003188:	e004      	b.n	8003194 <main+0x208>
			break;
 800318a:	bf00      	nop
 800318c:	e730      	b.n	8002ff0 <main+0x64>
			break;
 800318e:	bf00      	nop
 8003190:	e72e      	b.n	8002ff0 <main+0x64>
			break;
 8003192:	bf00      	nop
		debounceFSM_update();
 8003194:	e72c      	b.n	8002ff0 <main+0x64>
 8003196:	bf00      	nop
 8003198:	40140000 	.word	0x40140000
 800319c:	200000ef 	.word	0x200000ef
 80031a0:	200000ed 	.word	0x200000ed
 80031a4:	402e0000 	.word	0x402e0000
 80031a8:	200000ee 	.word	0x200000ee
 80031ac:	200000ec 	.word	0x200000ec

080031b0 <Pump_Init>:
	}
}


static void Pump_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
	pumpSet(FillPump, false);
 80031b4:	2100      	movs	r1, #0
 80031b6:	2002      	movs	r0, #2
 80031b8:	f000 f812 	bl	80031e0 <pumpSet>
	pumpSet(ErogationPump, false);
 80031bc:	2100      	movs	r1, #0
 80031be:	2000      	movs	r0, #0
 80031c0:	f000 f80e 	bl	80031e0 <pumpSet>
}
 80031c4:	bf00      	nop
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <Valves_Init>:

static void Valves_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
	valveSet(FillValve, false);
 80031cc:	2100      	movs	r1, #0
 80031ce:	2003      	movs	r0, #3
 80031d0:	f000 f83c 	bl	800324c <valveSet>
	valveSet(ErogationValve, false);
 80031d4:	2100      	movs	r1, #0
 80031d6:	2001      	movs	r0, #1
 80031d8:	f000 f838 	bl	800324c <valveSet>
}
 80031dc:	bf00      	nop
 80031de:	bd80      	pop	{r7, pc}

080031e0 <pumpSet>:

static void pumpSet(Output_t pump, bool_t state)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	460a      	mov	r2, r1
 80031ea:	71fb      	strb	r3, [r7, #7]
 80031ec:	4613      	mov	r3, r2
 80031ee:	71bb      	strb	r3, [r7, #6]
	if(ErogationPump == pump)
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <pumpSet+0x24>
	{
		uartSendString(BOMBA_EROGACION);
 80031f6:	480f      	ldr	r0, [pc, #60]	; (8003234 <pumpSet+0x54>)
 80031f8:	f7fd fef6 	bl	8000fe8 <uartSendString>
		pumpErogationState = state;
 80031fc:	4a0e      	ldr	r2, [pc, #56]	; (8003238 <pumpSet+0x58>)
 80031fe:	79bb      	ldrb	r3, [r7, #6]
 8003200:	7013      	strb	r3, [r2, #0]
 8003202:	e008      	b.n	8003216 <pumpSet+0x36>
	}else
	{
		if(FillPump == pump)
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d105      	bne.n	8003216 <pumpSet+0x36>
		{
			uartSendString(BOMBA_LLENADO);
 800320a:	480c      	ldr	r0, [pc, #48]	; (800323c <pumpSet+0x5c>)
 800320c:	f7fd feec 	bl	8000fe8 <uartSendString>
			pumpFillState = state;
 8003210:	4a0b      	ldr	r2, [pc, #44]	; (8003240 <pumpSet+0x60>)
 8003212:	79bb      	ldrb	r3, [r7, #6]
 8003214:	7013      	strb	r3, [r2, #0]
		}

	}
	if(true == state)
 8003216:	79bb      	ldrb	r3, [r7, #6]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <pumpSet+0x44>
	{
		uartSendString(ENDEDIDO);
 800321c:	4809      	ldr	r0, [pc, #36]	; (8003244 <pumpSet+0x64>)
 800321e:	f7fd fee3 	bl	8000fe8 <uartSendString>
	else
	{
		uartSendString(APAGADO);
	}

}
 8003222:	e002      	b.n	800322a <pumpSet+0x4a>
		uartSendString(APAGADO);
 8003224:	4808      	ldr	r0, [pc, #32]	; (8003248 <pumpSet+0x68>)
 8003226:	f7fd fedf 	bl	8000fe8 <uartSendString>
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	08003464 	.word	0x08003464
 8003238:	200000ec 	.word	0x200000ec
 800323c:	08003478 	.word	0x08003478
 8003240:	200000ed 	.word	0x200000ed
 8003244:	08003488 	.word	0x08003488
 8003248:	0800349c 	.word	0x0800349c

0800324c <valveSet>:

static void valveSet(Output_t valve, bool_t state)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	460a      	mov	r2, r1
 8003256:	71fb      	strb	r3, [r7, #7]
 8003258:	4613      	mov	r3, r2
 800325a:	71bb      	strb	r3, [r7, #6]
	if(ErogationValve == valve)
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d106      	bne.n	8003270 <valveSet+0x24>
	{
		uartSendString(VALVULA_EROGACION);
 8003262:	480f      	ldr	r0, [pc, #60]	; (80032a0 <valveSet+0x54>)
 8003264:	f7fd fec0 	bl	8000fe8 <uartSendString>
		valveErogationState = state;
 8003268:	4a0e      	ldr	r2, [pc, #56]	; (80032a4 <valveSet+0x58>)
 800326a:	79bb      	ldrb	r3, [r7, #6]
 800326c:	7013      	strb	r3, [r2, #0]
 800326e:	e008      	b.n	8003282 <valveSet+0x36>
	}else
	{
		if(FillValve == valve)
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	2b03      	cmp	r3, #3
 8003274:	d105      	bne.n	8003282 <valveSet+0x36>
		{
			uartSendString(VALVULA_LLENADO);
 8003276:	480c      	ldr	r0, [pc, #48]	; (80032a8 <valveSet+0x5c>)
 8003278:	f7fd feb6 	bl	8000fe8 <uartSendString>
			valveFillState = state;
 800327c:	4a0b      	ldr	r2, [pc, #44]	; (80032ac <valveSet+0x60>)
 800327e:	79bb      	ldrb	r3, [r7, #6]
 8003280:	7013      	strb	r3, [r2, #0]
		}

	}
	if(true == state)
 8003282:	79bb      	ldrb	r3, [r7, #6]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <valveSet+0x44>
	{
		uartSendString(ENDEDIDO);
 8003288:	4809      	ldr	r0, [pc, #36]	; (80032b0 <valveSet+0x64>)
 800328a:	f7fd fead 	bl	8000fe8 <uartSendString>
	}
	else
	{
		uartSendString(APAGADO);
	}
}
 800328e:	e002      	b.n	8003296 <valveSet+0x4a>
		uartSendString(APAGADO);
 8003290:	4808      	ldr	r0, [pc, #32]	; (80032b4 <valveSet+0x68>)
 8003292:	f7fd fea9 	bl	8000fe8 <uartSendString>
}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	080034ac 	.word	0x080034ac
 80032a4:	200000ee 	.word	0x200000ee
 80032a8:	080034c0 	.word	0x080034c0
 80032ac:	200000ef 	.word	0x200000ef
 80032b0:	08003488 	.word	0x08003488
 80032b4:	0800349c 	.word	0x0800349c

080032b8 <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b094      	sub	sp, #80	; 0x50
 80032bc:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	4b2c      	ldr	r3, [pc, #176]	; (8003374 <SystemClock_Config+0xbc>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	4a2b      	ldr	r2, [pc, #172]	; (8003374 <SystemClock_Config+0xbc>)
 80032c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032cc:	6413      	str	r3, [r2, #64]	; 0x40
 80032ce:	4b29      	ldr	r3, [pc, #164]	; (8003374 <SystemClock_Config+0xbc>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d6:	60bb      	str	r3, [r7, #8]
 80032d8:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032da:	2300      	movs	r3, #0
 80032dc:	607b      	str	r3, [r7, #4]
 80032de:	4b26      	ldr	r3, [pc, #152]	; (8003378 <SystemClock_Config+0xc0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a25      	ldr	r2, [pc, #148]	; (8003378 <SystemClock_Config+0xc0>)
 80032e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	4b23      	ldr	r3, [pc, #140]	; (8003378 <SystemClock_Config+0xc0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032f2:	607b      	str	r3, [r7, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80032f6:	2301      	movs	r3, #1
 80032f8:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80032fa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80032fe:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003300:	2302      	movs	r3, #2
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003304:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003308:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 800330a:	2308      	movs	r3, #8
 800330c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 800330e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003312:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003314:	2302      	movs	r3, #2
 8003316:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8003318:	2307      	movs	r3, #7
 800331a:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800331c:	f107 030c 	add.w	r3, r7, #12
 8003320:	4618      	mov	r0, r3
 8003322:	f7fe fbb9 	bl	8001a98 <HAL_RCC_OscConfig>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 800332c:	f000 f826 	bl	800337c <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003330:	f7fe fb62 	bl	80019f8 <HAL_PWREx_EnableOverDrive>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 800333a:	f000 f81f 	bl	800337c <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800333e:	230f      	movs	r3, #15
 8003340:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003342:	2302      	movs	r3, #2
 8003344:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003346:	2300      	movs	r3, #0
 8003348:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800334a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800334e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003354:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003356:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800335a:	2105      	movs	r1, #5
 800335c:	4618      	mov	r0, r3
 800335e:	f7fe fe13 	bl	8001f88 <HAL_RCC_ClockConfig>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 8003368:	f000 f808 	bl	800337c <Error_Handler>
	}
}
 800336c:	bf00      	nop
 800336e:	3750      	adds	r7, #80	; 0x50
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40023800 	.word	0x40023800
 8003378:	40007000 	.word	0x40007000

0800337c <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8003380:	2001      	movs	r0, #1
 8003382:	f7fd fe99 	bl	80010b8 <BSP_LED_On>
	while (1)
 8003386:	e7fe      	b.n	8003386 <Error_Handler+0xa>

08003388 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033c0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800338c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800338e:	e003      	b.n	8003398 <LoopCopyDataInit>

08003390 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003390:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003392:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003394:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003396:	3104      	adds	r1, #4

08003398 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003398:	480b      	ldr	r0, [pc, #44]	; (80033c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800339a:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800339c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800339e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80033a0:	d3f6      	bcc.n	8003390 <CopyDataInit>
  ldr  r2, =_sbss
 80033a2:	4a0b      	ldr	r2, [pc, #44]	; (80033d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80033a4:	e002      	b.n	80033ac <LoopFillZerobss>

080033a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80033a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80033a8:	f842 3b04 	str.w	r3, [r2], #4

080033ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80033ac:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80033ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80033b0:	d3f9      	bcc.n	80033a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033b2:	f7fd ff07 	bl	80011c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033b6:	f000 f811 	bl	80033dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033ba:	f7ff fde7 	bl	8002f8c <main>
  bx  lr    
 80033be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80033c0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80033c4:	08003504 	.word	0x08003504
  ldr  r0, =_sdata
 80033c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80033cc:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 80033d0:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 80033d4:	200000f0 	.word	0x200000f0

080033d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033d8:	e7fe      	b.n	80033d8 <ADC_IRQHandler>
	...

080033dc <__libc_init_array>:
 80033dc:	b570      	push	{r4, r5, r6, lr}
 80033de:	4d0d      	ldr	r5, [pc, #52]	; (8003414 <__libc_init_array+0x38>)
 80033e0:	4c0d      	ldr	r4, [pc, #52]	; (8003418 <__libc_init_array+0x3c>)
 80033e2:	1b64      	subs	r4, r4, r5
 80033e4:	10a4      	asrs	r4, r4, #2
 80033e6:	2600      	movs	r6, #0
 80033e8:	42a6      	cmp	r6, r4
 80033ea:	d109      	bne.n	8003400 <__libc_init_array+0x24>
 80033ec:	4d0b      	ldr	r5, [pc, #44]	; (800341c <__libc_init_array+0x40>)
 80033ee:	4c0c      	ldr	r4, [pc, #48]	; (8003420 <__libc_init_array+0x44>)
 80033f0:	f000 f818 	bl	8003424 <_init>
 80033f4:	1b64      	subs	r4, r4, r5
 80033f6:	10a4      	asrs	r4, r4, #2
 80033f8:	2600      	movs	r6, #0
 80033fa:	42a6      	cmp	r6, r4
 80033fc:	d105      	bne.n	800340a <__libc_init_array+0x2e>
 80033fe:	bd70      	pop	{r4, r5, r6, pc}
 8003400:	f855 3b04 	ldr.w	r3, [r5], #4
 8003404:	4798      	blx	r3
 8003406:	3601      	adds	r6, #1
 8003408:	e7ee      	b.n	80033e8 <__libc_init_array+0xc>
 800340a:	f855 3b04 	ldr.w	r3, [r5], #4
 800340e:	4798      	blx	r3
 8003410:	3601      	adds	r6, #1
 8003412:	e7f2      	b.n	80033fa <__libc_init_array+0x1e>
 8003414:	080034fc 	.word	0x080034fc
 8003418:	080034fc 	.word	0x080034fc
 800341c:	080034fc 	.word	0x080034fc
 8003420:	08003500 	.word	0x08003500

08003424 <_init>:
 8003424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003426:	bf00      	nop
 8003428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342a:	bc08      	pop	{r3}
 800342c:	469e      	mov	lr, r3
 800342e:	4770      	bx	lr

08003430 <_fini>:
 8003430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003432:	bf00      	nop
 8003434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003436:	bc08      	pop	{r3}
 8003438:	469e      	mov	lr, r3
 800343a:	4770      	bx	lr
