
TP PdM - PCSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b98  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08003d48  08003d48  00013d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e10  08003e10  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e10  08003e10  00013e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e18  08003e18  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e18  08003e18  00013e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e1c  08003e1c  00013e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          000000d4  20000020  20000020  00020020  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200000f4  200000f4  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ec29  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027ab  00000000  00000000  0002ec75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  00031420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d70  00000000  00000000  000322e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028cab  00000000  00000000  00033058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001745e  00000000  00000000  0005bd03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea8b6  00000000  00000000  00073161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015da17  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c3c  00000000  00000000  0015da68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000020 	.word	0x20000020
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003d30 	.word	0x08003d30

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000024 	.word	0x20000024
 80001ec:	08003d30 	.word	0x08003d30

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_dmul>:
 8000200:	b570      	push	{r4, r5, r6, lr}
 8000202:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000206:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800020a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800020e:	bf1d      	ittte	ne
 8000210:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000214:	ea94 0f0c 	teqne	r4, ip
 8000218:	ea95 0f0c 	teqne	r5, ip
 800021c:	f000 f8de 	bleq	80003dc <__aeabi_dmul+0x1dc>
 8000220:	442c      	add	r4, r5
 8000222:	ea81 0603 	eor.w	r6, r1, r3
 8000226:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800022a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800022e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000232:	bf18      	it	ne
 8000234:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000238:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800023c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000240:	d038      	beq.n	80002b4 <__aeabi_dmul+0xb4>
 8000242:	fba0 ce02 	umull	ip, lr, r0, r2
 8000246:	f04f 0500 	mov.w	r5, #0
 800024a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800024e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000252:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000256:	f04f 0600 	mov.w	r6, #0
 800025a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800025e:	f09c 0f00 	teq	ip, #0
 8000262:	bf18      	it	ne
 8000264:	f04e 0e01 	orrne.w	lr, lr, #1
 8000268:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800026c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000270:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000274:	d204      	bcs.n	8000280 <__aeabi_dmul+0x80>
 8000276:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800027a:	416d      	adcs	r5, r5
 800027c:	eb46 0606 	adc.w	r6, r6, r6
 8000280:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000284:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000288:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800028c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000290:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000294:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000298:	bf88      	it	hi
 800029a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800029e:	d81e      	bhi.n	80002de <__aeabi_dmul+0xde>
 80002a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002b8:	ea46 0101 	orr.w	r1, r6, r1
 80002bc:	ea40 0002 	orr.w	r0, r0, r2
 80002c0:	ea81 0103 	eor.w	r1, r1, r3
 80002c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002c8:	bfc2      	ittt	gt
 80002ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002d2:	bd70      	popgt	{r4, r5, r6, pc}
 80002d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002d8:	f04f 0e00 	mov.w	lr, #0
 80002dc:	3c01      	subs	r4, #1
 80002de:	f300 80ab 	bgt.w	8000438 <__aeabi_dmul+0x238>
 80002e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002e6:	bfde      	ittt	le
 80002e8:	2000      	movle	r0, #0
 80002ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ee:	bd70      	pople	{r4, r5, r6, pc}
 80002f0:	f1c4 0400 	rsb	r4, r4, #0
 80002f4:	3c20      	subs	r4, #32
 80002f6:	da35      	bge.n	8000364 <__aeabi_dmul+0x164>
 80002f8:	340c      	adds	r4, #12
 80002fa:	dc1b      	bgt.n	8000334 <__aeabi_dmul+0x134>
 80002fc:	f104 0414 	add.w	r4, r4, #20
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f305 	lsl.w	r3, r0, r5
 8000308:	fa20 f004 	lsr.w	r0, r0, r4
 800030c:	fa01 f205 	lsl.w	r2, r1, r5
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000318:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800031c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000320:	fa21 f604 	lsr.w	r6, r1, r4
 8000324:	eb42 0106 	adc.w	r1, r2, r6
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 040c 	rsb	r4, r4, #12
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f304 	lsl.w	r3, r0, r4
 8000340:	fa20 f005 	lsr.w	r0, r0, r5
 8000344:	fa01 f204 	lsl.w	r2, r1, r4
 8000348:	ea40 0002 	orr.w	r0, r0, r2
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 0520 	rsb	r5, r4, #32
 8000368:	fa00 f205 	lsl.w	r2, r0, r5
 800036c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000370:	fa20 f304 	lsr.w	r3, r0, r4
 8000374:	fa01 f205 	lsl.w	r2, r1, r5
 8000378:	ea43 0302 	orr.w	r3, r3, r2
 800037c:	fa21 f004 	lsr.w	r0, r1, r4
 8000380:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000384:	fa21 f204 	lsr.w	r2, r1, r4
 8000388:	ea20 0002 	bic.w	r0, r0, r2
 800038c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f094 0f00 	teq	r4, #0
 80003a0:	d10f      	bne.n	80003c2 <__aeabi_dmul+0x1c2>
 80003a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003a6:	0040      	lsls	r0, r0, #1
 80003a8:	eb41 0101 	adc.w	r1, r1, r1
 80003ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3c01      	subeq	r4, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1a6>
 80003b6:	ea41 0106 	orr.w	r1, r1, r6
 80003ba:	f095 0f00 	teq	r5, #0
 80003be:	bf18      	it	ne
 80003c0:	4770      	bxne	lr
 80003c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003c6:	0052      	lsls	r2, r2, #1
 80003c8:	eb43 0303 	adc.w	r3, r3, r3
 80003cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d0:	bf08      	it	eq
 80003d2:	3d01      	subeq	r5, #1
 80003d4:	d0f7      	beq.n	80003c6 <__aeabi_dmul+0x1c6>
 80003d6:	ea43 0306 	orr.w	r3, r3, r6
 80003da:	4770      	bx	lr
 80003dc:	ea94 0f0c 	teq	r4, ip
 80003e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003e4:	bf18      	it	ne
 80003e6:	ea95 0f0c 	teqne	r5, ip
 80003ea:	d00c      	beq.n	8000406 <__aeabi_dmul+0x206>
 80003ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f0:	bf18      	it	ne
 80003f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f6:	d1d1      	bne.n	800039c <__aeabi_dmul+0x19c>
 80003f8:	ea81 0103 	eor.w	r1, r1, r3
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	f04f 0000 	mov.w	r0, #0
 8000404:	bd70      	pop	{r4, r5, r6, pc}
 8000406:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800040a:	bf06      	itte	eq
 800040c:	4610      	moveq	r0, r2
 800040e:	4619      	moveq	r1, r3
 8000410:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000414:	d019      	beq.n	800044a <__aeabi_dmul+0x24a>
 8000416:	ea94 0f0c 	teq	r4, ip
 800041a:	d102      	bne.n	8000422 <__aeabi_dmul+0x222>
 800041c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000420:	d113      	bne.n	800044a <__aeabi_dmul+0x24a>
 8000422:	ea95 0f0c 	teq	r5, ip
 8000426:	d105      	bne.n	8000434 <__aeabi_dmul+0x234>
 8000428:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800042c:	bf1c      	itt	ne
 800042e:	4610      	movne	r0, r2
 8000430:	4619      	movne	r1, r3
 8000432:	d10a      	bne.n	800044a <__aeabi_dmul+0x24a>
 8000434:	ea81 0103 	eor.w	r1, r1, r3
 8000438:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800043c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd70      	pop	{r4, r5, r6, pc}
 800044a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800044e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000452:	bd70      	pop	{r4, r5, r6, pc}

08000454 <__aeabi_drsub>:
 8000454:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e002      	b.n	8000460 <__adddf3>
 800045a:	bf00      	nop

0800045c <__aeabi_dsub>:
 800045c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000460 <__adddf3>:
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000466:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	bf1f      	itttt	ne
 8000476:	ea54 0c00 	orrsne.w	ip, r4, r0
 800047a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800047e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000482:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000486:	f000 80e2 	beq.w	800064e <__adddf3+0x1ee>
 800048a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800048e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000492:	bfb8      	it	lt
 8000494:	426d      	neglt	r5, r5
 8000496:	dd0c      	ble.n	80004b2 <__adddf3+0x52>
 8000498:	442c      	add	r4, r5
 800049a:	ea80 0202 	eor.w	r2, r0, r2
 800049e:	ea81 0303 	eor.w	r3, r1, r3
 80004a2:	ea82 0000 	eor.w	r0, r2, r0
 80004a6:	ea83 0101 	eor.w	r1, r3, r1
 80004aa:	ea80 0202 	eor.w	r2, r0, r2
 80004ae:	ea81 0303 	eor.w	r3, r1, r3
 80004b2:	2d36      	cmp	r5, #54	; 0x36
 80004b4:	bf88      	it	hi
 80004b6:	bd30      	pophi	{r4, r5, pc}
 80004b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x70>
 80004ca:	4240      	negs	r0, r0
 80004cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004dc:	d002      	beq.n	80004e4 <__adddf3+0x84>
 80004de:	4252      	negs	r2, r2
 80004e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e4:	ea94 0f05 	teq	r4, r5
 80004e8:	f000 80a7 	beq.w	800063a <__adddf3+0x1da>
 80004ec:	f1a4 0401 	sub.w	r4, r4, #1
 80004f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f4:	db0d      	blt.n	8000512 <__adddf3+0xb2>
 80004f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004fa:	fa22 f205 	lsr.w	r2, r2, r5
 80004fe:	1880      	adds	r0, r0, r2
 8000500:	f141 0100 	adc.w	r1, r1, #0
 8000504:	fa03 f20e 	lsl.w	r2, r3, lr
 8000508:	1880      	adds	r0, r0, r2
 800050a:	fa43 f305 	asr.w	r3, r3, r5
 800050e:	4159      	adcs	r1, r3
 8000510:	e00e      	b.n	8000530 <__adddf3+0xd0>
 8000512:	f1a5 0520 	sub.w	r5, r5, #32
 8000516:	f10e 0e20 	add.w	lr, lr, #32
 800051a:	2a01      	cmp	r2, #1
 800051c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000520:	bf28      	it	cs
 8000522:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000526:	fa43 f305 	asr.w	r3, r3, r5
 800052a:	18c0      	adds	r0, r0, r3
 800052c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	d507      	bpl.n	8000546 <__adddf3+0xe6>
 8000536:	f04f 0e00 	mov.w	lr, #0
 800053a:	f1dc 0c00 	rsbs	ip, ip, #0
 800053e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000542:	eb6e 0101 	sbc.w	r1, lr, r1
 8000546:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800054a:	d31b      	bcc.n	8000584 <__adddf3+0x124>
 800054c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000550:	d30c      	bcc.n	800056c <__adddf3+0x10c>
 8000552:	0849      	lsrs	r1, r1, #1
 8000554:	ea5f 0030 	movs.w	r0, r0, rrx
 8000558:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800055c:	f104 0401 	add.w	r4, r4, #1
 8000560:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000564:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000568:	f080 809a 	bcs.w	80006a0 <__adddf3+0x240>
 800056c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000570:	bf08      	it	eq
 8000572:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000576:	f150 0000 	adcs.w	r0, r0, #0
 800057a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057e:	ea41 0105 	orr.w	r1, r1, r5
 8000582:	bd30      	pop	{r4, r5, pc}
 8000584:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000588:	4140      	adcs	r0, r0
 800058a:	eb41 0101 	adc.w	r1, r1, r1
 800058e:	3c01      	subs	r4, #1
 8000590:	bf28      	it	cs
 8000592:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000596:	d2e9      	bcs.n	800056c <__adddf3+0x10c>
 8000598:	f091 0f00 	teq	r1, #0
 800059c:	bf04      	itt	eq
 800059e:	4601      	moveq	r1, r0
 80005a0:	2000      	moveq	r0, #0
 80005a2:	fab1 f381 	clz	r3, r1
 80005a6:	bf08      	it	eq
 80005a8:	3320      	addeq	r3, #32
 80005aa:	f1a3 030b 	sub.w	r3, r3, #11
 80005ae:	f1b3 0220 	subs.w	r2, r3, #32
 80005b2:	da0c      	bge.n	80005ce <__adddf3+0x16e>
 80005b4:	320c      	adds	r2, #12
 80005b6:	dd08      	ble.n	80005ca <__adddf3+0x16a>
 80005b8:	f102 0c14 	add.w	ip, r2, #20
 80005bc:	f1c2 020c 	rsb	r2, r2, #12
 80005c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c4:	fa21 f102 	lsr.w	r1, r1, r2
 80005c8:	e00c      	b.n	80005e4 <__adddf3+0x184>
 80005ca:	f102 0214 	add.w	r2, r2, #20
 80005ce:	bfd8      	it	le
 80005d0:	f1c2 0c20 	rsble	ip, r2, #32
 80005d4:	fa01 f102 	lsl.w	r1, r1, r2
 80005d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005dc:	bfdc      	itt	le
 80005de:	ea41 010c 	orrle.w	r1, r1, ip
 80005e2:	4090      	lslle	r0, r2
 80005e4:	1ae4      	subs	r4, r4, r3
 80005e6:	bfa2      	ittt	ge
 80005e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005ec:	4329      	orrge	r1, r5
 80005ee:	bd30      	popge	{r4, r5, pc}
 80005f0:	ea6f 0404 	mvn.w	r4, r4
 80005f4:	3c1f      	subs	r4, #31
 80005f6:	da1c      	bge.n	8000632 <__adddf3+0x1d2>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc0e      	bgt.n	800061a <__adddf3+0x1ba>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0220 	rsb	r2, r4, #32
 8000604:	fa20 f004 	lsr.w	r0, r0, r4
 8000608:	fa01 f302 	lsl.w	r3, r1, r2
 800060c:	ea40 0003 	orr.w	r0, r0, r3
 8000610:	fa21 f304 	lsr.w	r3, r1, r4
 8000614:	ea45 0103 	orr.w	r1, r5, r3
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f1c4 040c 	rsb	r4, r4, #12
 800061e:	f1c4 0220 	rsb	r2, r4, #32
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 f304 	lsl.w	r3, r1, r4
 800062a:	ea40 0003 	orr.w	r0, r0, r3
 800062e:	4629      	mov	r1, r5
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	fa21 f004 	lsr.w	r0, r1, r4
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	f094 0f00 	teq	r4, #0
 800063e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000642:	bf06      	itte	eq
 8000644:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000648:	3401      	addeq	r4, #1
 800064a:	3d01      	subne	r5, #1
 800064c:	e74e      	b.n	80004ec <__adddf3+0x8c>
 800064e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000652:	bf18      	it	ne
 8000654:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000658:	d029      	beq.n	80006ae <__adddf3+0x24e>
 800065a:	ea94 0f05 	teq	r4, r5
 800065e:	bf08      	it	eq
 8000660:	ea90 0f02 	teqeq	r0, r2
 8000664:	d005      	beq.n	8000672 <__adddf3+0x212>
 8000666:	ea54 0c00 	orrs.w	ip, r4, r0
 800066a:	bf04      	itt	eq
 800066c:	4619      	moveq	r1, r3
 800066e:	4610      	moveq	r0, r2
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf1e      	ittt	ne
 8000678:	2100      	movne	r1, #0
 800067a:	2000      	movne	r0, #0
 800067c:	bd30      	popne	{r4, r5, pc}
 800067e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000682:	d105      	bne.n	8000690 <__adddf3+0x230>
 8000684:	0040      	lsls	r0, r0, #1
 8000686:	4149      	adcs	r1, r1
 8000688:	bf28      	it	cs
 800068a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd30      	pop	{r4, r5, pc}
 8000690:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000694:	bf3c      	itt	cc
 8000696:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800069a:	bd30      	popcc	{r4, r5, pc}
 800069c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006a8:	f04f 0000 	mov.w	r0, #0
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006b2:	bf1a      	itte	ne
 80006b4:	4619      	movne	r1, r3
 80006b6:	4610      	movne	r0, r2
 80006b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006bc:	bf1c      	itt	ne
 80006be:	460b      	movne	r3, r1
 80006c0:	4602      	movne	r2, r0
 80006c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006c6:	bf06      	itte	eq
 80006c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006cc:	ea91 0f03 	teqeq	r1, r3
 80006d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	bf00      	nop

080006d8 <__aeabi_ui2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ec:	f04f 0500 	mov.w	r5, #0
 80006f0:	f04f 0100 	mov.w	r1, #0
 80006f4:	e750      	b.n	8000598 <__adddf3+0x138>
 80006f6:	bf00      	nop

080006f8 <__aeabi_i2d>:
 80006f8:	f090 0f00 	teq	r0, #0
 80006fc:	bf04      	itt	eq
 80006fe:	2100      	moveq	r1, #0
 8000700:	4770      	bxeq	lr
 8000702:	b530      	push	{r4, r5, lr}
 8000704:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000708:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800070c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000710:	bf48      	it	mi
 8000712:	4240      	negmi	r0, r0
 8000714:	f04f 0100 	mov.w	r1, #0
 8000718:	e73e      	b.n	8000598 <__adddf3+0x138>
 800071a:	bf00      	nop

0800071c <__aeabi_f2d>:
 800071c:	0042      	lsls	r2, r0, #1
 800071e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000722:	ea4f 0131 	mov.w	r1, r1, rrx
 8000726:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800072a:	bf1f      	itttt	ne
 800072c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000730:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000734:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000738:	4770      	bxne	lr
 800073a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800073e:	bf08      	it	eq
 8000740:	4770      	bxeq	lr
 8000742:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000746:	bf04      	itt	eq
 8000748:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800074c:	4770      	bxeq	lr
 800074e:	b530      	push	{r4, r5, lr}
 8000750:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	e71c      	b.n	8000598 <__adddf3+0x138>
 800075e:	bf00      	nop

08000760 <__aeabi_ul2d>:
 8000760:	ea50 0201 	orrs.w	r2, r0, r1
 8000764:	bf08      	it	eq
 8000766:	4770      	bxeq	lr
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f04f 0500 	mov.w	r5, #0
 800076e:	e00a      	b.n	8000786 <__aeabi_l2d+0x16>

08000770 <__aeabi_l2d>:
 8000770:	ea50 0201 	orrs.w	r2, r0, r1
 8000774:	bf08      	it	eq
 8000776:	4770      	bxeq	lr
 8000778:	b530      	push	{r4, r5, lr}
 800077a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800077e:	d502      	bpl.n	8000786 <__aeabi_l2d+0x16>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800078a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000792:	f43f aed8 	beq.w	8000546 <__adddf3+0xe6>
 8000796:	f04f 0203 	mov.w	r2, #3
 800079a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800079e:	bf18      	it	ne
 80007a0:	3203      	addne	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007ae:	f1c2 0320 	rsb	r3, r2, #32
 80007b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007b6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80007be:	ea40 000e 	orr.w	r0, r0, lr
 80007c2:	fa21 f102 	lsr.w	r1, r1, r2
 80007c6:	4414      	add	r4, r2
 80007c8:	e6bd      	b.n	8000546 <__adddf3+0xe6>
 80007ca:	bf00      	nop

080007cc <__gedf2>:
 80007cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80007d0:	e006      	b.n	80007e0 <__cmpdf2+0x4>
 80007d2:	bf00      	nop

080007d4 <__ledf2>:
 80007d4:	f04f 0c01 	mov.w	ip, #1
 80007d8:	e002      	b.n	80007e0 <__cmpdf2+0x4>
 80007da:	bf00      	nop

080007dc <__cmpdf2>:
 80007dc:	f04f 0c01 	mov.w	ip, #1
 80007e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007f6:	d01b      	beq.n	8000830 <__cmpdf2+0x54>
 80007f8:	b001      	add	sp, #4
 80007fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007fe:	bf0c      	ite	eq
 8000800:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000804:	ea91 0f03 	teqne	r1, r3
 8000808:	bf02      	ittt	eq
 800080a:	ea90 0f02 	teqeq	r0, r2
 800080e:	2000      	moveq	r0, #0
 8000810:	4770      	bxeq	lr
 8000812:	f110 0f00 	cmn.w	r0, #0
 8000816:	ea91 0f03 	teq	r1, r3
 800081a:	bf58      	it	pl
 800081c:	4299      	cmppl	r1, r3
 800081e:	bf08      	it	eq
 8000820:	4290      	cmpeq	r0, r2
 8000822:	bf2c      	ite	cs
 8000824:	17d8      	asrcs	r0, r3, #31
 8000826:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800082a:	f040 0001 	orr.w	r0, r0, #1
 800082e:	4770      	bx	lr
 8000830:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000838:	d102      	bne.n	8000840 <__cmpdf2+0x64>
 800083a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800083e:	d107      	bne.n	8000850 <__cmpdf2+0x74>
 8000840:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000844:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000848:	d1d6      	bne.n	80007f8 <__cmpdf2+0x1c>
 800084a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800084e:	d0d3      	beq.n	80007f8 <__cmpdf2+0x1c>
 8000850:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop

08000858 <__aeabi_cdrcmple>:
 8000858:	4684      	mov	ip, r0
 800085a:	4610      	mov	r0, r2
 800085c:	4662      	mov	r2, ip
 800085e:	468c      	mov	ip, r1
 8000860:	4619      	mov	r1, r3
 8000862:	4663      	mov	r3, ip
 8000864:	e000      	b.n	8000868 <__aeabi_cdcmpeq>
 8000866:	bf00      	nop

08000868 <__aeabi_cdcmpeq>:
 8000868:	b501      	push	{r0, lr}
 800086a:	f7ff ffb7 	bl	80007dc <__cmpdf2>
 800086e:	2800      	cmp	r0, #0
 8000870:	bf48      	it	mi
 8000872:	f110 0f00 	cmnmi.w	r0, #0
 8000876:	bd01      	pop	{r0, pc}

08000878 <__aeabi_dcmpeq>:
 8000878:	f84d ed08 	str.w	lr, [sp, #-8]!
 800087c:	f7ff fff4 	bl	8000868 <__aeabi_cdcmpeq>
 8000880:	bf0c      	ite	eq
 8000882:	2001      	moveq	r0, #1
 8000884:	2000      	movne	r0, #0
 8000886:	f85d fb08 	ldr.w	pc, [sp], #8
 800088a:	bf00      	nop

0800088c <__aeabi_dcmplt>:
 800088c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000890:	f7ff ffea 	bl	8000868 <__aeabi_cdcmpeq>
 8000894:	bf34      	ite	cc
 8000896:	2001      	movcc	r0, #1
 8000898:	2000      	movcs	r0, #0
 800089a:	f85d fb08 	ldr.w	pc, [sp], #8
 800089e:	bf00      	nop

080008a0 <__aeabi_dcmple>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff ffe0 	bl	8000868 <__aeabi_cdcmpeq>
 80008a8:	bf94      	ite	ls
 80008aa:	2001      	movls	r0, #1
 80008ac:	2000      	movhi	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_dcmpge>:
 80008b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008b8:	f7ff ffce 	bl	8000858 <__aeabi_cdrcmple>
 80008bc:	bf94      	ite	ls
 80008be:	2001      	movls	r0, #1
 80008c0:	2000      	movhi	r0, #0
 80008c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008c6:	bf00      	nop

080008c8 <__aeabi_dcmpgt>:
 80008c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008cc:	f7ff ffc4 	bl	8000858 <__aeabi_cdrcmple>
 80008d0:	bf34      	ite	cc
 80008d2:	2001      	movcc	r0, #1
 80008d4:	2000      	movcs	r0, #0
 80008d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008da:	bf00      	nop

080008dc <__aeabi_frsub>:
 80008dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80008e0:	e002      	b.n	80008e8 <__addsf3>
 80008e2:	bf00      	nop

080008e4 <__aeabi_fsub>:
 80008e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080008e8 <__addsf3>:
 80008e8:	0042      	lsls	r2, r0, #1
 80008ea:	bf1f      	itttt	ne
 80008ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80008f0:	ea92 0f03 	teqne	r2, r3
 80008f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80008f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008fc:	d06a      	beq.n	80009d4 <__addsf3+0xec>
 80008fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000902:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000906:	bfc1      	itttt	gt
 8000908:	18d2      	addgt	r2, r2, r3
 800090a:	4041      	eorgt	r1, r0
 800090c:	4048      	eorgt	r0, r1
 800090e:	4041      	eorgt	r1, r0
 8000910:	bfb8      	it	lt
 8000912:	425b      	neglt	r3, r3
 8000914:	2b19      	cmp	r3, #25
 8000916:	bf88      	it	hi
 8000918:	4770      	bxhi	lr
 800091a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800091e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000922:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000926:	bf18      	it	ne
 8000928:	4240      	negne	r0, r0
 800092a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800092e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000932:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000936:	bf18      	it	ne
 8000938:	4249      	negne	r1, r1
 800093a:	ea92 0f03 	teq	r2, r3
 800093e:	d03f      	beq.n	80009c0 <__addsf3+0xd8>
 8000940:	f1a2 0201 	sub.w	r2, r2, #1
 8000944:	fa41 fc03 	asr.w	ip, r1, r3
 8000948:	eb10 000c 	adds.w	r0, r0, ip
 800094c:	f1c3 0320 	rsb	r3, r3, #32
 8000950:	fa01 f103 	lsl.w	r1, r1, r3
 8000954:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000958:	d502      	bpl.n	8000960 <__addsf3+0x78>
 800095a:	4249      	negs	r1, r1
 800095c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000960:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000964:	d313      	bcc.n	800098e <__addsf3+0xa6>
 8000966:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800096a:	d306      	bcc.n	800097a <__addsf3+0x92>
 800096c:	0840      	lsrs	r0, r0, #1
 800096e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000972:	f102 0201 	add.w	r2, r2, #1
 8000976:	2afe      	cmp	r2, #254	; 0xfe
 8000978:	d251      	bcs.n	8000a1e <__addsf3+0x136>
 800097a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800097e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000982:	bf08      	it	eq
 8000984:	f020 0001 	biceq.w	r0, r0, #1
 8000988:	ea40 0003 	orr.w	r0, r0, r3
 800098c:	4770      	bx	lr
 800098e:	0049      	lsls	r1, r1, #1
 8000990:	eb40 0000 	adc.w	r0, r0, r0
 8000994:	3a01      	subs	r2, #1
 8000996:	bf28      	it	cs
 8000998:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800099c:	d2ed      	bcs.n	800097a <__addsf3+0x92>
 800099e:	fab0 fc80 	clz	ip, r0
 80009a2:	f1ac 0c08 	sub.w	ip, ip, #8
 80009a6:	ebb2 020c 	subs.w	r2, r2, ip
 80009aa:	fa00 f00c 	lsl.w	r0, r0, ip
 80009ae:	bfaa      	itet	ge
 80009b0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80009b4:	4252      	neglt	r2, r2
 80009b6:	4318      	orrge	r0, r3
 80009b8:	bfbc      	itt	lt
 80009ba:	40d0      	lsrlt	r0, r2
 80009bc:	4318      	orrlt	r0, r3
 80009be:	4770      	bx	lr
 80009c0:	f092 0f00 	teq	r2, #0
 80009c4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80009c8:	bf06      	itte	eq
 80009ca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80009ce:	3201      	addeq	r2, #1
 80009d0:	3b01      	subne	r3, #1
 80009d2:	e7b5      	b.n	8000940 <__addsf3+0x58>
 80009d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009dc:	bf18      	it	ne
 80009de:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009e2:	d021      	beq.n	8000a28 <__addsf3+0x140>
 80009e4:	ea92 0f03 	teq	r2, r3
 80009e8:	d004      	beq.n	80009f4 <__addsf3+0x10c>
 80009ea:	f092 0f00 	teq	r2, #0
 80009ee:	bf08      	it	eq
 80009f0:	4608      	moveq	r0, r1
 80009f2:	4770      	bx	lr
 80009f4:	ea90 0f01 	teq	r0, r1
 80009f8:	bf1c      	itt	ne
 80009fa:	2000      	movne	r0, #0
 80009fc:	4770      	bxne	lr
 80009fe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a02:	d104      	bne.n	8000a0e <__addsf3+0x126>
 8000a04:	0040      	lsls	r0, r0, #1
 8000a06:	bf28      	it	cs
 8000a08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a0c:	4770      	bx	lr
 8000a0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a12:	bf3c      	itt	cc
 8000a14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a18:	4770      	bxcc	lr
 8000a1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a26:	4770      	bx	lr
 8000a28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a2c:	bf16      	itet	ne
 8000a2e:	4608      	movne	r0, r1
 8000a30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a34:	4601      	movne	r1, r0
 8000a36:	0242      	lsls	r2, r0, #9
 8000a38:	bf06      	itte	eq
 8000a3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a3e:	ea90 0f01 	teqeq	r0, r1
 8000a42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a46:	4770      	bx	lr

08000a48 <__aeabi_ui2f>:
 8000a48:	f04f 0300 	mov.w	r3, #0
 8000a4c:	e004      	b.n	8000a58 <__aeabi_i2f+0x8>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_i2f>:
 8000a50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000a54:	bf48      	it	mi
 8000a56:	4240      	negmi	r0, r0
 8000a58:	ea5f 0c00 	movs.w	ip, r0
 8000a5c:	bf08      	it	eq
 8000a5e:	4770      	bxeq	lr
 8000a60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000a64:	4601      	mov	r1, r0
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	e01c      	b.n	8000aa6 <__aeabi_l2f+0x2a>

08000a6c <__aeabi_ul2f>:
 8000a6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000a70:	bf08      	it	eq
 8000a72:	4770      	bxeq	lr
 8000a74:	f04f 0300 	mov.w	r3, #0
 8000a78:	e00a      	b.n	8000a90 <__aeabi_l2f+0x14>
 8000a7a:	bf00      	nop

08000a7c <__aeabi_l2f>:
 8000a7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000a80:	bf08      	it	eq
 8000a82:	4770      	bxeq	lr
 8000a84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000a88:	d502      	bpl.n	8000a90 <__aeabi_l2f+0x14>
 8000a8a:	4240      	negs	r0, r0
 8000a8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a90:	ea5f 0c01 	movs.w	ip, r1
 8000a94:	bf02      	ittt	eq
 8000a96:	4684      	moveq	ip, r0
 8000a98:	4601      	moveq	r1, r0
 8000a9a:	2000      	moveq	r0, #0
 8000a9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000aa0:	bf08      	it	eq
 8000aa2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000aaa:	fabc f28c 	clz	r2, ip
 8000aae:	3a08      	subs	r2, #8
 8000ab0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ab4:	db10      	blt.n	8000ad8 <__aeabi_l2f+0x5c>
 8000ab6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000aba:	4463      	add	r3, ip
 8000abc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ac0:	f1c2 0220 	rsb	r2, r2, #32
 8000ac4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ac8:	fa20 f202 	lsr.w	r2, r0, r2
 8000acc:	eb43 0002 	adc.w	r0, r3, r2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f102 0220 	add.w	r2, r2, #32
 8000adc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ae0:	f1c2 0220 	rsb	r2, r2, #32
 8000ae4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ae8:	fa21 f202 	lsr.w	r2, r1, r2
 8000aec:	eb43 0002 	adc.w	r0, r3, r2
 8000af0:	bf08      	it	eq
 8000af2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_uldivmod>:
 8000af8:	b953      	cbnz	r3, 8000b10 <__aeabi_uldivmod+0x18>
 8000afa:	b94a      	cbnz	r2, 8000b10 <__aeabi_uldivmod+0x18>
 8000afc:	2900      	cmp	r1, #0
 8000afe:	bf08      	it	eq
 8000b00:	2800      	cmpeq	r0, #0
 8000b02:	bf1c      	itt	ne
 8000b04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b0c:	f000 b974 	b.w	8000df8 <__aeabi_idiv0>
 8000b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b18:	f000 f806 	bl	8000b28 <__udivmoddi4>
 8000b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b24:	b004      	add	sp, #16
 8000b26:	4770      	bx	lr

08000b28 <__udivmoddi4>:
 8000b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b2c:	9d08      	ldr	r5, [sp, #32]
 8000b2e:	4604      	mov	r4, r0
 8000b30:	468e      	mov	lr, r1
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d14d      	bne.n	8000bd2 <__udivmoddi4+0xaa>
 8000b36:	428a      	cmp	r2, r1
 8000b38:	4694      	mov	ip, r2
 8000b3a:	d969      	bls.n	8000c10 <__udivmoddi4+0xe8>
 8000b3c:	fab2 f282 	clz	r2, r2
 8000b40:	b152      	cbz	r2, 8000b58 <__udivmoddi4+0x30>
 8000b42:	fa01 f302 	lsl.w	r3, r1, r2
 8000b46:	f1c2 0120 	rsb	r1, r2, #32
 8000b4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000b4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b52:	ea41 0e03 	orr.w	lr, r1, r3
 8000b56:	4094      	lsls	r4, r2
 8000b58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b5c:	0c21      	lsrs	r1, r4, #16
 8000b5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000b62:	fa1f f78c 	uxth.w	r7, ip
 8000b66:	fb08 e316 	mls	r3, r8, r6, lr
 8000b6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b6e:	fb06 f107 	mul.w	r1, r6, r7
 8000b72:	4299      	cmp	r1, r3
 8000b74:	d90a      	bls.n	8000b8c <__udivmoddi4+0x64>
 8000b76:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b7e:	f080 811f 	bcs.w	8000dc0 <__udivmoddi4+0x298>
 8000b82:	4299      	cmp	r1, r3
 8000b84:	f240 811c 	bls.w	8000dc0 <__udivmoddi4+0x298>
 8000b88:	3e02      	subs	r6, #2
 8000b8a:	4463      	add	r3, ip
 8000b8c:	1a5b      	subs	r3, r3, r1
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b94:	fb08 3310 	mls	r3, r8, r0, r3
 8000b98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ba0:	42a7      	cmp	r7, r4
 8000ba2:	d90a      	bls.n	8000bba <__udivmoddi4+0x92>
 8000ba4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ba8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bac:	f080 810a 	bcs.w	8000dc4 <__udivmoddi4+0x29c>
 8000bb0:	42a7      	cmp	r7, r4
 8000bb2:	f240 8107 	bls.w	8000dc4 <__udivmoddi4+0x29c>
 8000bb6:	4464      	add	r4, ip
 8000bb8:	3802      	subs	r0, #2
 8000bba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bbe:	1be4      	subs	r4, r4, r7
 8000bc0:	2600      	movs	r6, #0
 8000bc2:	b11d      	cbz	r5, 8000bcc <__udivmoddi4+0xa4>
 8000bc4:	40d4      	lsrs	r4, r2
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bcc:	4631      	mov	r1, r6
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0xc2>
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	f000 80ef 	beq.w	8000dba <__udivmoddi4+0x292>
 8000bdc:	2600      	movs	r6, #0
 8000bde:	e9c5 0100 	strd	r0, r1, [r5]
 8000be2:	4630      	mov	r0, r6
 8000be4:	4631      	mov	r1, r6
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	fab3 f683 	clz	r6, r3
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d14a      	bne.n	8000c88 <__udivmoddi4+0x160>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xd4>
 8000bf6:	4282      	cmp	r2, r0
 8000bf8:	f200 80f9 	bhi.w	8000dee <__udivmoddi4+0x2c6>
 8000bfc:	1a84      	subs	r4, r0, r2
 8000bfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	469e      	mov	lr, r3
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	d0e0      	beq.n	8000bcc <__udivmoddi4+0xa4>
 8000c0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c0e:	e7dd      	b.n	8000bcc <__udivmoddi4+0xa4>
 8000c10:	b902      	cbnz	r2, 8000c14 <__udivmoddi4+0xec>
 8000c12:	deff      	udf	#255	; 0xff
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	f040 8092 	bne.w	8000d42 <__udivmoddi4+0x21a>
 8000c1e:	eba1 010c 	sub.w	r1, r1, ip
 8000c22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c26:	fa1f fe8c 	uxth.w	lr, ip
 8000c2a:	2601      	movs	r6, #1
 8000c2c:	0c20      	lsrs	r0, r4, #16
 8000c2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c32:	fb07 1113 	mls	r1, r7, r3, r1
 8000c36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c3a:	fb0e f003 	mul.w	r0, lr, r3
 8000c3e:	4288      	cmp	r0, r1
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x12c>
 8000c42:	eb1c 0101 	adds.w	r1, ip, r1
 8000c46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x12a>
 8000c4c:	4288      	cmp	r0, r1
 8000c4e:	f200 80cb 	bhi.w	8000de8 <__udivmoddi4+0x2c0>
 8000c52:	4643      	mov	r3, r8
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000c60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c64:	fb0e fe00 	mul.w	lr, lr, r0
 8000c68:	45a6      	cmp	lr, r4
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x156>
 8000c6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c74:	d202      	bcs.n	8000c7c <__udivmoddi4+0x154>
 8000c76:	45a6      	cmp	lr, r4
 8000c78:	f200 80bb 	bhi.w	8000df2 <__udivmoddi4+0x2ca>
 8000c7c:	4608      	mov	r0, r1
 8000c7e:	eba4 040e 	sub.w	r4, r4, lr
 8000c82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c86:	e79c      	b.n	8000bc2 <__udivmoddi4+0x9a>
 8000c88:	f1c6 0720 	rsb	r7, r6, #32
 8000c8c:	40b3      	lsls	r3, r6
 8000c8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c96:	fa20 f407 	lsr.w	r4, r0, r7
 8000c9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c9e:	431c      	orrs	r4, r3
 8000ca0:	40f9      	lsrs	r1, r7
 8000ca2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ca6:	fa00 f306 	lsl.w	r3, r0, r6
 8000caa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cae:	0c20      	lsrs	r0, r4, #16
 8000cb0:	fa1f fe8c 	uxth.w	lr, ip
 8000cb4:	fb09 1118 	mls	r1, r9, r8, r1
 8000cb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000cc0:	4288      	cmp	r0, r1
 8000cc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000cc6:	d90b      	bls.n	8000ce0 <__udivmoddi4+0x1b8>
 8000cc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ccc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000cd0:	f080 8088 	bcs.w	8000de4 <__udivmoddi4+0x2bc>
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	f240 8085 	bls.w	8000de4 <__udivmoddi4+0x2bc>
 8000cda:	f1a8 0802 	sub.w	r8, r8, #2
 8000cde:	4461      	add	r1, ip
 8000ce0:	1a09      	subs	r1, r1, r0
 8000ce2:	b2a4      	uxth	r4, r4
 8000ce4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ce8:	fb09 1110 	mls	r1, r9, r0, r1
 8000cec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cf0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cf4:	458e      	cmp	lr, r1
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1e2>
 8000cf8:	eb1c 0101 	adds.w	r1, ip, r1
 8000cfc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d00:	d26c      	bcs.n	8000ddc <__udivmoddi4+0x2b4>
 8000d02:	458e      	cmp	lr, r1
 8000d04:	d96a      	bls.n	8000ddc <__udivmoddi4+0x2b4>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4461      	add	r1, ip
 8000d0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d12:	eba1 010e 	sub.w	r1, r1, lr
 8000d16:	42a1      	cmp	r1, r4
 8000d18:	46c8      	mov	r8, r9
 8000d1a:	46a6      	mov	lr, r4
 8000d1c:	d356      	bcc.n	8000dcc <__udivmoddi4+0x2a4>
 8000d1e:	d053      	beq.n	8000dc8 <__udivmoddi4+0x2a0>
 8000d20:	b15d      	cbz	r5, 8000d3a <__udivmoddi4+0x212>
 8000d22:	ebb3 0208 	subs.w	r2, r3, r8
 8000d26:	eb61 010e 	sbc.w	r1, r1, lr
 8000d2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d32:	40f1      	lsrs	r1, r6
 8000d34:	431f      	orrs	r7, r3
 8000d36:	e9c5 7100 	strd	r7, r1, [r5]
 8000d3a:	2600      	movs	r6, #0
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	f1c2 0320 	rsb	r3, r2, #32
 8000d46:	40d8      	lsrs	r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000d50:	4091      	lsls	r1, r2
 8000d52:	4301      	orrs	r1, r0
 8000d54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d60:	fb07 3610 	mls	r6, r7, r0, r3
 8000d64:	0c0b      	lsrs	r3, r1, #16
 8000d66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000d6e:	429e      	cmp	r6, r3
 8000d70:	fa04 f402 	lsl.w	r4, r4, r2
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x260>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d7e:	d22f      	bcs.n	8000de0 <__udivmoddi4+0x2b8>
 8000d80:	429e      	cmp	r6, r3
 8000d82:	d92d      	bls.n	8000de0 <__udivmoddi4+0x2b8>
 8000d84:	3802      	subs	r0, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1b9b      	subs	r3, r3, r6
 8000d8a:	b289      	uxth	r1, r1
 8000d8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d90:	fb07 3316 	mls	r3, r7, r6, r3
 8000d94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d98:	fb06 f30e 	mul.w	r3, r6, lr
 8000d9c:	428b      	cmp	r3, r1
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x28a>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000da8:	d216      	bcs.n	8000dd8 <__udivmoddi4+0x2b0>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d914      	bls.n	8000dd8 <__udivmoddi4+0x2b0>
 8000dae:	3e02      	subs	r6, #2
 8000db0:	4461      	add	r1, ip
 8000db2:	1ac9      	subs	r1, r1, r3
 8000db4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000db8:	e738      	b.n	8000c2c <__udivmoddi4+0x104>
 8000dba:	462e      	mov	r6, r5
 8000dbc:	4628      	mov	r0, r5
 8000dbe:	e705      	b.n	8000bcc <__udivmoddi4+0xa4>
 8000dc0:	4606      	mov	r6, r0
 8000dc2:	e6e3      	b.n	8000b8c <__udivmoddi4+0x64>
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	e6f8      	b.n	8000bba <__udivmoddi4+0x92>
 8000dc8:	454b      	cmp	r3, r9
 8000dca:	d2a9      	bcs.n	8000d20 <__udivmoddi4+0x1f8>
 8000dcc:	ebb9 0802 	subs.w	r8, r9, r2
 8000dd0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dd4:	3801      	subs	r0, #1
 8000dd6:	e7a3      	b.n	8000d20 <__udivmoddi4+0x1f8>
 8000dd8:	4646      	mov	r6, r8
 8000dda:	e7ea      	b.n	8000db2 <__udivmoddi4+0x28a>
 8000ddc:	4620      	mov	r0, r4
 8000dde:	e794      	b.n	8000d0a <__udivmoddi4+0x1e2>
 8000de0:	4640      	mov	r0, r8
 8000de2:	e7d1      	b.n	8000d88 <__udivmoddi4+0x260>
 8000de4:	46d0      	mov	r8, sl
 8000de6:	e77b      	b.n	8000ce0 <__udivmoddi4+0x1b8>
 8000de8:	3b02      	subs	r3, #2
 8000dea:	4461      	add	r1, ip
 8000dec:	e732      	b.n	8000c54 <__udivmoddi4+0x12c>
 8000dee:	4630      	mov	r0, r6
 8000df0:	e709      	b.n	8000c06 <__udivmoddi4+0xde>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	e742      	b.n	8000c7e <__udivmoddi4+0x156>

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <debounceFSM_init>:
 * @details	Set the initial state
 * @param 	none
 * @return 	none
 */
void debounceFSM_init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	delayInit(&delayButton, BUTTON_DEBOUNCE_DELAY);
 8000e00:	2128      	movs	r1, #40	; 0x28
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <debounceFSM_init+0x1c>)
 8000e04:	f000 f890 	bl	8000f28 <delayInit>
	currentState = BUTTON_UP;
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <debounceFSM_init+0x20>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
	fallingEdge = false;
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <debounceFSM_init+0x24>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	2000003c 	.word	0x2000003c
 8000e1c:	20000048 	.word	0x20000048
 8000e20:	20000049 	.word	0x20000049

08000e24 <debounceFSM_update>:
 * 			Must be called frequently.
 * @param 	none
 * @return 	none
 */
void debounceFSM_update()
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	switch(currentState){
 8000e28:	4b30      	ldr	r3, [pc, #192]	; (8000eec <debounceFSM_update+0xc8>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	d850      	bhi.n	8000ed2 <debounceFSM_update+0xae>
 8000e30:	a201      	add	r2, pc, #4	; (adr r2, 8000e38 <debounceFSM_update+0x14>)
 8000e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e36:	bf00      	nop
 8000e38:	08000e49 	.word	0x08000e49
 8000e3c:	08000e63 	.word	0x08000e63
 8000e40:	08000e91 	.word	0x08000e91
 8000e44:	08000eab 	.word	0x08000eab
			case BUTTON_UP:
				if(BSP_PB_GetState(BUTTON_USER))
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f000 f9b5 	bl	80011b8 <BSP_PB_GetState>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d041      	beq.n	8000ed8 <debounceFSM_update+0xb4>
				{
					currentState = BUTTON_FALLING;
 8000e54:	4b25      	ldr	r3, [pc, #148]	; (8000eec <debounceFSM_update+0xc8>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
					delayRead(&delayButton);		// Set the initial value of the delay
 8000e5a:	4825      	ldr	r0, [pc, #148]	; (8000ef0 <debounceFSM_update+0xcc>)
 8000e5c:	f000 f881 	bl	8000f62 <delayRead>
				}

				break;
 8000e60:	e03a      	b.n	8000ed8 <debounceFSM_update+0xb4>
			case BUTTON_FALLING:
				if(delayRead(&delayButton))
 8000e62:	4823      	ldr	r0, [pc, #140]	; (8000ef0 <debounceFSM_update+0xcc>)
 8000e64:	f000 f87d 	bl	8000f62 <delayRead>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d036      	beq.n	8000edc <debounceFSM_update+0xb8>
				{
					if(BSP_PB_GetState(BUTTON_USER))
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f000 f9a2 	bl	80011b8 <BSP_PB_GetState>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d006      	beq.n	8000e88 <debounceFSM_update+0x64>
					{
						currentState = BUTTON_DOWN;
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <debounceFSM_update+0xc8>)
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	701a      	strb	r2, [r3, #0]
						fallingEdge = true;
 8000e80:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <debounceFSM_update+0xd0>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	701a      	strb	r2, [r3, #0]
					else
					{
						currentState = BUTTON_UP;
					}
				}
				break;
 8000e86:	e029      	b.n	8000edc <debounceFSM_update+0xb8>
						currentState = BUTTON_UP;
 8000e88:	4b18      	ldr	r3, [pc, #96]	; (8000eec <debounceFSM_update+0xc8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
				break;
 8000e8e:	e025      	b.n	8000edc <debounceFSM_update+0xb8>
			case BUTTON_DOWN:
				if(!BSP_PB_GetState(BUTTON_USER))
 8000e90:	2000      	movs	r0, #0
 8000e92:	f000 f991 	bl	80011b8 <BSP_PB_GetState>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d121      	bne.n	8000ee0 <debounceFSM_update+0xbc>
				{
					currentState = BUTTON_RAISING;
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <debounceFSM_update+0xc8>)
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	701a      	strb	r2, [r3, #0]
					delayRead(&delayButton);		// Set the initial value of the delay
 8000ea2:	4813      	ldr	r0, [pc, #76]	; (8000ef0 <debounceFSM_update+0xcc>)
 8000ea4:	f000 f85d 	bl	8000f62 <delayRead>
				}
				break;
 8000ea8:	e01a      	b.n	8000ee0 <debounceFSM_update+0xbc>
			case BUTTON_RAISING:
				if(delayRead(&delayButton))
 8000eaa:	4811      	ldr	r0, [pc, #68]	; (8000ef0 <debounceFSM_update+0xcc>)
 8000eac:	f000 f859 	bl	8000f62 <delayRead>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d016      	beq.n	8000ee4 <debounceFSM_update+0xc0>
				{
					if(!BSP_PB_GetState(BUTTON_USER))
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f000 f97e 	bl	80011b8 <BSP_PB_GetState>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d103      	bne.n	8000eca <debounceFSM_update+0xa6>
					{
						currentState = BUTTON_UP;
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <debounceFSM_update+0xc8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
					else
					{
						currentState = BUTTON_DOWN;
					}
				}
				break;
 8000ec8:	e00c      	b.n	8000ee4 <debounceFSM_update+0xc0>
						currentState = BUTTON_DOWN;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <debounceFSM_update+0xc8>)
 8000ecc:	2202      	movs	r2, #2
 8000ece:	701a      	strb	r2, [r3, #0]
				break;
 8000ed0:	e008      	b.n	8000ee4 <debounceFSM_update+0xc0>
			default:
				Error_Handler();
 8000ed2:	f000 f875 	bl	8000fc0 <Error_Handler>
				break;
 8000ed6:	e006      	b.n	8000ee6 <debounceFSM_update+0xc2>
				break;
 8000ed8:	bf00      	nop
 8000eda:	e004      	b.n	8000ee6 <debounceFSM_update+0xc2>
				break;
 8000edc:	bf00      	nop
 8000ede:	e002      	b.n	8000ee6 <debounceFSM_update+0xc2>
				break;
 8000ee0:	bf00      	nop
 8000ee2:	e000      	b.n	8000ee6 <debounceFSM_update+0xc2>
				break;
 8000ee4:	bf00      	nop
			}
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000048 	.word	0x20000048
 8000ef0:	2000003c 	.word	0x2000003c
 8000ef4:	20000049 	.word	0x20000049

08000ef8 <readKeyPressed>:
 * @brief   Read button state.
 * @param 	none
 * @return	True if button was pressed, False if not.
 */
bool_t readKeyPressed(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
	bool_t returnValue = false;
 8000efe:	2300      	movs	r3, #0
 8000f00:	71fb      	strb	r3, [r7, #7]

	if(fallingEdge)
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <readKeyPressed+0x2c>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d004      	beq.n	8000f14 <readKeyPressed+0x1c>
	{
		fallingEdge = false;
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <readKeyPressed+0x2c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
		returnValue = true;
 8000f10:	2301      	movs	r3, #1
 8000f12:	71fb      	strb	r3, [r7, #7]
	}

	return returnValue;
 8000f14:	79fb      	ldrb	r3, [r7, #7]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000049 	.word	0x20000049

08000f28 <delayInit>:
 * @param   delay 		Pointer to the delay structure
 * @param	duration 	Delay in milliseconds
 * @return  None
 */
void delayInit( delay_t * delay, tick_t duration )
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
	if(delay != NULL && 0 < duration && duration < MAX_DELAY)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d00e      	beq.n	8000f56 <delayInit+0x2e>
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d00b      	beq.n	8000f56 <delayInit+0x2e>
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	f247 522f 	movw	r2, #29999	; 0x752f
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d806      	bhi.n	8000f56 <delayInit+0x2e>
	{
		delay->running = false;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	721a      	strb	r2, [r3, #8]
		delay->duration = duration;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	605a      	str	r2, [r3, #4]
	}
	else
	{
		while(1);
	}
}
 8000f54:	e000      	b.n	8000f58 <delayInit+0x30>
		while(1);
 8000f56:	e7fe      	b.n	8000f56 <delayInit+0x2e>
}
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <delayRead>:
 * @brief   Read the delay state
 * @param   delay 		Pointer to the delay structure
 * @return  True if the delay happened, false if not.
 */
bool_t delayRead( delay_t * delay )
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b084      	sub	sp, #16
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
	bool_t returnValue = false;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73fb      	strb	r3, [r7, #15]

	if(delay == NULL)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d100      	bne.n	8000f76 <delayRead+0x14>
		while(1);
 8000f74:	e7fe      	b.n	8000f74 <delayRead+0x12>

	if(delay->running)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	7a1b      	ldrb	r3, [r3, #8]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d012      	beq.n	8000fa4 <delayRead+0x42>
	{
		if((HAL_GetTick() - delay->startTime) >= delay->duration)
 8000f7e:	f000 f9f5 	bl	800136c <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	1ad2      	subs	r2, r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d305      	bcc.n	8000f9e <delayRead+0x3c>
		{
			delay->running = false;		// At the next delayRead, it will be runned again.
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	721a      	strb	r2, [r3, #8]
			returnValue = true;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	e00a      	b.n	8000fb4 <delayRead+0x52>

		}
		else
			returnValue = false;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	e007      	b.n	8000fb4 <delayRead+0x52>
	}
	else
	{
		delay->startTime = HAL_GetTick();
 8000fa4:	f000 f9e2 	bl	800136c <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	721a      	strb	r2, [r3, #8]
	}

	return returnValue;
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	uartSendString(ERROR_MSJ);
 8000fc4:	4801      	ldr	r0, [pc, #4]	; (8000fcc <Error_Handler+0xc>)
 8000fc6:	f000 f839 	bl	800103c <uartSendString>
	while (1);
 8000fca:	e7fe      	b.n	8000fca <Error_Handler+0xa>
 8000fcc:	08003d48 	.word	0x08003d48

08000fd0 <uartInit>:
 * @details
 * @param	none
 * @return	true if the initialization was success, false if not
 */
bool_t uartInit(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
	bool_t returnValue = false;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	71fb      	strb	r3, [r7, #7]
		                  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	      - Stop Bit    = One Stop bit
	      - Parity      = ODD parity
	      - BaudRate    = 9600 baud
	      - Hardware flow control disabled (RTS and CTS signals) */
	  UartHandle.Instance        = USARTx;
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <uartInit+0x60>)
 8000fdc:	4a15      	ldr	r2, [pc, #84]	; (8001034 <uartInit+0x64>)
 8000fde:	601a      	str	r2, [r3, #0]

	  UartHandle.Init.BaudRate   = 9600;
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <uartInit+0x60>)
 8000fe2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fe6:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <uartInit+0x60>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <uartInit+0x60>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity     = UART_PARITY_ODD;
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <uartInit+0x60>)
 8000ff6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000ffa:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <uartInit+0x60>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <uartInit+0x60>)
 8001004:	220c      	movs	r2, #12
 8001006:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <uartInit+0x60>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&UartHandle) == HAL_OK)
 800100e:	4808      	ldr	r0, [pc, #32]	; (8001030 <uartInit+0x60>)
 8001010:	f001 fd66 	bl	8002ae0 <HAL_UART_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d104      	bne.n	8001024 <uartInit+0x54>
	  {
		  uartSendString((uint8_t*)"Initialization finished successfully\n");
 800101a:	4807      	ldr	r0, [pc, #28]	; (8001038 <uartInit+0x68>)
 800101c:	f000 f80e 	bl	800103c <uartSendString>

		  returnValue = true;
 8001020:	2301      	movs	r3, #1
 8001022:	71fb      	strb	r3, [r7, #7]
	  }

	  return returnValue;
 8001024:	79fb      	ldrb	r3, [r7, #7]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	2000004c 	.word	0x2000004c
 8001034:	40004800 	.word	0x40004800
 8001038:	08003d5c 	.word	0x08003d5c

0800103c <uartSendString>:
 * @details	Send all the string
 * @param	uint8_t * string to send
 * @return	none
 */
void uartSendString(uint8_t * pstring)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	if(NULL != pstring)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d009      	beq.n	800105e <uartSendString+0x22>
		HAL_UART_Transmit(&UartHandle, pstring, strlen((const char *)pstring), UART_TRANSMIT_MAX_DELAY);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff f8d0 	bl	80001f0 <strlen>
 8001050:	4603      	mov	r3, r0
 8001052:	b29a      	uxth	r2, r3
 8001054:	2364      	movs	r3, #100	; 0x64
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	4803      	ldr	r0, [pc, #12]	; (8001068 <uartSendString+0x2c>)
 800105a:	f001 fd8e 	bl	8002b7a <HAL_UART_Transmit>

}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	2000004c 	.word	0x2000004c

0800106c <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d10e      	bne.n	800109a <BSP_LED_Init+0x2e>
 800107c:	2300      	movs	r3, #0
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <BSP_LED_Init+0x94>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	4a1e      	ldr	r2, [pc, #120]	; (8001100 <BSP_LED_Init+0x94>)
 8001086:	f043 0302 	orr.w	r3, r3, #2
 800108a:	6313      	str	r3, [r2, #48]	; 0x30
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <BSP_LED_Init+0x94>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	e00d      	b.n	80010b6 <BSP_LED_Init+0x4a>
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <BSP_LED_Init+0x94>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a17      	ldr	r2, [pc, #92]	; (8001100 <BSP_LED_Init+0x94>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <BSP_LED_Init+0x94>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	4a12      	ldr	r2, [pc, #72]	; (8001104 <BSP_LED_Init+0x98>)
 80010ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80010c8:	2302      	movs	r3, #2
 80010ca:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <BSP_LED_Init+0x9c>)
 80010d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d4:	f107 0214 	add.w	r2, r7, #20
 80010d8:	4611      	mov	r1, r2
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 fa88 	bl	80015f0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	4a09      	ldr	r2, [pc, #36]	; (8001108 <BSP_LED_Init+0x9c>)
 80010e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	4a06      	ldr	r2, [pc, #24]	; (8001104 <BSP_LED_Init+0x98>)
 80010ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010f0:	2200      	movs	r2, #0
 80010f2:	4619      	mov	r1, r3
 80010f4:	f000 fc40 	bl	8001978 <HAL_GPIO_WritePin>
}
 80010f8:	bf00      	nop
 80010fa:	3728      	adds	r7, #40	; 0x28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40023800 	.word	0x40023800
 8001104:	08003df0 	.word	0x08003df0
 8001108:	20000000 	.word	0x20000000

0800110c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	460a      	mov	r2, r1
 8001116:	71fb      	strb	r3, [r7, #7]
 8001118:	4613      	mov	r3, r2
 800111a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <BSP_PB_Init+0xa4>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001124:	4a22      	ldr	r2, [pc, #136]	; (80011b0 <BSP_PB_Init+0xa4>)
 8001126:	f043 0304 	orr.w	r3, r3, #4
 800112a:	6313      	str	r3, [r2, #48]	; 0x30
 800112c:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <BSP_PB_Init+0xa4>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001138:	79bb      	ldrb	r3, [r7, #6]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d112      	bne.n	8001164 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800113e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001142:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001148:	2302      	movs	r3, #2
 800114a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800114c:	2302      	movs	r3, #2
 800114e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	4a18      	ldr	r2, [pc, #96]	; (80011b4 <BSP_PB_Init+0xa8>)
 8001154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001158:	f107 020c 	add.w	r2, r7, #12
 800115c:	4611      	mov	r1, r2
 800115e:	4618      	mov	r0, r3
 8001160:	f000 fa46 	bl	80015f0 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001164:	79bb      	ldrb	r3, [r7, #6]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d11d      	bne.n	80011a6 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800116a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8001174:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001178:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <BSP_PB_Init+0xa8>)
 800117e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001182:	f107 020c 	add.w	r2, r7, #12
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f000 fa31 	bl	80015f0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800118e:	2328      	movs	r3, #40	; 0x28
 8001190:	b25b      	sxtb	r3, r3
 8001192:	2200      	movs	r2, #0
 8001194:	210f      	movs	r1, #15
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f9f3 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800119c:	2328      	movs	r3, #40	; 0x28
 800119e:	b25b      	sxtb	r3, r3
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 fa0a 	bl	80015ba <HAL_NVIC_EnableIRQ>
  }
}
 80011a6:	bf00      	nop
 80011a8:	3720      	adds	r7, #32
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800
 80011b4:	2000000c 	.word	0x2000000c

080011b8 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	4a06      	ldr	r2, [pc, #24]	; (80011e0 <BSP_PB_GetState+0x28>)
 80011c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 fbb9 	bl	8001948 <HAL_GPIO_ReadPin>
 80011d6:	4603      	mov	r3, r0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	2000000c 	.word	0x2000000c

080011e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <SystemInit+0x60>)
 80011ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ee:	4a15      	ldr	r2, [pc, #84]	; (8001244 <SystemInit+0x60>)
 80011f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <SystemInit+0x64>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a12      	ldr	r2, [pc, #72]	; (8001248 <SystemInit+0x64>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001204:	4b10      	ldr	r3, [pc, #64]	; (8001248 <SystemInit+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <SystemInit+0x64>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a0e      	ldr	r2, [pc, #56]	; (8001248 <SystemInit+0x64>)
 8001210:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001218:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <SystemInit+0x64>)
 800121c:	4a0b      	ldr	r2, [pc, #44]	; (800124c <SystemInit+0x68>)
 800121e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <SystemInit+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a08      	ldr	r2, [pc, #32]	; (8001248 <SystemInit+0x64>)
 8001226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <SystemInit+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001232:	4b04      	ldr	r3, [pc, #16]	; (8001244 <SystemInit+0x60>)
 8001234:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001238:	609a      	str	r2, [r3, #8]
#endif
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00
 8001248:	40023800 	.word	0x40023800
 800124c:	24003010 	.word	0x24003010

08001250 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001262:	e7fe      	b.n	8001262 <HardFault_Handler+0x4>

08001264 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001268:	e7fe      	b.n	8001268 <MemManage_Handler+0x4>

0800126a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800126e:	e7fe      	b.n	800126e <BusFault_Handler+0x4>

08001270 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001274:	e7fe      	b.n	8001274 <UsageFault_Handler+0x4>

08001276 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80012a4:	f000 f84e 	bl	8001344 <HAL_IncTick>
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}

080012ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <HAL_Init+0x34>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <HAL_Init+0x34>)
 80012b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ba:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <HAL_Init+0x34>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <HAL_Init+0x34>)
 80012c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c8:	2003      	movs	r0, #3
 80012ca:	f000 f94f 	bl	800156c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ce:	200f      	movs	r0, #15
 80012d0:	f000 f808 	bl	80012e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d4:	f000 fbde 	bl	8001a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023c00 	.word	0x40023c00

080012e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_InitTick+0x54>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_InitTick+0x58>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f967 	bl	80015d6 <HAL_SYSTICK_Config>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e00e      	b.n	8001330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b0f      	cmp	r3, #15
 8001316:	d80a      	bhi.n	800132e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001318:	2200      	movs	r2, #0
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001320:	f000 f92f 	bl	8001582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001324:	4a06      	ldr	r2, [pc, #24]	; (8001340 <HAL_InitTick+0x5c>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	e000      	b.n	8001330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000010 	.word	0x20000010
 800133c:	20000018 	.word	0x20000018
 8001340:	20000014 	.word	0x20000014

08001344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x20>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_IncTick+0x24>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a04      	ldr	r2, [pc, #16]	; (8001368 <HAL_IncTick+0x24>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000018 	.word	0x20000018
 8001368:	20000090 	.word	0x20000090

0800136c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <HAL_GetTick+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000090 	.word	0x20000090

08001384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800138c:	f7ff ffee 	bl	800136c <HAL_GetTick>
 8001390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800139c:	d005      	beq.n	80013aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_Delay+0x44>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013aa:	bf00      	nop
 80013ac:	f7ff ffde 	bl	800136c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d8f7      	bhi.n	80013ac <HAL_Delay+0x28>
  {
  }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000018 	.word	0x20000018

080013cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e8:	4013      	ands	r3, r2
 80013ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fe:	4a04      	ldr	r2, [pc, #16]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	60d3      	str	r3, [r2, #12]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <__NVIC_GetPriorityGrouping+0x18>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	f003 0307 	and.w	r3, r3, #7
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	db0b      	blt.n	800145a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	f003 021f 	and.w	r2, r3, #31
 8001448:	4907      	ldr	r1, [pc, #28]	; (8001468 <__NVIC_EnableIRQ+0x38>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	095b      	lsrs	r3, r3, #5
 8001450:	2001      	movs	r0, #1
 8001452:	fa00 f202 	lsl.w	r2, r0, r2
 8001456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000e100 	.word	0xe000e100

0800146c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	db0a      	blt.n	8001496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	490c      	ldr	r1, [pc, #48]	; (80014b8 <__NVIC_SetPriority+0x4c>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	0112      	lsls	r2, r2, #4
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	440b      	add	r3, r1
 8001490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001494:	e00a      	b.n	80014ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4908      	ldr	r1, [pc, #32]	; (80014bc <__NVIC_SetPriority+0x50>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	3b04      	subs	r3, #4
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	440b      	add	r3, r1
 80014aa:	761a      	strb	r2, [r3, #24]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f1c3 0307 	rsb	r3, r3, #7
 80014da:	2b04      	cmp	r3, #4
 80014dc:	bf28      	it	cs
 80014de:	2304      	movcs	r3, #4
 80014e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3304      	adds	r3, #4
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d902      	bls.n	80014f0 <NVIC_EncodePriority+0x30>
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3b03      	subs	r3, #3
 80014ee:	e000      	b.n	80014f2 <NVIC_EncodePriority+0x32>
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	401a      	ands	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001508:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	43d9      	mvns	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	4313      	orrs	r3, r2
         );
}
 800151a:	4618      	mov	r0, r3
 800151c:	3724      	adds	r7, #36	; 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001538:	d301      	bcc.n	800153e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153a:	2301      	movs	r3, #1
 800153c:	e00f      	b.n	800155e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <SysTick_Config+0x40>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001546:	210f      	movs	r1, #15
 8001548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800154c:	f7ff ff8e 	bl	800146c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <SysTick_Config+0x40>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <SysTick_Config+0x40>)
 8001558:	2207      	movs	r2, #7
 800155a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	e000e010 	.word	0xe000e010

0800156c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff29 	bl	80013cc <__NVIC_SetPriorityGrouping>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001594:	f7ff ff3e 	bl	8001414 <__NVIC_GetPriorityGrouping>
 8001598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7ff ff8e 	bl	80014c0 <NVIC_EncodePriority>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff5d 	bl	800146c <__NVIC_SetPriority>
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff31 	bl	8001430 <__NVIC_EnableIRQ>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ffa2 	bl	8001528 <SysTick_Config>
 80015e4:	4603      	mov	r3, r0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b089      	sub	sp, #36	; 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
 800160a:	e177      	b.n	80018fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800160c:	2201      	movs	r2, #1
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	429a      	cmp	r2, r3
 8001626:	f040 8166 	bne.w	80018f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	2b01      	cmp	r3, #1
 8001634:	d005      	beq.n	8001642 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800163e:	2b02      	cmp	r3, #2
 8001640:	d130      	bne.n	80016a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	2203      	movs	r2, #3
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001678:	2201      	movs	r2, #1
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	f003 0201 	and.w	r2, r3, #1
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	d017      	beq.n	80016e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	2203      	movs	r2, #3
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d123      	bne.n	8001734 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	08da      	lsrs	r2, r3, #3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3208      	adds	r2, #8
 80016f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	220f      	movs	r2, #15
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	691a      	ldr	r2, [r3, #16]
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	08da      	lsrs	r2, r3, #3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3208      	adds	r2, #8
 800172e:	69b9      	ldr	r1, [r7, #24]
 8001730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	2203      	movs	r2, #3
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0203 	and.w	r2, r3, #3
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 80c0 	beq.w	80018f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	4b66      	ldr	r3, [pc, #408]	; (8001914 <HAL_GPIO_Init+0x324>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	4a65      	ldr	r2, [pc, #404]	; (8001914 <HAL_GPIO_Init+0x324>)
 8001780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001784:	6453      	str	r3, [r2, #68]	; 0x44
 8001786:	4b63      	ldr	r3, [pc, #396]	; (8001914 <HAL_GPIO_Init+0x324>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001792:	4a61      	ldr	r2, [pc, #388]	; (8001918 <HAL_GPIO_Init+0x328>)
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	089b      	lsrs	r3, r3, #2
 8001798:	3302      	adds	r3, #2
 800179a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	220f      	movs	r2, #15
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a58      	ldr	r2, [pc, #352]	; (800191c <HAL_GPIO_Init+0x32c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d037      	beq.n	800182e <HAL_GPIO_Init+0x23e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a57      	ldr	r2, [pc, #348]	; (8001920 <HAL_GPIO_Init+0x330>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d031      	beq.n	800182a <HAL_GPIO_Init+0x23a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a56      	ldr	r2, [pc, #344]	; (8001924 <HAL_GPIO_Init+0x334>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d02b      	beq.n	8001826 <HAL_GPIO_Init+0x236>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a55      	ldr	r2, [pc, #340]	; (8001928 <HAL_GPIO_Init+0x338>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d025      	beq.n	8001822 <HAL_GPIO_Init+0x232>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a54      	ldr	r2, [pc, #336]	; (800192c <HAL_GPIO_Init+0x33c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d01f      	beq.n	800181e <HAL_GPIO_Init+0x22e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a53      	ldr	r2, [pc, #332]	; (8001930 <HAL_GPIO_Init+0x340>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d019      	beq.n	800181a <HAL_GPIO_Init+0x22a>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a52      	ldr	r2, [pc, #328]	; (8001934 <HAL_GPIO_Init+0x344>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d013      	beq.n	8001816 <HAL_GPIO_Init+0x226>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a51      	ldr	r2, [pc, #324]	; (8001938 <HAL_GPIO_Init+0x348>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d00d      	beq.n	8001812 <HAL_GPIO_Init+0x222>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a50      	ldr	r2, [pc, #320]	; (800193c <HAL_GPIO_Init+0x34c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d007      	beq.n	800180e <HAL_GPIO_Init+0x21e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4f      	ldr	r2, [pc, #316]	; (8001940 <HAL_GPIO_Init+0x350>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d101      	bne.n	800180a <HAL_GPIO_Init+0x21a>
 8001806:	2309      	movs	r3, #9
 8001808:	e012      	b.n	8001830 <HAL_GPIO_Init+0x240>
 800180a:	230a      	movs	r3, #10
 800180c:	e010      	b.n	8001830 <HAL_GPIO_Init+0x240>
 800180e:	2308      	movs	r3, #8
 8001810:	e00e      	b.n	8001830 <HAL_GPIO_Init+0x240>
 8001812:	2307      	movs	r3, #7
 8001814:	e00c      	b.n	8001830 <HAL_GPIO_Init+0x240>
 8001816:	2306      	movs	r3, #6
 8001818:	e00a      	b.n	8001830 <HAL_GPIO_Init+0x240>
 800181a:	2305      	movs	r3, #5
 800181c:	e008      	b.n	8001830 <HAL_GPIO_Init+0x240>
 800181e:	2304      	movs	r3, #4
 8001820:	e006      	b.n	8001830 <HAL_GPIO_Init+0x240>
 8001822:	2303      	movs	r3, #3
 8001824:	e004      	b.n	8001830 <HAL_GPIO_Init+0x240>
 8001826:	2302      	movs	r3, #2
 8001828:	e002      	b.n	8001830 <HAL_GPIO_Init+0x240>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <HAL_GPIO_Init+0x240>
 800182e:	2300      	movs	r3, #0
 8001830:	69fa      	ldr	r2, [r7, #28]
 8001832:	f002 0203 	and.w	r2, r2, #3
 8001836:	0092      	lsls	r2, r2, #2
 8001838:	4093      	lsls	r3, r2
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001840:	4935      	ldr	r1, [pc, #212]	; (8001918 <HAL_GPIO_Init+0x328>)
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	089b      	lsrs	r3, r3, #2
 8001846:	3302      	adds	r3, #2
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800184e:	4b3d      	ldr	r3, [pc, #244]	; (8001944 <HAL_GPIO_Init+0x354>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001872:	4a34      	ldr	r2, [pc, #208]	; (8001944 <HAL_GPIO_Init+0x354>)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001878:	4b32      	ldr	r3, [pc, #200]	; (8001944 <HAL_GPIO_Init+0x354>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800189c:	4a29      	ldr	r2, [pc, #164]	; (8001944 <HAL_GPIO_Init+0x354>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018a2:	4b28      	ldr	r3, [pc, #160]	; (8001944 <HAL_GPIO_Init+0x354>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018c6:	4a1f      	ldr	r2, [pc, #124]	; (8001944 <HAL_GPIO_Init+0x354>)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018cc:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <HAL_GPIO_Init+0x354>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018f0:	4a14      	ldr	r2, [pc, #80]	; (8001944 <HAL_GPIO_Init+0x354>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3301      	adds	r3, #1
 80018fa:	61fb      	str	r3, [r7, #28]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	2b0f      	cmp	r3, #15
 8001900:	f67f ae84 	bls.w	800160c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800
 8001918:	40013800 	.word	0x40013800
 800191c:	40020000 	.word	0x40020000
 8001920:	40020400 	.word	0x40020400
 8001924:	40020800 	.word	0x40020800
 8001928:	40020c00 	.word	0x40020c00
 800192c:	40021000 	.word	0x40021000
 8001930:	40021400 	.word	0x40021400
 8001934:	40021800 	.word	0x40021800
 8001938:	40021c00 	.word	0x40021c00
 800193c:	40022000 	.word	0x40022000
 8001940:	40022400 	.word	0x40022400
 8001944:	40013c00 	.word	0x40013c00

08001948 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691a      	ldr	r2, [r3, #16]
 8001958:	887b      	ldrh	r3, [r7, #2]
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d002      	beq.n	8001966 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001960:	2301      	movs	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
 8001964:	e001      	b.n	800196a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001966:	2300      	movs	r3, #0
 8001968:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800196a:	7bfb      	ldrb	r3, [r7, #15]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	807b      	strh	r3, [r7, #2]
 8001984:	4613      	mov	r3, r2
 8001986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001988:	787b      	ldrb	r3, [r7, #1]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198e:	887a      	ldrh	r2, [r7, #2]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001994:	e003      	b.n	800199e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001996:	887b      	ldrh	r3, [r7, #2]
 8001998:	041a      	lsls	r2, r3, #16
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	619a      	str	r2, [r3, #24]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 80019b4:	2300      	movs	r3, #0
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <HAL_UART_MspInit+0x9c>)
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	4a22      	ldr	r2, [pc, #136]	; (8001a48 <HAL_UART_MspInit+0x9c>)
 80019be:	f043 0308 	orr.w	r3, r3, #8
 80019c2:	6313      	str	r3, [r2, #48]	; 0x30
 80019c4:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <HAL_UART_MspInit+0x9c>)
 80019c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c8:	f003 0308 	and.w	r3, r3, #8
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <HAL_UART_MspInit+0x9c>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	4a1b      	ldr	r2, [pc, #108]	; (8001a48 <HAL_UART_MspInit+0x9c>)
 80019da:	f043 0308 	orr.w	r3, r3, #8
 80019de:	6313      	str	r3, [r2, #48]	; 0x30
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_UART_MspInit+0x9c>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_UART_MspInit+0x9c>)
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <HAL_UART_MspInit+0x9c>)
 80019f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019fa:	6413      	str	r3, [r2, #64]	; 0x40
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_UART_MspInit+0x9c>)
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8001a08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001a12:	2301      	movs	r3, #1
 8001a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a16:	2303      	movs	r3, #3
 8001a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001a1a:	2307      	movs	r3, #7
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	4619      	mov	r1, r3
 8001a24:	4809      	ldr	r0, [pc, #36]	; (8001a4c <HAL_UART_MspInit+0xa0>)
 8001a26:	f7ff fde3 	bl	80015f0 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001a2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8001a30:	2307      	movs	r3, #7
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4804      	ldr	r0, [pc, #16]	; (8001a4c <HAL_UART_MspInit+0xa0>)
 8001a3c:	f7ff fdd8 	bl	80015f0 <HAL_GPIO_Init>
}
 8001a40:	bf00      	nop
 8001a42:	3728      	adds	r7, #40	; 0x28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40020c00 	.word	0x40020c00

08001a50 <HAL_TIM_Base_MspInit>:
* @retval None
*/


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)	//todo: agregado por agrosso
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <HAL_TIM_Base_MspInit+0x3c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d10d      	bne.n	8001a7e <HAL_TIM_Base_MspInit+0x2e>
  {
    // Peripheral clock enable
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <HAL_TIM_Base_MspInit+0x40>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <HAL_TIM_Base_MspInit+0x40>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6453      	str	r3, [r2, #68]	; 0x44
 8001a72:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <HAL_TIM_Base_MspInit+0x40>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
  }

}
 8001a7e:	bf00      	nop
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40010000 	.word	0x40010000
 8001a90:	40023800 	.word	0x40023800

08001a94 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0

}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	603b      	str	r3, [r7, #0]
 8001ab2:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a1f      	ldr	r2, [pc, #124]	; (8001b34 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001aca:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <HAL_PWREx_EnableOverDrive+0x94>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ad0:	f7ff fc4c 	bl	800136c <HAL_GetTick>
 8001ad4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ad6:	e009      	b.n	8001aec <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ad8:	f7ff fc48 	bl	800136c <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ae6:	d901      	bls.n	8001aec <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e01f      	b.n	8001b2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_PWREx_EnableOverDrive+0x98>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af8:	d1ee      	bne.n	8001ad8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b00:	f7ff fc34 	bl	800136c <HAL_GetTick>
 8001b04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b06:	e009      	b.n	8001b1c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b08:	f7ff fc30 	bl	800136c <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b16:	d901      	bls.n	8001b1c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e007      	b.n	8001b2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b1c:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <HAL_PWREx_EnableOverDrive+0x98>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b28:	d1ee      	bne.n	8001b08 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40023800 	.word	0x40023800
 8001b38:	420e0040 	.word	0x420e0040
 8001b3c:	40007000 	.word	0x40007000
 8001b40:	420e0044 	.word	0x420e0044

08001b44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e267      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d075      	beq.n	8001c4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b62:	4b88      	ldr	r3, [pc, #544]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d00c      	beq.n	8001b88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b6e:	4b85      	ldr	r3, [pc, #532]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d112      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b7a:	4b82      	ldr	r3, [pc, #520]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b86:	d10b      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b88:	4b7e      	ldr	r3, [pc, #504]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d05b      	beq.n	8001c4c <HAL_RCC_OscConfig+0x108>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d157      	bne.n	8001c4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e242      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba8:	d106      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x74>
 8001baa:	4b76      	ldr	r3, [pc, #472]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a75      	ldr	r2, [pc, #468]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e01d      	b.n	8001bf4 <HAL_RCC_OscConfig+0xb0>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc0:	d10c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x98>
 8001bc2:	4b70      	ldr	r3, [pc, #448]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a6f      	ldr	r2, [pc, #444]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	4b6d      	ldr	r3, [pc, #436]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a6c      	ldr	r2, [pc, #432]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e00b      	b.n	8001bf4 <HAL_RCC_OscConfig+0xb0>
 8001bdc:	4b69      	ldr	r3, [pc, #420]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a68      	ldr	r2, [pc, #416]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b66      	ldr	r3, [pc, #408]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a65      	ldr	r2, [pc, #404]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d013      	beq.n	8001c24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fbb6 	bl	800136c <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff fbb2 	bl	800136c <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	; 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e207      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	4b5b      	ldr	r3, [pc, #364]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0xc0>
 8001c22:	e014      	b.n	8001c4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7ff fba2 	bl	800136c <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c2c:	f7ff fb9e 	bl	800136c <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b64      	cmp	r3, #100	; 0x64
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e1f3      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3e:	4b51      	ldr	r3, [pc, #324]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0xe8>
 8001c4a:	e000      	b.n	8001c4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d063      	beq.n	8001d22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c5a:	4b4a      	ldr	r3, [pc, #296]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00b      	beq.n	8001c7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c66:	4b47      	ldr	r3, [pc, #284]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d11c      	bne.n	8001cac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c72:	4b44      	ldr	r3, [pc, #272]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d116      	bne.n	8001cac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7e:	4b41      	ldr	r3, [pc, #260]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_RCC_OscConfig+0x152>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d001      	beq.n	8001c96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e1c7      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c96:	4b3b      	ldr	r3, [pc, #236]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4937      	ldr	r1, [pc, #220]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001caa:	e03a      	b.n	8001d22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d020      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb4:	4b34      	ldr	r3, [pc, #208]	; (8001d88 <HAL_RCC_OscConfig+0x244>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cba:	f7ff fb57 	bl	800136c <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc2:	f7ff fb53 	bl	800136c <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e1a8      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd4:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce0:	4b28      	ldr	r3, [pc, #160]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4925      	ldr	r1, [pc, #148]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	600b      	str	r3, [r1, #0]
 8001cf4:	e015      	b.n	8001d22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cf6:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <HAL_RCC_OscConfig+0x244>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fb36 	bl	800136c <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d04:	f7ff fb32 	bl	800136c <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e187      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d16:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d036      	beq.n	8001d9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d016      	beq.n	8001d64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_RCC_OscConfig+0x248>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3c:	f7ff fb16 	bl	800136c <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d44:	f7ff fb12 	bl	800136c <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e167      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x200>
 8001d62:	e01b      	b.n	8001d9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <HAL_RCC_OscConfig+0x248>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6a:	f7ff faff 	bl	800136c <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d70:	e00e      	b.n	8001d90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d72:	f7ff fafb 	bl	800136c <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d907      	bls.n	8001d90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e150      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
 8001d84:	40023800 	.word	0x40023800
 8001d88:	42470000 	.word	0x42470000
 8001d8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d90:	4b88      	ldr	r3, [pc, #544]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1ea      	bne.n	8001d72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 8097 	beq.w	8001ed8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dae:	4b81      	ldr	r3, [pc, #516]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10f      	bne.n	8001dda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	4b7d      	ldr	r3, [pc, #500]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	4a7c      	ldr	r2, [pc, #496]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dca:	4b7a      	ldr	r3, [pc, #488]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dda:	4b77      	ldr	r3, [pc, #476]	; (8001fb8 <HAL_RCC_OscConfig+0x474>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d118      	bne.n	8001e18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001de6:	4b74      	ldr	r3, [pc, #464]	; (8001fb8 <HAL_RCC_OscConfig+0x474>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a73      	ldr	r2, [pc, #460]	; (8001fb8 <HAL_RCC_OscConfig+0x474>)
 8001dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df2:	f7ff fabb 	bl	800136c <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dfa:	f7ff fab7 	bl	800136c <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e10c      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0c:	4b6a      	ldr	r3, [pc, #424]	; (8001fb8 <HAL_RCC_OscConfig+0x474>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d106      	bne.n	8001e2e <HAL_RCC_OscConfig+0x2ea>
 8001e20:	4b64      	ldr	r3, [pc, #400]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e24:	4a63      	ldr	r2, [pc, #396]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e2c:	e01c      	b.n	8001e68 <HAL_RCC_OscConfig+0x324>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b05      	cmp	r3, #5
 8001e34:	d10c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x30c>
 8001e36:	4b5f      	ldr	r3, [pc, #380]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3a:	4a5e      	ldr	r2, [pc, #376]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	6713      	str	r3, [r2, #112]	; 0x70
 8001e42:	4b5c      	ldr	r3, [pc, #368]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e46:	4a5b      	ldr	r2, [pc, #364]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4e:	e00b      	b.n	8001e68 <HAL_RCC_OscConfig+0x324>
 8001e50:	4b58      	ldr	r3, [pc, #352]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e54:	4a57      	ldr	r2, [pc, #348]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e56:	f023 0301 	bic.w	r3, r3, #1
 8001e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e5c:	4b55      	ldr	r3, [pc, #340]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e60:	4a54      	ldr	r2, [pc, #336]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e62:	f023 0304 	bic.w	r3, r3, #4
 8001e66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d015      	beq.n	8001e9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e70:	f7ff fa7c 	bl	800136c <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e78:	f7ff fa78 	bl	800136c <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e0cb      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8e:	4b49      	ldr	r3, [pc, #292]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0ee      	beq.n	8001e78 <HAL_RCC_OscConfig+0x334>
 8001e9a:	e014      	b.n	8001ec6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9c:	f7ff fa66 	bl	800136c <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea2:	e00a      	b.n	8001eba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea4:	f7ff fa62 	bl	800136c <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e0b5      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eba:	4b3e      	ldr	r3, [pc, #248]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1ee      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d105      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ecc:	4b39      	ldr	r3, [pc, #228]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	4a38      	ldr	r2, [pc, #224]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80a1 	beq.w	8002024 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ee2:	4b34      	ldr	r3, [pc, #208]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d05c      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d141      	bne.n	8001f7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef6:	4b31      	ldr	r3, [pc, #196]	; (8001fbc <HAL_RCC_OscConfig+0x478>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff fa36 	bl	800136c <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f04:	f7ff fa32 	bl	800136c <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e087      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f16:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69da      	ldr	r2, [r3, #28]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	019b      	lsls	r3, r3, #6
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f38:	085b      	lsrs	r3, r3, #1
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	041b      	lsls	r3, r3, #16
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f44:	061b      	lsls	r3, r3, #24
 8001f46:	491b      	ldr	r1, [pc, #108]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <HAL_RCC_OscConfig+0x478>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7ff fa0b 	bl	800136c <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f5a:	f7ff fa07 	bl	800136c <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e05c      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6c:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x416>
 8001f78:	e054      	b.n	8002024 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <HAL_RCC_OscConfig+0x478>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7ff f9f4 	bl	800136c <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f88:	f7ff f9f0 	bl	800136c <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e045      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x444>
 8001fa6:	e03d      	b.n	8002024 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e038      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40007000 	.word	0x40007000
 8001fbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_RCC_OscConfig+0x4ec>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d028      	beq.n	8002020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d121      	bne.n	8002020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d11a      	bne.n	8002020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ff6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d111      	bne.n	8002020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002006:	085b      	lsrs	r3, r3, #1
 8002008:	3b01      	subs	r3, #1
 800200a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800200c:	429a      	cmp	r2, r3
 800200e:	d107      	bne.n	8002020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800201c:	429a      	cmp	r2, r3
 800201e:	d001      	beq.n	8002024 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800

08002034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0cc      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002048:	4b68      	ldr	r3, [pc, #416]	; (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d90c      	bls.n	8002070 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b65      	ldr	r3, [pc, #404]	; (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800205e:	4b63      	ldr	r3, [pc, #396]	; (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d001      	beq.n	8002070 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0b8      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d020      	beq.n	80020be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002088:	4b59      	ldr	r3, [pc, #356]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4a58      	ldr	r2, [pc, #352]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002092:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020a0:	4b53      	ldr	r3, [pc, #332]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	4a52      	ldr	r2, [pc, #328]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ac:	4b50      	ldr	r3, [pc, #320]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	494d      	ldr	r1, [pc, #308]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d044      	beq.n	8002154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d107      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	4b47      	ldr	r3, [pc, #284]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d119      	bne.n	8002112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e07f      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d003      	beq.n	80020f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d107      	bne.n	8002102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f2:	4b3f      	ldr	r3, [pc, #252]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e06f      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002102:	4b3b      	ldr	r3, [pc, #236]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e067      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002112:	4b37      	ldr	r3, [pc, #220]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f023 0203 	bic.w	r2, r3, #3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	4934      	ldr	r1, [pc, #208]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	4313      	orrs	r3, r2
 8002122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002124:	f7ff f922 	bl	800136c <HAL_GetTick>
 8002128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212a:	e00a      	b.n	8002142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800212c:	f7ff f91e 	bl	800136c <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	; 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e04f      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002142:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 020c 	and.w	r2, r3, #12
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	429a      	cmp	r2, r3
 8002152:	d1eb      	bne.n	800212c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002154:	4b25      	ldr	r3, [pc, #148]	; (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d20c      	bcs.n	800217c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b22      	ldr	r3, [pc, #136]	; (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	4b20      	ldr	r3, [pc, #128]	; (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e032      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d008      	beq.n	800219a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002188:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4916      	ldr	r1, [pc, #88]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	4313      	orrs	r3, r2
 8002198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d009      	beq.n	80021ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021a6:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	490e      	ldr	r1, [pc, #56]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ba:	f000 f821 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 80021be:	4602      	mov	r2, r0
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	490a      	ldr	r1, [pc, #40]	; (80021f4 <HAL_RCC_ClockConfig+0x1c0>)
 80021cc:	5ccb      	ldrb	r3, [r1, r3]
 80021ce:	fa22 f303 	lsr.w	r3, r2, r3
 80021d2:	4a09      	ldr	r2, [pc, #36]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <HAL_RCC_ClockConfig+0x1c8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff f882 	bl	80012e4 <HAL_InitTick>

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023c00 	.word	0x40023c00
 80021f0:	40023800 	.word	0x40023800
 80021f4:	08003df8 	.word	0x08003df8
 80021f8:	20000010 	.word	0x20000010
 80021fc:	20000014 	.word	0x20000014

08002200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002204:	b094      	sub	sp, #80	; 0x50
 8002206:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	647b      	str	r3, [r7, #68]	; 0x44
 800220c:	2300      	movs	r3, #0
 800220e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002210:	2300      	movs	r3, #0
 8002212:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002218:	4b79      	ldr	r3, [pc, #484]	; (8002400 <HAL_RCC_GetSysClockFreq+0x200>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 030c 	and.w	r3, r3, #12
 8002220:	2b08      	cmp	r3, #8
 8002222:	d00d      	beq.n	8002240 <HAL_RCC_GetSysClockFreq+0x40>
 8002224:	2b08      	cmp	r3, #8
 8002226:	f200 80e1 	bhi.w	80023ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x34>
 800222e:	2b04      	cmp	r3, #4
 8002230:	d003      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0x3a>
 8002232:	e0db      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002234:	4b73      	ldr	r3, [pc, #460]	; (8002404 <HAL_RCC_GetSysClockFreq+0x204>)
 8002236:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002238:	e0db      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800223a:	4b73      	ldr	r3, [pc, #460]	; (8002408 <HAL_RCC_GetSysClockFreq+0x208>)
 800223c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800223e:	e0d8      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002240:	4b6f      	ldr	r3, [pc, #444]	; (8002400 <HAL_RCC_GetSysClockFreq+0x200>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002248:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800224a:	4b6d      	ldr	r3, [pc, #436]	; (8002400 <HAL_RCC_GetSysClockFreq+0x200>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d063      	beq.n	800231e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002256:	4b6a      	ldr	r3, [pc, #424]	; (8002400 <HAL_RCC_GetSysClockFreq+0x200>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	099b      	lsrs	r3, r3, #6
 800225c:	2200      	movs	r2, #0
 800225e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002260:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002268:	633b      	str	r3, [r7, #48]	; 0x30
 800226a:	2300      	movs	r3, #0
 800226c:	637b      	str	r3, [r7, #52]	; 0x34
 800226e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002272:	4622      	mov	r2, r4
 8002274:	462b      	mov	r3, r5
 8002276:	f04f 0000 	mov.w	r0, #0
 800227a:	f04f 0100 	mov.w	r1, #0
 800227e:	0159      	lsls	r1, r3, #5
 8002280:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002284:	0150      	lsls	r0, r2, #5
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4621      	mov	r1, r4
 800228c:	1a51      	subs	r1, r2, r1
 800228e:	6139      	str	r1, [r7, #16]
 8002290:	4629      	mov	r1, r5
 8002292:	eb63 0301 	sbc.w	r3, r3, r1
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022a4:	4659      	mov	r1, fp
 80022a6:	018b      	lsls	r3, r1, #6
 80022a8:	4651      	mov	r1, sl
 80022aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022ae:	4651      	mov	r1, sl
 80022b0:	018a      	lsls	r2, r1, #6
 80022b2:	4651      	mov	r1, sl
 80022b4:	ebb2 0801 	subs.w	r8, r2, r1
 80022b8:	4659      	mov	r1, fp
 80022ba:	eb63 0901 	sbc.w	r9, r3, r1
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	f04f 0300 	mov.w	r3, #0
 80022c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022d2:	4690      	mov	r8, r2
 80022d4:	4699      	mov	r9, r3
 80022d6:	4623      	mov	r3, r4
 80022d8:	eb18 0303 	adds.w	r3, r8, r3
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	462b      	mov	r3, r5
 80022e0:	eb49 0303 	adc.w	r3, r9, r3
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022f2:	4629      	mov	r1, r5
 80022f4:	024b      	lsls	r3, r1, #9
 80022f6:	4621      	mov	r1, r4
 80022f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022fc:	4621      	mov	r1, r4
 80022fe:	024a      	lsls	r2, r1, #9
 8002300:	4610      	mov	r0, r2
 8002302:	4619      	mov	r1, r3
 8002304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002306:	2200      	movs	r2, #0
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
 800230a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800230c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002310:	f7fe fbf2 	bl	8000af8 <__aeabi_uldivmod>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4613      	mov	r3, r2
 800231a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800231c:	e058      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800231e:	4b38      	ldr	r3, [pc, #224]	; (8002400 <HAL_RCC_GetSysClockFreq+0x200>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	099b      	lsrs	r3, r3, #6
 8002324:	2200      	movs	r2, #0
 8002326:	4618      	mov	r0, r3
 8002328:	4611      	mov	r1, r2
 800232a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800232e:	623b      	str	r3, [r7, #32]
 8002330:	2300      	movs	r3, #0
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
 8002334:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002338:	4642      	mov	r2, r8
 800233a:	464b      	mov	r3, r9
 800233c:	f04f 0000 	mov.w	r0, #0
 8002340:	f04f 0100 	mov.w	r1, #0
 8002344:	0159      	lsls	r1, r3, #5
 8002346:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800234a:	0150      	lsls	r0, r2, #5
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4641      	mov	r1, r8
 8002352:	ebb2 0a01 	subs.w	sl, r2, r1
 8002356:	4649      	mov	r1, r9
 8002358:	eb63 0b01 	sbc.w	fp, r3, r1
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002368:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800236c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002370:	ebb2 040a 	subs.w	r4, r2, sl
 8002374:	eb63 050b 	sbc.w	r5, r3, fp
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	00eb      	lsls	r3, r5, #3
 8002382:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002386:	00e2      	lsls	r2, r4, #3
 8002388:	4614      	mov	r4, r2
 800238a:	461d      	mov	r5, r3
 800238c:	4643      	mov	r3, r8
 800238e:	18e3      	adds	r3, r4, r3
 8002390:	603b      	str	r3, [r7, #0]
 8002392:	464b      	mov	r3, r9
 8002394:	eb45 0303 	adc.w	r3, r5, r3
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023a6:	4629      	mov	r1, r5
 80023a8:	028b      	lsls	r3, r1, #10
 80023aa:	4621      	mov	r1, r4
 80023ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023b0:	4621      	mov	r1, r4
 80023b2:	028a      	lsls	r2, r1, #10
 80023b4:	4610      	mov	r0, r2
 80023b6:	4619      	mov	r1, r3
 80023b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ba:	2200      	movs	r2, #0
 80023bc:	61bb      	str	r3, [r7, #24]
 80023be:	61fa      	str	r2, [r7, #28]
 80023c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023c4:	f7fe fb98 	bl	8000af8 <__aeabi_uldivmod>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4613      	mov	r3, r2
 80023ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <HAL_RCC_GetSysClockFreq+0x200>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	0c1b      	lsrs	r3, r3, #16
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	3301      	adds	r3, #1
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80023e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023ea:	e002      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <HAL_RCC_GetSysClockFreq+0x204>)
 80023ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3750      	adds	r7, #80	; 0x50
 80023f8:	46bd      	mov	sp, r7
 80023fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023fe:	bf00      	nop
 8002400:	40023800 	.word	0x40023800
 8002404:	00f42400 	.word	0x00f42400
 8002408:	007a1200 	.word	0x007a1200

0800240c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <HAL_RCC_GetHCLKFreq+0x14>)
 8002412:	681b      	ldr	r3, [r3, #0]
}
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000010 	.word	0x20000010

08002424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002428:	f7ff fff0 	bl	800240c <HAL_RCC_GetHCLKFreq>
 800242c:	4602      	mov	r2, r0
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	0a9b      	lsrs	r3, r3, #10
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	4903      	ldr	r1, [pc, #12]	; (8002448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800243a:	5ccb      	ldrb	r3, [r1, r3]
 800243c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002440:	4618      	mov	r0, r3
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40023800 	.word	0x40023800
 8002448:	08003e08 	.word	0x08003e08

0800244c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002450:	f7ff ffdc 	bl	800240c <HAL_RCC_GetHCLKFreq>
 8002454:	4602      	mov	r2, r0
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	0b5b      	lsrs	r3, r3, #13
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	4903      	ldr	r1, [pc, #12]	; (8002470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002462:	5ccb      	ldrb	r3, [r1, r3]
 8002464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002468:	4618      	mov	r0, r3
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40023800 	.word	0x40023800
 8002470:	08003e08 	.word	0x08003e08

08002474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e041      	b.n	800250a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d106      	bne.n	80024a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff fad8 	bl	8001a50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3304      	adds	r3, #4
 80024b0:	4619      	mov	r1, r3
 80024b2:	4610      	mov	r0, r2
 80024b4:	f000 f95e 	bl	8002774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b01      	cmp	r3, #1
 8002526:	d001      	beq.n	800252c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e046      	b.n	80025ba <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a23      	ldr	r2, [pc, #140]	; (80025c8 <HAL_TIM_Base_Start+0xb4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d022      	beq.n	8002584 <HAL_TIM_Base_Start+0x70>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002546:	d01d      	beq.n	8002584 <HAL_TIM_Base_Start+0x70>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a1f      	ldr	r2, [pc, #124]	; (80025cc <HAL_TIM_Base_Start+0xb8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d018      	beq.n	8002584 <HAL_TIM_Base_Start+0x70>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1e      	ldr	r2, [pc, #120]	; (80025d0 <HAL_TIM_Base_Start+0xbc>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d013      	beq.n	8002584 <HAL_TIM_Base_Start+0x70>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a1c      	ldr	r2, [pc, #112]	; (80025d4 <HAL_TIM_Base_Start+0xc0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d00e      	beq.n	8002584 <HAL_TIM_Base_Start+0x70>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a1b      	ldr	r2, [pc, #108]	; (80025d8 <HAL_TIM_Base_Start+0xc4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d009      	beq.n	8002584 <HAL_TIM_Base_Start+0x70>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a19      	ldr	r2, [pc, #100]	; (80025dc <HAL_TIM_Base_Start+0xc8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d004      	beq.n	8002584 <HAL_TIM_Base_Start+0x70>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a18      	ldr	r2, [pc, #96]	; (80025e0 <HAL_TIM_Base_Start+0xcc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d111      	bne.n	80025a8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b06      	cmp	r3, #6
 8002594:	d010      	beq.n	80025b8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 0201 	orr.w	r2, r2, #1
 80025a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a6:	e007      	b.n	80025b8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40010000 	.word	0x40010000
 80025cc:	40000400 	.word	0x40000400
 80025d0:	40000800 	.word	0x40000800
 80025d4:	40000c00 	.word	0x40000c00
 80025d8:	40010400 	.word	0x40010400
 80025dc:	40014000 	.word	0x40014000
 80025e0:	40001800 	.word	0x40001800

080025e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_TIM_ConfigClockSource+0x1c>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e0b4      	b.n	800276a <HAL_TIM_ConfigClockSource+0x186>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800261e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002626:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002638:	d03e      	beq.n	80026b8 <HAL_TIM_ConfigClockSource+0xd4>
 800263a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800263e:	f200 8087 	bhi.w	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002646:	f000 8086 	beq.w	8002756 <HAL_TIM_ConfigClockSource+0x172>
 800264a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800264e:	d87f      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002650:	2b70      	cmp	r3, #112	; 0x70
 8002652:	d01a      	beq.n	800268a <HAL_TIM_ConfigClockSource+0xa6>
 8002654:	2b70      	cmp	r3, #112	; 0x70
 8002656:	d87b      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002658:	2b60      	cmp	r3, #96	; 0x60
 800265a:	d050      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0x11a>
 800265c:	2b60      	cmp	r3, #96	; 0x60
 800265e:	d877      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002660:	2b50      	cmp	r3, #80	; 0x50
 8002662:	d03c      	beq.n	80026de <HAL_TIM_ConfigClockSource+0xfa>
 8002664:	2b50      	cmp	r3, #80	; 0x50
 8002666:	d873      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002668:	2b40      	cmp	r3, #64	; 0x40
 800266a:	d058      	beq.n	800271e <HAL_TIM_ConfigClockSource+0x13a>
 800266c:	2b40      	cmp	r3, #64	; 0x40
 800266e:	d86f      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002670:	2b30      	cmp	r3, #48	; 0x30
 8002672:	d064      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x15a>
 8002674:	2b30      	cmp	r3, #48	; 0x30
 8002676:	d86b      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002678:	2b20      	cmp	r3, #32
 800267a:	d060      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x15a>
 800267c:	2b20      	cmp	r3, #32
 800267e:	d867      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002680:	2b00      	cmp	r3, #0
 8002682:	d05c      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x15a>
 8002684:	2b10      	cmp	r3, #16
 8002686:	d05a      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x15a>
 8002688:	e062      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6899      	ldr	r1, [r3, #8]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f000 f985 	bl	80029a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	609a      	str	r2, [r3, #8]
      break;
 80026b6:	e04f      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	6899      	ldr	r1, [r3, #8]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f000 f96e 	bl	80029a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026da:	609a      	str	r2, [r3, #8]
      break;
 80026dc:	e03c      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	6859      	ldr	r1, [r3, #4]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	461a      	mov	r2, r3
 80026ec:	f000 f8e2 	bl	80028b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2150      	movs	r1, #80	; 0x50
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f93b 	bl	8002972 <TIM_ITRx_SetConfig>
      break;
 80026fc:	e02c      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6859      	ldr	r1, [r3, #4]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	461a      	mov	r2, r3
 800270c:	f000 f901 	bl	8002912 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2160      	movs	r1, #96	; 0x60
 8002716:	4618      	mov	r0, r3
 8002718:	f000 f92b 	bl	8002972 <TIM_ITRx_SetConfig>
      break;
 800271c:	e01c      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6859      	ldr	r1, [r3, #4]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	461a      	mov	r2, r3
 800272c:	f000 f8c2 	bl	80028b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2140      	movs	r1, #64	; 0x40
 8002736:	4618      	mov	r0, r3
 8002738:	f000 f91b 	bl	8002972 <TIM_ITRx_SetConfig>
      break;
 800273c:	e00c      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4619      	mov	r1, r3
 8002748:	4610      	mov	r0, r2
 800274a:	f000 f912 	bl	8002972 <TIM_ITRx_SetConfig>
      break;
 800274e:	e003      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
      break;
 8002754:	e000      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002756:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002768:	7bfb      	ldrb	r3, [r7, #15]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a40      	ldr	r2, [pc, #256]	; (8002888 <TIM_Base_SetConfig+0x114>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d013      	beq.n	80027b4 <TIM_Base_SetConfig+0x40>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002792:	d00f      	beq.n	80027b4 <TIM_Base_SetConfig+0x40>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a3d      	ldr	r2, [pc, #244]	; (800288c <TIM_Base_SetConfig+0x118>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00b      	beq.n	80027b4 <TIM_Base_SetConfig+0x40>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a3c      	ldr	r2, [pc, #240]	; (8002890 <TIM_Base_SetConfig+0x11c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d007      	beq.n	80027b4 <TIM_Base_SetConfig+0x40>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a3b      	ldr	r2, [pc, #236]	; (8002894 <TIM_Base_SetConfig+0x120>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d003      	beq.n	80027b4 <TIM_Base_SetConfig+0x40>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a3a      	ldr	r2, [pc, #232]	; (8002898 <TIM_Base_SetConfig+0x124>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d108      	bne.n	80027c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a2f      	ldr	r2, [pc, #188]	; (8002888 <TIM_Base_SetConfig+0x114>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d02b      	beq.n	8002826 <TIM_Base_SetConfig+0xb2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d4:	d027      	beq.n	8002826 <TIM_Base_SetConfig+0xb2>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a2c      	ldr	r2, [pc, #176]	; (800288c <TIM_Base_SetConfig+0x118>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d023      	beq.n	8002826 <TIM_Base_SetConfig+0xb2>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a2b      	ldr	r2, [pc, #172]	; (8002890 <TIM_Base_SetConfig+0x11c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d01f      	beq.n	8002826 <TIM_Base_SetConfig+0xb2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a2a      	ldr	r2, [pc, #168]	; (8002894 <TIM_Base_SetConfig+0x120>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d01b      	beq.n	8002826 <TIM_Base_SetConfig+0xb2>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a29      	ldr	r2, [pc, #164]	; (8002898 <TIM_Base_SetConfig+0x124>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d017      	beq.n	8002826 <TIM_Base_SetConfig+0xb2>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a28      	ldr	r2, [pc, #160]	; (800289c <TIM_Base_SetConfig+0x128>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <TIM_Base_SetConfig+0xb2>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a27      	ldr	r2, [pc, #156]	; (80028a0 <TIM_Base_SetConfig+0x12c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d00f      	beq.n	8002826 <TIM_Base_SetConfig+0xb2>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a26      	ldr	r2, [pc, #152]	; (80028a4 <TIM_Base_SetConfig+0x130>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d00b      	beq.n	8002826 <TIM_Base_SetConfig+0xb2>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a25      	ldr	r2, [pc, #148]	; (80028a8 <TIM_Base_SetConfig+0x134>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d007      	beq.n	8002826 <TIM_Base_SetConfig+0xb2>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a24      	ldr	r2, [pc, #144]	; (80028ac <TIM_Base_SetConfig+0x138>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d003      	beq.n	8002826 <TIM_Base_SetConfig+0xb2>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a23      	ldr	r2, [pc, #140]	; (80028b0 <TIM_Base_SetConfig+0x13c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d108      	bne.n	8002838 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800282c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	4313      	orrs	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <TIM_Base_SetConfig+0x114>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d003      	beq.n	800286c <TIM_Base_SetConfig+0xf8>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a0c      	ldr	r2, [pc, #48]	; (8002898 <TIM_Base_SetConfig+0x124>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d103      	bne.n	8002874 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	615a      	str	r2, [r3, #20]
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40010000 	.word	0x40010000
 800288c:	40000400 	.word	0x40000400
 8002890:	40000800 	.word	0x40000800
 8002894:	40000c00 	.word	0x40000c00
 8002898:	40010400 	.word	0x40010400
 800289c:	40014000 	.word	0x40014000
 80028a0:	40014400 	.word	0x40014400
 80028a4:	40014800 	.word	0x40014800
 80028a8:	40001800 	.word	0x40001800
 80028ac:	40001c00 	.word	0x40001c00
 80028b0:	40002000 	.word	0x40002000

080028b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	f023 0201 	bic.w	r2, r3, #1
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f023 030a 	bic.w	r3, r3, #10
 80028f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	621a      	str	r2, [r3, #32]
}
 8002906:	bf00      	nop
 8002908:	371c      	adds	r7, #28
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002912:	b480      	push	{r7}
 8002914:	b087      	sub	sp, #28
 8002916:	af00      	add	r7, sp, #0
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	f023 0210 	bic.w	r2, r3, #16
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800293c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	031b      	lsls	r3, r3, #12
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800294e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	621a      	str	r2, [r3, #32]
}
 8002966:	bf00      	nop
 8002968:	371c      	adds	r7, #28
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002972:	b480      	push	{r7}
 8002974:	b085      	sub	sp, #20
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002988:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	f043 0307 	orr.w	r3, r3, #7
 8002994:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	609a      	str	r2, [r3, #8]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	021a      	lsls	r2, r3, #8
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	431a      	orrs	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	609a      	str	r2, [r3, #8]
}
 80029dc:	bf00      	nop
 80029de:	371c      	adds	r7, #28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e05a      	b.n	8002ab6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a21      	ldr	r2, [pc, #132]	; (8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d022      	beq.n	8002a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4c:	d01d      	beq.n	8002a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1d      	ldr	r2, [pc, #116]	; (8002ac8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d018      	beq.n	8002a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a1b      	ldr	r2, [pc, #108]	; (8002acc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d013      	beq.n	8002a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a1a      	ldr	r2, [pc, #104]	; (8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d00e      	beq.n	8002a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a18      	ldr	r2, [pc, #96]	; (8002ad4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d009      	beq.n	8002a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a17      	ldr	r2, [pc, #92]	; (8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d004      	beq.n	8002a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a15      	ldr	r2, [pc, #84]	; (8002adc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d10c      	bne.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40010000 	.word	0x40010000
 8002ac8:	40000400 	.word	0x40000400
 8002acc:	40000800 	.word	0x40000800
 8002ad0:	40000c00 	.word	0x40000c00
 8002ad4:	40010400 	.word	0x40010400
 8002ad8:	40014000 	.word	0x40014000
 8002adc:	40001800 	.word	0x40001800

08002ae0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e03f      	b.n	8002b72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d106      	bne.n	8002b0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7fe ff50 	bl	80019ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2224      	movs	r2, #36	; 0x24
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f929 	bl	8002d7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	691a      	ldr	r2, [r3, #16]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b08a      	sub	sp, #40	; 0x28
 8002b7e:	af02      	add	r7, sp, #8
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	603b      	str	r3, [r7, #0]
 8002b86:	4613      	mov	r3, r2
 8002b88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b20      	cmp	r3, #32
 8002b98:	d17c      	bne.n	8002c94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <HAL_UART_Transmit+0x2c>
 8002ba0:	88fb      	ldrh	r3, [r7, #6]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e075      	b.n	8002c96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_UART_Transmit+0x3e>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e06e      	b.n	8002c96 <HAL_UART_Transmit+0x11c>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2221      	movs	r2, #33	; 0x21
 8002bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bce:	f7fe fbcd 	bl	800136c <HAL_GetTick>
 8002bd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	88fa      	ldrh	r2, [r7, #6]
 8002bd8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	88fa      	ldrh	r2, [r7, #6]
 8002bde:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be8:	d108      	bne.n	8002bfc <HAL_UART_Transmit+0x82>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d104      	bne.n	8002bfc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	61bb      	str	r3, [r7, #24]
 8002bfa:	e003      	b.n	8002c04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c0c:	e02a      	b.n	8002c64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2200      	movs	r2, #0
 8002c16:	2180      	movs	r1, #128	; 0x80
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 f840 	bl	8002c9e <UART_WaitOnFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e036      	b.n	8002c96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10b      	bne.n	8002c46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	3302      	adds	r3, #2
 8002c42:	61bb      	str	r3, [r7, #24]
 8002c44:	e007      	b.n	8002c56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	781a      	ldrb	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	3301      	adds	r3, #1
 8002c54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1cf      	bne.n	8002c0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2200      	movs	r2, #0
 8002c76:	2140      	movs	r1, #64	; 0x40
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 f810 	bl	8002c9e <UART_WaitOnFlagUntilTimeout>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e006      	b.n	8002c96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	e000      	b.n	8002c96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c94:	2302      	movs	r3, #2
  }
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3720      	adds	r7, #32
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b090      	sub	sp, #64	; 0x40
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	60f8      	str	r0, [r7, #12]
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	603b      	str	r3, [r7, #0]
 8002caa:	4613      	mov	r3, r2
 8002cac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cae:	e050      	b.n	8002d52 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cb6:	d04c      	beq.n	8002d52 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d007      	beq.n	8002cce <UART_WaitOnFlagUntilTimeout+0x30>
 8002cbe:	f7fe fb55 	bl	800136c <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d241      	bcs.n	8002d52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	330c      	adds	r3, #12
 8002cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd8:	e853 3f00 	ldrex	r3, [r3]
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	330c      	adds	r3, #12
 8002cec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cee:	637a      	str	r2, [r7, #52]	; 0x34
 8002cf0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cf6:	e841 2300 	strex	r3, r2, [r1]
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1e5      	bne.n	8002cce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3314      	adds	r3, #20
 8002d08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	e853 3f00 	ldrex	r3, [r3]
 8002d10:	613b      	str	r3, [r7, #16]
   return(result);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f023 0301 	bic.w	r3, r3, #1
 8002d18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3314      	adds	r3, #20
 8002d20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d22:	623a      	str	r2, [r7, #32]
 8002d24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d26:	69f9      	ldr	r1, [r7, #28]
 8002d28:	6a3a      	ldr	r2, [r7, #32]
 8002d2a:	e841 2300 	strex	r3, r2, [r1]
 8002d2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1e5      	bne.n	8002d02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e00f      	b.n	8002d72 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	bf0c      	ite	eq
 8002d62:	2301      	moveq	r3, #1
 8002d64:	2300      	movne	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d09f      	beq.n	8002cb0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3740      	adds	r7, #64	; 0x40
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d80:	b0c0      	sub	sp, #256	; 0x100
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d98:	68d9      	ldr	r1, [r3, #12]
 8002d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	ea40 0301 	orr.w	r3, r0, r1
 8002da4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	431a      	orrs	r2, r3
 8002db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002dd4:	f021 010c 	bic.w	r1, r1, #12
 8002dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002de2:	430b      	orrs	r3, r1
 8002de4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df6:	6999      	ldr	r1, [r3, #24]
 8002df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	ea40 0301 	orr.w	r3, r0, r1
 8002e02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	4b8f      	ldr	r3, [pc, #572]	; (8003048 <UART_SetConfig+0x2cc>)
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d005      	beq.n	8002e1c <UART_SetConfig+0xa0>
 8002e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4b8d      	ldr	r3, [pc, #564]	; (800304c <UART_SetConfig+0x2d0>)
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d104      	bne.n	8002e26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e1c:	f7ff fb16 	bl	800244c <HAL_RCC_GetPCLK2Freq>
 8002e20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e24:	e003      	b.n	8002e2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e26:	f7ff fafd 	bl	8002424 <HAL_RCC_GetPCLK1Freq>
 8002e2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e38:	f040 810c 	bne.w	8003054 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e40:	2200      	movs	r2, #0
 8002e42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e4e:	4622      	mov	r2, r4
 8002e50:	462b      	mov	r3, r5
 8002e52:	1891      	adds	r1, r2, r2
 8002e54:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e56:	415b      	adcs	r3, r3
 8002e58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e5e:	4621      	mov	r1, r4
 8002e60:	eb12 0801 	adds.w	r8, r2, r1
 8002e64:	4629      	mov	r1, r5
 8002e66:	eb43 0901 	adc.w	r9, r3, r1
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e7e:	4690      	mov	r8, r2
 8002e80:	4699      	mov	r9, r3
 8002e82:	4623      	mov	r3, r4
 8002e84:	eb18 0303 	adds.w	r3, r8, r3
 8002e88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e8c:	462b      	mov	r3, r5
 8002e8e:	eb49 0303 	adc.w	r3, r9, r3
 8002e92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ea2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ea6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002eaa:	460b      	mov	r3, r1
 8002eac:	18db      	adds	r3, r3, r3
 8002eae:	653b      	str	r3, [r7, #80]	; 0x50
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	eb42 0303 	adc.w	r3, r2, r3
 8002eb6:	657b      	str	r3, [r7, #84]	; 0x54
 8002eb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ebc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ec0:	f7fd fe1a 	bl	8000af8 <__aeabi_uldivmod>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4b61      	ldr	r3, [pc, #388]	; (8003050 <UART_SetConfig+0x2d4>)
 8002eca:	fba3 2302 	umull	r2, r3, r3, r2
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	011c      	lsls	r4, r3, #4
 8002ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002edc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ee0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ee4:	4642      	mov	r2, r8
 8002ee6:	464b      	mov	r3, r9
 8002ee8:	1891      	adds	r1, r2, r2
 8002eea:	64b9      	str	r1, [r7, #72]	; 0x48
 8002eec:	415b      	adcs	r3, r3
 8002eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ef0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ef4:	4641      	mov	r1, r8
 8002ef6:	eb12 0a01 	adds.w	sl, r2, r1
 8002efa:	4649      	mov	r1, r9
 8002efc:	eb43 0b01 	adc.w	fp, r3, r1
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f14:	4692      	mov	sl, r2
 8002f16:	469b      	mov	fp, r3
 8002f18:	4643      	mov	r3, r8
 8002f1a:	eb1a 0303 	adds.w	r3, sl, r3
 8002f1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f22:	464b      	mov	r3, r9
 8002f24:	eb4b 0303 	adc.w	r3, fp, r3
 8002f28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f40:	460b      	mov	r3, r1
 8002f42:	18db      	adds	r3, r3, r3
 8002f44:	643b      	str	r3, [r7, #64]	; 0x40
 8002f46:	4613      	mov	r3, r2
 8002f48:	eb42 0303 	adc.w	r3, r2, r3
 8002f4c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f56:	f7fd fdcf 	bl	8000af8 <__aeabi_uldivmod>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4b3b      	ldr	r3, [pc, #236]	; (8003050 <UART_SetConfig+0x2d4>)
 8002f62:	fba3 2301 	umull	r2, r3, r3, r1
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	2264      	movs	r2, #100	; 0x64
 8002f6a:	fb02 f303 	mul.w	r3, r2, r3
 8002f6e:	1acb      	subs	r3, r1, r3
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f76:	4b36      	ldr	r3, [pc, #216]	; (8003050 <UART_SetConfig+0x2d4>)
 8002f78:	fba3 2302 	umull	r2, r3, r3, r2
 8002f7c:	095b      	lsrs	r3, r3, #5
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f84:	441c      	add	r4, r3
 8002f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f98:	4642      	mov	r2, r8
 8002f9a:	464b      	mov	r3, r9
 8002f9c:	1891      	adds	r1, r2, r2
 8002f9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fa0:	415b      	adcs	r3, r3
 8002fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fa8:	4641      	mov	r1, r8
 8002faa:	1851      	adds	r1, r2, r1
 8002fac:	6339      	str	r1, [r7, #48]	; 0x30
 8002fae:	4649      	mov	r1, r9
 8002fb0:	414b      	adcs	r3, r1
 8002fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	f04f 0300 	mov.w	r3, #0
 8002fbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002fc0:	4659      	mov	r1, fp
 8002fc2:	00cb      	lsls	r3, r1, #3
 8002fc4:	4651      	mov	r1, sl
 8002fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fca:	4651      	mov	r1, sl
 8002fcc:	00ca      	lsls	r2, r1, #3
 8002fce:	4610      	mov	r0, r2
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4642      	mov	r2, r8
 8002fd6:	189b      	adds	r3, r3, r2
 8002fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fdc:	464b      	mov	r3, r9
 8002fde:	460a      	mov	r2, r1
 8002fe0:	eb42 0303 	adc.w	r3, r2, r3
 8002fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ff4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ff8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	18db      	adds	r3, r3, r3
 8003000:	62bb      	str	r3, [r7, #40]	; 0x28
 8003002:	4613      	mov	r3, r2
 8003004:	eb42 0303 	adc.w	r3, r2, r3
 8003008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800300a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800300e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003012:	f7fd fd71 	bl	8000af8 <__aeabi_uldivmod>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <UART_SetConfig+0x2d4>)
 800301c:	fba3 1302 	umull	r1, r3, r3, r2
 8003020:	095b      	lsrs	r3, r3, #5
 8003022:	2164      	movs	r1, #100	; 0x64
 8003024:	fb01 f303 	mul.w	r3, r1, r3
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	3332      	adds	r3, #50	; 0x32
 800302e:	4a08      	ldr	r2, [pc, #32]	; (8003050 <UART_SetConfig+0x2d4>)
 8003030:	fba2 2303 	umull	r2, r3, r2, r3
 8003034:	095b      	lsrs	r3, r3, #5
 8003036:	f003 0207 	and.w	r2, r3, #7
 800303a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4422      	add	r2, r4
 8003042:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003044:	e105      	b.n	8003252 <UART_SetConfig+0x4d6>
 8003046:	bf00      	nop
 8003048:	40011000 	.word	0x40011000
 800304c:	40011400 	.word	0x40011400
 8003050:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003058:	2200      	movs	r2, #0
 800305a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800305e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003062:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003066:	4642      	mov	r2, r8
 8003068:	464b      	mov	r3, r9
 800306a:	1891      	adds	r1, r2, r2
 800306c:	6239      	str	r1, [r7, #32]
 800306e:	415b      	adcs	r3, r3
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
 8003072:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003076:	4641      	mov	r1, r8
 8003078:	1854      	adds	r4, r2, r1
 800307a:	4649      	mov	r1, r9
 800307c:	eb43 0501 	adc.w	r5, r3, r1
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	00eb      	lsls	r3, r5, #3
 800308a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800308e:	00e2      	lsls	r2, r4, #3
 8003090:	4614      	mov	r4, r2
 8003092:	461d      	mov	r5, r3
 8003094:	4643      	mov	r3, r8
 8003096:	18e3      	adds	r3, r4, r3
 8003098:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800309c:	464b      	mov	r3, r9
 800309e:	eb45 0303 	adc.w	r3, r5, r3
 80030a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030c2:	4629      	mov	r1, r5
 80030c4:	008b      	lsls	r3, r1, #2
 80030c6:	4621      	mov	r1, r4
 80030c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030cc:	4621      	mov	r1, r4
 80030ce:	008a      	lsls	r2, r1, #2
 80030d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80030d4:	f7fd fd10 	bl	8000af8 <__aeabi_uldivmod>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4b60      	ldr	r3, [pc, #384]	; (8003260 <UART_SetConfig+0x4e4>)
 80030de:	fba3 2302 	umull	r2, r3, r3, r2
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	011c      	lsls	r4, r3, #4
 80030e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030ea:	2200      	movs	r2, #0
 80030ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80030f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80030f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80030f8:	4642      	mov	r2, r8
 80030fa:	464b      	mov	r3, r9
 80030fc:	1891      	adds	r1, r2, r2
 80030fe:	61b9      	str	r1, [r7, #24]
 8003100:	415b      	adcs	r3, r3
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003108:	4641      	mov	r1, r8
 800310a:	1851      	adds	r1, r2, r1
 800310c:	6139      	str	r1, [r7, #16]
 800310e:	4649      	mov	r1, r9
 8003110:	414b      	adcs	r3, r1
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003120:	4659      	mov	r1, fp
 8003122:	00cb      	lsls	r3, r1, #3
 8003124:	4651      	mov	r1, sl
 8003126:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800312a:	4651      	mov	r1, sl
 800312c:	00ca      	lsls	r2, r1, #3
 800312e:	4610      	mov	r0, r2
 8003130:	4619      	mov	r1, r3
 8003132:	4603      	mov	r3, r0
 8003134:	4642      	mov	r2, r8
 8003136:	189b      	adds	r3, r3, r2
 8003138:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800313c:	464b      	mov	r3, r9
 800313e:	460a      	mov	r2, r1
 8003140:	eb42 0303 	adc.w	r3, r2, r3
 8003144:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	67bb      	str	r3, [r7, #120]	; 0x78
 8003152:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	f04f 0300 	mov.w	r3, #0
 800315c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003160:	4649      	mov	r1, r9
 8003162:	008b      	lsls	r3, r1, #2
 8003164:	4641      	mov	r1, r8
 8003166:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800316a:	4641      	mov	r1, r8
 800316c:	008a      	lsls	r2, r1, #2
 800316e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003172:	f7fd fcc1 	bl	8000af8 <__aeabi_uldivmod>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4b39      	ldr	r3, [pc, #228]	; (8003260 <UART_SetConfig+0x4e4>)
 800317c:	fba3 1302 	umull	r1, r3, r3, r2
 8003180:	095b      	lsrs	r3, r3, #5
 8003182:	2164      	movs	r1, #100	; 0x64
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	3332      	adds	r3, #50	; 0x32
 800318e:	4a34      	ldr	r2, [pc, #208]	; (8003260 <UART_SetConfig+0x4e4>)
 8003190:	fba2 2303 	umull	r2, r3, r2, r3
 8003194:	095b      	lsrs	r3, r3, #5
 8003196:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800319a:	441c      	add	r4, r3
 800319c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031a0:	2200      	movs	r2, #0
 80031a2:	673b      	str	r3, [r7, #112]	; 0x70
 80031a4:	677a      	str	r2, [r7, #116]	; 0x74
 80031a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031aa:	4642      	mov	r2, r8
 80031ac:	464b      	mov	r3, r9
 80031ae:	1891      	adds	r1, r2, r2
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	415b      	adcs	r3, r3
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031ba:	4641      	mov	r1, r8
 80031bc:	1851      	adds	r1, r2, r1
 80031be:	6039      	str	r1, [r7, #0]
 80031c0:	4649      	mov	r1, r9
 80031c2:	414b      	adcs	r3, r1
 80031c4:	607b      	str	r3, [r7, #4]
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031d2:	4659      	mov	r1, fp
 80031d4:	00cb      	lsls	r3, r1, #3
 80031d6:	4651      	mov	r1, sl
 80031d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031dc:	4651      	mov	r1, sl
 80031de:	00ca      	lsls	r2, r1, #3
 80031e0:	4610      	mov	r0, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	4603      	mov	r3, r0
 80031e6:	4642      	mov	r2, r8
 80031e8:	189b      	adds	r3, r3, r2
 80031ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80031ec:	464b      	mov	r3, r9
 80031ee:	460a      	mov	r2, r1
 80031f0:	eb42 0303 	adc.w	r3, r2, r3
 80031f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	663b      	str	r3, [r7, #96]	; 0x60
 8003200:	667a      	str	r2, [r7, #100]	; 0x64
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800320e:	4649      	mov	r1, r9
 8003210:	008b      	lsls	r3, r1, #2
 8003212:	4641      	mov	r1, r8
 8003214:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003218:	4641      	mov	r1, r8
 800321a:	008a      	lsls	r2, r1, #2
 800321c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003220:	f7fd fc6a 	bl	8000af8 <__aeabi_uldivmod>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4b0d      	ldr	r3, [pc, #52]	; (8003260 <UART_SetConfig+0x4e4>)
 800322a:	fba3 1302 	umull	r1, r3, r3, r2
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	2164      	movs	r1, #100	; 0x64
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	3332      	adds	r3, #50	; 0x32
 800323c:	4a08      	ldr	r2, [pc, #32]	; (8003260 <UART_SetConfig+0x4e4>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	f003 020f 	and.w	r2, r3, #15
 8003248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4422      	add	r2, r4
 8003250:	609a      	str	r2, [r3, #8]
}
 8003252:	bf00      	nop
 8003254:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003258:	46bd      	mov	sp, r7
 800325a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800325e:	bf00      	nop
 8003260:	51eb851f 	.word	0x51eb851f

08003264 <HW_HX711_Init>:
 * @brief   Chip HX711 Init
 * @details GPIO init. Set gain. Set tare
 * @return 	void
 */
void HW_HX711_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
    HX711_init_port();
 8003268:	f000 f974 	bl	8003554 <HX711_init_port>

	HX711_set_scale(HX711_SCALE_GR);
 800326c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8003288 <HW_HX711_Init+0x24>
 8003270:	f000 f896 	bl	80033a0 <HX711_set_scale>
	HX711_set_gain(eGAIN_128);
 8003274:	2001      	movs	r0, #1
 8003276:	f000 f80b 	bl	8003290 <HX711_set_gain>
	HX711_set_offset(HX711_REAL_OFFSET);
 800327a:	4804      	ldr	r0, [pc, #16]	; (800328c <HW_HX711_Init+0x28>)
 800327c:	f04f 0100 	mov.w	r1, #0
 8003280:	f000 f87c 	bl	800337c <HX711_set_offset>
}
 8003284:	bf00      	nop
 8003286:	bd80      	pop	{r7, pc}
 8003288:	447a0000 	.word	0x447a0000
 800328c:	00023d9a 	.word	0x00023d9a

08003290 <HX711_set_gain>:
 * 			Depending on the parameter, the channel is also set to either A or B
 * @param 	HX711_GAIN gain
 * @return 	void
 */
void HX711_set_gain(HX711_GAIN gain)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	71fb      	strb	r3, [r7, #7]
	Gain = gain;
 800329a:	4a04      	ldr	r2, [pc, #16]	; (80032ac <HX711_set_gain+0x1c>)
 800329c:	79fb      	ldrb	r3, [r7, #7]
 800329e:	7013      	strb	r3, [r2, #0]
	HX711_read();		// It's necessary doing a reading to set the gain
 80032a0:	f000 f8b0 	bl	8003404 <HX711_read>
}
 80032a4:	bf00      	nop
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	20000094 	.word	0x20000094

080032b0 <HX711_get_value>:
 * @details Times = how many readings to do
 * @param   uint8_t times
 * @return 	Read_average() - OFFSET
 */
uint64_t HX711_get_value(uint8_t times)
{
 80032b0:	b5b0      	push	{r4, r5, r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	71fb      	strb	r3, [r7, #7]
	uint64_t avg = 0, returnValue = 0;
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	e9c7 2304 	strd	r2, r3, [r7, #16]

	avg = HX711_read_average(times);
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 f901 	bl	80034dc <HX711_read_average>
 80032da:	e9c7 0102 	strd	r0, r1, [r7, #8]

	if(avg > Offset)
 80032de:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <HX711_get_value+0x64>)
 80032e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032e8:	4290      	cmp	r0, r2
 80032ea:	eb71 0303 	sbcs.w	r3, r1, r3
 80032ee:	d209      	bcs.n	8003304 <HX711_get_value+0x54>
		returnValue = avg - Offset;
 80032f0:	4b08      	ldr	r3, [pc, #32]	; (8003314 <HX711_get_value+0x64>)
 80032f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032fa:	1a84      	subs	r4, r0, r2
 80032fc:	eb61 0503 	sbc.w	r5, r1, r3
 8003300:	e9c7 4504 	strd	r4, r5, [r7, #16]

	return returnValue;
 8003304:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8003308:	4610      	mov	r0, r2
 800330a:	4619      	mov	r1, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bdb0      	pop	{r4, r5, r7, pc}
 8003312:	bf00      	nop
 8003314:	20000098 	.word	0x20000098

08003318 <HX711_get_units>:
 * @details Times = how many readings to do
 * @param   uint8_t times
 * @return 	Value divided by scale
 */
double HX711_get_units(uint8_t times)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	71fb      	strb	r3, [r7, #7]
	return (BIT_MGR_CONVERTION *(HX711_get_value(times) / Scale));
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff ffc3 	bl	80032b0 <HX711_get_value>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4610      	mov	r0, r2
 8003330:	4619      	mov	r1, r3
 8003332:	f7fd fb9b 	bl	8000a6c <__aeabi_ul2f>
 8003336:	ee06 0a90 	vmov	s13, r0
 800333a:	4b0f      	ldr	r3, [pc, #60]	; (8003378 <HX711_get_units+0x60>)
 800333c:	edd3 7a00 	vldr	s15, [r3]
 8003340:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003344:	ee17 0a10 	vmov	r0, s14
 8003348:	f7fd f9e8 	bl	800071c <__aeabi_f2d>
 800334c:	a308      	add	r3, pc, #32	; (adr r3, 8003370 <HX711_get_units+0x58>)
 800334e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003352:	f7fc ff55 	bl	8000200 <__aeabi_dmul>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	ec43 2b17 	vmov	d7, r2, r3
}
 800335e:	eeb0 0a47 	vmov.f32	s0, s14
 8003362:	eef0 0a67 	vmov.f32	s1, s15
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	f3af 8000 	nop.w
 8003370:	1330e7dd 	.word	0x1330e7dd
 8003374:	3ff312d0 	.word	0x3ff312d0
 8003378:	200000a0 	.word	0x200000a0

0800337c <HX711_set_offset>:
 * @brief   Set new offset
 * @details Set the value that's subtracted from the actual reading (tare weight)
 * @param   uint64_t offset
 */
void HX711_set_offset(uint64_t offset)
 {
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	e9c7 0100 	strd	r0, r1, [r7]
	Offset = offset;
 8003386:	4905      	ldr	r1, [pc, #20]	; (800339c <HX711_set_offset+0x20>)
 8003388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800338c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	20000098 	.word	0x20000098

080033a0 <HX711_set_scale>:
 * @brief   Set new scale value
 * @details This value is used to convert the raw data to "human readable" data (measure units)
 * @param   float scale
 */
void HX711_set_scale(float scale )
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	ed87 0a01 	vstr	s0, [r7, #4]
	Scale = scale;
 80033aa:	4a04      	ldr	r2, [pc, #16]	; (80033bc <HX711_set_scale+0x1c>)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6013      	str	r3, [r2, #0]
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	200000a0 	.word	0x200000a0

080033c0 <HX711_power_down>:
/**
 * @brief   Puts the chip into power down mode
 * @details When PD_SCK pin changes from low to high and stays at high for longer than 60 us , HX711 enters power down mode
 */
void HX711_power_down()
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
	HX711_CLK_set_low();
 80033c4:	f000 f902 	bl	80035cc <HX711_CLK_set_low>
	HW711_delay(CLOCK_DELAY_US);
 80033c8:	2014      	movs	r0, #20
 80033ca:	f000 f923 	bl	8003614 <HW711_delay>
	HX711_CLK_set_high();
 80033ce:	f000 f909 	bl	80035e4 <HX711_CLK_set_high>
	HW711_delay(CLOCK_POWER_DOWN_DELAY_US);
 80033d2:	203c      	movs	r0, #60	; 0x3c
 80033d4:	f000 f91e 	bl	8003614 <HW711_delay>
}
 80033d8:	bf00      	nop
 80033da:	bd80      	pop	{r7, pc}

080033dc <HX711_power_up>:
/**
 * @brief   Wakes up the chip after power down mode
 * @details When PD_SCK returns to low, chip wakes up
 */
void HX711_power_up()
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
	HX711_CLK_set_low();
 80033e0:	f000 f8f4 	bl	80035cc <HX711_CLK_set_low>
}
 80033e4:	bf00      	nop
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HX711_is_ready>:
 * @details When output data is not ready for retrieval, digital output pin DOUT is high.
 * 			Serial clock should be low. When DOUT goes to low, it indicates data is ready for retrieval.
 * @return 	True if chip is ready, false if not.
 */
static bool_t HX711_is_ready()
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
	HX711_CLK_set_low();
 80033ec:	f000 f8ee 	bl	80035cc <HX711_CLK_set_low>

	if(HX711_get_level())
 80033f0:	f000 f904 	bl	80035fc <HX711_get_level>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HX711_is_ready+0x16>
		return false;
 80033fa:	2300      	movs	r3, #0
 80033fc:	e000      	b.n	8003400 <HX711_is_ready+0x18>
	else
		return true;
 80033fe:	2301      	movs	r3, #1
}
 8003400:	4618      	mov	r0, r3
 8003402:	bd80      	pop	{r7, pc}

08003404 <HX711_read>:
 * @brief   Get weight
 * @details Waits for the chip to be ready and returns a reading
 * @return 	Weight readed
 */
static uint64_t HX711_read()
{
 8003404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003408:	b084      	sub	sp, #16
 800340a:	af00      	add	r7, sp, #0
	uint64_t value = 0;
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t i = 0;
 8003418:	2300      	movs	r3, #0
 800341a:	607b      	str	r3, [r7, #4]

	HX711_CLK_set_low();
 800341c:	f000 f8d6 	bl	80035cc <HX711_CLK_set_low>

	// Wait for GPIO DATA low level
	while (!HX711_is_ready())	// todo: que no sea bloqueante
 8003420:	e002      	b.n	8003428 <HX711_read+0x24>
	{
		HW711_msDelay(WAIT_FOR_READY_DELAY);
 8003422:	200a      	movs	r0, #10
 8003424:	f000 f903 	bl	800362e <HW711_msDelay>
	while (!HX711_is_ready())	// todo: que no sea bloqueante
 8003428:	f7ff ffde 	bl	80033e8 <HX711_is_ready>
 800342c:	4603      	mov	r3, r0
 800342e:	f083 0301 	eor.w	r3, r3, #1
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f4      	bne.n	8003422 <HX711_read+0x1e>
	}

	HX711_interrupts_disable();	// Enter critical section
 8003438:	f000 f90d 	bl	8003656 <HX711_interrupts_disable>

	for( i = 0; i < HX711_ADC_PRECISION ; i++)
 800343c:	2300      	movs	r3, #0
 800343e:	607b      	str	r3, [r7, #4]
 8003440:	e020      	b.n	8003484 <HX711_read+0x80>
	{
		HX711_CLK_set_high();
 8003442:	f000 f8cf 	bl	80035e4 <HX711_CLK_set_high>
		HW711_delay(CLOCK_DELAY_US);
 8003446:	2014      	movs	r0, #20
 8003448:	f000 f8e4 	bl	8003614 <HW711_delay>
        value = value << 1;
 800344c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003450:	1894      	adds	r4, r2, r2
 8003452:	eb43 0503 	adc.w	r5, r3, r3
 8003456:	e9c7 4502 	strd	r4, r5, [r7, #8]
		HX711_CLK_set_low();
 800345a:	f000 f8b7 	bl	80035cc <HX711_CLK_set_low>
        HW711_delay(CLOCK_DELAY_US);
 800345e:	2014      	movs	r0, #20
 8003460:	f000 f8d8 	bl	8003614 <HW711_delay>

        if(HX711_get_level())
 8003464:	f000 f8ca 	bl	80035fc <HX711_get_level>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <HX711_read+0x7a>
        	value++;
 800346e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003472:	f112 0801 	adds.w	r8, r2, #1
 8003476:	f143 0900 	adc.w	r9, r3, #0
 800347a:	e9c7 8902 	strd	r8, r9, [r7, #8]
	for( i = 0; i < HX711_ADC_PRECISION ; i++)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3301      	adds	r3, #1
 8003482:	607b      	str	r3, [r7, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b17      	cmp	r3, #23
 8003488:	d9db      	bls.n	8003442 <HX711_read+0x3e>
	}

	// Set the channel and the gain factor for the next reading using the clock pin
	for ( i = 0; i < Gain; i++)
 800348a:	2300      	movs	r3, #0
 800348c:	607b      	str	r3, [r7, #4]
 800348e:	e00c      	b.n	80034aa <HX711_read+0xa6>
	{
		HX711_CLK_set_high();
 8003490:	f000 f8a8 	bl	80035e4 <HX711_CLK_set_high>
		HW711_delay(CLOCK_DELAY_US);
 8003494:	2014      	movs	r0, #20
 8003496:	f000 f8bd 	bl	8003614 <HW711_delay>
		HX711_CLK_set_low();
 800349a:	f000 f897 	bl	80035cc <HX711_CLK_set_low>
		HW711_delay(CLOCK_DELAY_US);
 800349e:	2014      	movs	r0, #20
 80034a0:	f000 f8b8 	bl	8003614 <HW711_delay>
	for ( i = 0; i < Gain; i++)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3301      	adds	r3, #1
 80034a8:	607b      	str	r3, [r7, #4]
 80034aa:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <HX711_read+0xd4>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d3ec      	bcc.n	8003490 <HX711_read+0x8c>
	}

	HX711_interrupts_enable();	// Exit critical section
 80034b6:	f000 f8c7 	bl	8003648 <HX711_interrupts_enable>

	value =value^0x800000;	//TODO: Comentado para prueba
 80034ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034be:	f482 0a00 	eor.w	sl, r2, #8388608	; 0x800000
 80034c2:	469b      	mov	fp, r3
 80034c4:	e9c7 ab02 	strd	sl, fp, [r7, #8]

	return (value);
 80034c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80034cc:	4610      	mov	r0, r2
 80034ce:	4619      	mov	r1, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034d8:	20000094 	.word	0x20000094

080034dc <HX711_read_average>:
 * @details Times = how many readings to do
 * @param   uint8_t times
 * @return 	Average reading
 */
static uint64_t  HX711_read_average(uint8_t times)
{
 80034dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034e0:	b086      	sub	sp, #24
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	4603      	mov	r3, r0
 80034e6:	71fb      	strb	r3, [r7, #7]
	uint64_t sum = 0;
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t i = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	73fb      	strb	r3, [r7, #15]

	if(times > MAX_TIMES_ALLOWED)
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	2b14      	cmp	r3, #20
 80034fc:	d901      	bls.n	8003502 <HX711_read_average+0x26>
		times = MAX_TIMES_ALLOWED;
 80034fe:	2314      	movs	r3, #20
 8003500:	71fb      	strb	r3, [r7, #7]

	HX711_power_up();
 8003502:	f7ff ff6b 	bl	80033dc <HX711_power_up>

	for (i = 0; i < times; i++)
 8003506:	2300      	movs	r3, #0
 8003508:	73fb      	strb	r3, [r7, #15]
 800350a:	e00b      	b.n	8003524 <HX711_read_average+0x48>
	{
		sum += HX711_read();
 800350c:	f7ff ff7a 	bl	8003404 <HX711_read>
 8003510:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003514:	1814      	adds	r4, r2, r0
 8003516:	eb43 0501 	adc.w	r5, r3, r1
 800351a:	e9c7 4504 	strd	r4, r5, [r7, #16]
	for (i = 0; i < times; i++)
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	3301      	adds	r3, #1
 8003522:	73fb      	strb	r3, [r7, #15]
 8003524:	7bfa      	ldrb	r2, [r7, #15]
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	429a      	cmp	r2, r3
 800352a:	d3ef      	bcc.n	800350c <HX711_read_average+0x30>
	}
	HX711_power_down();
 800352c:	f7ff ff48 	bl	80033c0 <HX711_power_down>

	return sum / times;
 8003530:	79fb      	ldrb	r3, [r7, #7]
 8003532:	2200      	movs	r2, #0
 8003534:	4698      	mov	r8, r3
 8003536:	4691      	mov	r9, r2
 8003538:	4642      	mov	r2, r8
 800353a:	464b      	mov	r3, r9
 800353c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003540:	f7fd fada 	bl	8000af8 <__aeabi_uldivmod>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
}
 8003548:	4610      	mov	r0, r2
 800354a:	4619      	mov	r1, r3
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003554 <HX711_init_port>:
 * @brief   Chip HX711 Init
 * @details GPIO init.
 * @return 	none
 */
void HX711_init_port(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpioConfig;

	/* GPIO Ports Clock Enable */
	GPIO_SECTION_D_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	603b      	str	r3, [r7, #0]
 800355e:	4b19      	ldr	r3, [pc, #100]	; (80035c4 <HX711_init_port+0x70>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	4a18      	ldr	r2, [pc, #96]	; (80035c4 <HX711_init_port+0x70>)
 8003564:	f043 0308 	orr.w	r3, r3, #8
 8003568:	6313      	str	r3, [r2, #48]	; 0x30
 800356a:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <HX711_init_port+0x70>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	603b      	str	r3, [r7, #0]
 8003574:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(HX711_CLK_GPIO_Port, HX711_CLK, GPIO_PIN_RESET);
 8003576:	2200      	movs	r2, #0
 8003578:	2140      	movs	r1, #64	; 0x40
 800357a:	4813      	ldr	r0, [pc, #76]	; (80035c8 <HX711_init_port+0x74>)
 800357c:	f7fe f9fc 	bl	8001978 <HAL_GPIO_WritePin>


	gpioConfig.Pin = HX711_DATA;
 8003580:	2380      	movs	r3, #128	; 0x80
 8003582:	607b      	str	r3, [r7, #4]
	gpioConfig.Mode = GPIO_MODE_INPUT;
 8003584:	2300      	movs	r3, #0
 8003586:	60bb      	str	r3, [r7, #8]
	gpioConfig.Pull = GPIO_NOPULL;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]
	gpioConfig.Speed = GPIO_SPEED_FREQ_LOW;
 800358c:	2300      	movs	r3, #0
 800358e:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(HX711_DATA_GPIO_Port, &gpioConfig);
 8003590:	1d3b      	adds	r3, r7, #4
 8003592:	4619      	mov	r1, r3
 8003594:	480c      	ldr	r0, [pc, #48]	; (80035c8 <HX711_init_port+0x74>)
 8003596:	f7fe f82b 	bl	80015f0 <HAL_GPIO_Init>

	gpioConfig.Pin = HX711_CLK;
 800359a:	2340      	movs	r3, #64	; 0x40
 800359c:	607b      	str	r3, [r7, #4]
	gpioConfig.Mode = GPIO_MODE_OUTPUT_PP;
 800359e:	2301      	movs	r3, #1
 80035a0:	60bb      	str	r3, [r7, #8]
	gpioConfig.Pull = GPIO_NOPULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
	gpioConfig.Speed = GPIO_SPEED_FREQ_LOW;
 80035a6:	2300      	movs	r3, #0
 80035a8:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(HX711_CLK_GPIO_Port, &gpioConfig);
 80035aa:	1d3b      	adds	r3, r7, #4
 80035ac:	4619      	mov	r1, r3
 80035ae:	4806      	ldr	r0, [pc, #24]	; (80035c8 <HX711_init_port+0x74>)
 80035b0:	f7fe f81e 	bl	80015f0 <HAL_GPIO_Init>

	usTimerInit();	// Initialize timer to use for HX711 comunication (Clk)
 80035b4:	f000 f8ba 	bl	800372c <usTimerInit>
	usTimerStart();
 80035b8:	f000 f8c6 	bl	8003748 <usTimerStart>
}
 80035bc:	bf00      	nop
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40023800 	.word	0x40023800
 80035c8:	40020c00 	.word	0x40020c00

080035cc <HX711_CLK_set_low>:
/**
 * @brief   Set CLK GPIO in low level
 * @return 	none
 */
void HX711_CLK_set_low(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (HX711_CLK_GPIO_Port, HX711_CLK, GPIO_PIN_RESET);
 80035d0:	2200      	movs	r2, #0
 80035d2:	2140      	movs	r1, #64	; 0x40
 80035d4:	4802      	ldr	r0, [pc, #8]	; (80035e0 <HX711_CLK_set_low+0x14>)
 80035d6:	f7fe f9cf 	bl	8001978 <HAL_GPIO_WritePin>
}
 80035da:	bf00      	nop
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40020c00 	.word	0x40020c00

080035e4 <HX711_CLK_set_high>:
/**
 * @brief   Set CLK GPIO in high level
 * @return 	none
 */
void HX711_CLK_set_high(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (HX711_CLK_GPIO_Port, HX711_CLK, GPIO_PIN_SET);
 80035e8:	2201      	movs	r2, #1
 80035ea:	2140      	movs	r1, #64	; 0x40
 80035ec:	4802      	ldr	r0, [pc, #8]	; (80035f8 <HX711_CLK_set_high+0x14>)
 80035ee:	f7fe f9c3 	bl	8001978 <HAL_GPIO_WritePin>
}
 80035f2:	bf00      	nop
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40020c00 	.word	0x40020c00

080035fc <HX711_get_level>:
/**
 * @brief   Get DATA GPIO level
 * @return 	uint8_t Data pin level
 */
uint8_t HX711_get_level(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin (HX711_DATA_GPIO_Port, HX711_DATA);
 8003600:	2180      	movs	r1, #128	; 0x80
 8003602:	4803      	ldr	r0, [pc, #12]	; (8003610 <HX711_get_level+0x14>)
 8003604:	f7fe f9a0 	bl	8001948 <HAL_GPIO_ReadPin>
 8003608:	4603      	mov	r3, r0
}
 800360a:	4618      	mov	r0, r3
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40020c00 	.word	0x40020c00

08003614 <HW711_delay>:
 * @brief   HX711 delay
 * @param   uint16_t delay [us]
 * @return 	none
 */
void HW711_delay(uint16_t delay)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	80fb      	strh	r3, [r7, #6]
	//HAL_Delay(delay);
	usTimerDelay(delay);
 800361e:	88fb      	ldrh	r3, [r7, #6]
 8003620:	4618      	mov	r0, r3
 8003622:	f000 f897 	bl	8003754 <usTimerDelay>
}
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HW711_msDelay>:
 * @brief   HX711 delay
 * @param   uint16_t delay [ms]
 * @return 	none
 */
void HW711_msDelay(uint16_t delay)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	4603      	mov	r3, r0
 8003636:	80fb      	strh	r3, [r7, #6]
	msTimerDelay(delay);
 8003638:	88fb      	ldrh	r3, [r7, #6]
 800363a:	4618      	mov	r0, r3
 800363c:	f000 f897 	bl	800376e <msTimerDelay>
}
 8003640:	bf00      	nop
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <HX711_interrupts_enable>:
/**
 * @brief   Disable interruptions
 * @return 	none
 */
void HX711_interrupts_enable(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
	//portENABLE_INTERRUPTS();
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <HX711_interrupts_disable>:
/**
 * @brief   Enable interruptions
 * @return 	none
 */
void HX711_interrupts_disable(void)
{
 8003656:	b480      	push	{r7}
 8003658:	af00      	add	r7, sp, #0
	//portDISABLE_INTERRUPTS();
}
 800365a:	bf00      	nop
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <Pump_Init>:
 * @details By default, set off the pumps
 * @param   none
 * @return 	none
 */
void Pump_Init(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
	pumpSet(FillPump, false);
 8003668:	2100      	movs	r1, #0
 800366a:	2001      	movs	r0, #1
 800366c:	f000 f806 	bl	800367c <pumpSet>
	pumpSet(ErogationPump, false);
 8003670:	2100      	movs	r1, #0
 8003672:	2000      	movs	r0, #0
 8003674:	f000 f802 	bl	800367c <pumpSet>
}
 8003678:	bf00      	nop
 800367a:	bd80      	pop	{r7, pc}

0800367c <pumpSet>:
 * @param   Output_Pump_t pump: pump selected
 * 			bool_t state :	state to set
 * @return 	none
 */
void pumpSet(Output_Pump_t pump, bool_t state)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	460a      	mov	r2, r1
 8003686:	71fb      	strb	r3, [r7, #7]
 8003688:	4613      	mov	r3, r2
 800368a:	71bb      	strb	r3, [r7, #6]
	if(ErogationPump == pump)
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <pumpSet+0x24>
	{
		uartSendString(BOMBA_EROGACION_MSJ);
 8003692:	480f      	ldr	r0, [pc, #60]	; (80036d0 <pumpSet+0x54>)
 8003694:	f7fd fcd2 	bl	800103c <uartSendString>
		pumpErogationState = state;
 8003698:	4a0e      	ldr	r2, [pc, #56]	; (80036d4 <pumpSet+0x58>)
 800369a:	79bb      	ldrb	r3, [r7, #6]
 800369c:	7013      	strb	r3, [r2, #0]
 800369e:	e008      	b.n	80036b2 <pumpSet+0x36>
	}else
	{
		if(FillPump == pump)
 80036a0:	79fb      	ldrb	r3, [r7, #7]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d105      	bne.n	80036b2 <pumpSet+0x36>
		{
			uartSendString(BOMBA_LLENADO_MSJ);
 80036a6:	480c      	ldr	r0, [pc, #48]	; (80036d8 <pumpSet+0x5c>)
 80036a8:	f7fd fcc8 	bl	800103c <uartSendString>
			pumpFillState = state;
 80036ac:	4a0b      	ldr	r2, [pc, #44]	; (80036dc <pumpSet+0x60>)
 80036ae:	79bb      	ldrb	r3, [r7, #6]
 80036b0:	7013      	strb	r3, [r2, #0]
		}

	}
	if(true == state)
 80036b2:	79bb      	ldrb	r3, [r7, #6]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <pumpSet+0x44>
	{
		uartSendString(ENDEDIDO_MSJ);
 80036b8:	4809      	ldr	r0, [pc, #36]	; (80036e0 <pumpSet+0x64>)
 80036ba:	f7fd fcbf 	bl	800103c <uartSendString>
	}
	else
	{
		uartSendString(APAGADO_MSJ);
	}
}
 80036be:	e002      	b.n	80036c6 <pumpSet+0x4a>
		uartSendString(APAGADO_MSJ);
 80036c0:	4808      	ldr	r0, [pc, #32]	; (80036e4 <pumpSet+0x68>)
 80036c2:	f7fd fcbb 	bl	800103c <uartSendString>
}
 80036c6:	bf00      	nop
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	08003d84 	.word	0x08003d84
 80036d4:	200000a4 	.word	0x200000a4
 80036d8:	08003d98 	.word	0x08003d98
 80036dc:	200000a5 	.word	0x200000a5
 80036e0:	08003da8 	.word	0x08003da8
 80036e4:	08003db0 	.word	0x08003db0

080036e8 <getPumpState>:
 * @details Read the current state of a pump
 * @param   Output_Pump_t pump: pump selected
 * @return 	bool_t:	current state
 */
bool_t getPumpState(Output_Pump_t pump)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	71fb      	strb	r3, [r7, #7]
	bool_t returnValue = false;
 80036f2:	2300      	movs	r3, #0
 80036f4:	73fb      	strb	r3, [r7, #15]

	switch(pump)
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <getPumpState+0x1a>
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d004      	beq.n	800370a <getPumpState+0x22>
 8003700:	e007      	b.n	8003712 <getPumpState+0x2a>
	{
	case ErogationPump:
		returnValue = pumpErogationState;
 8003702:	4b08      	ldr	r3, [pc, #32]	; (8003724 <getPumpState+0x3c>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	73fb      	strb	r3, [r7, #15]
		break;
 8003708:	e006      	b.n	8003718 <getPumpState+0x30>
	case FillPump:
		returnValue = pumpFillState;
 800370a:	4b07      	ldr	r3, [pc, #28]	; (8003728 <getPumpState+0x40>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	73fb      	strb	r3, [r7, #15]
		break;
 8003710:	e002      	b.n	8003718 <getPumpState+0x30>
	default:
		Error_Handler();
 8003712:	f7fd fc55 	bl	8000fc0 <Error_Handler>
		break;
 8003716:	bf00      	nop
	}
	return returnValue;
 8003718:	7bfb      	ldrb	r3, [r7, #15]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	200000a4 	.word	0x200000a4
 8003728:	200000a5 	.word	0x200000a5

0800372c <usTimerInit>:
 * @brief   Initialize Timer
 * @param   none
 * @return 	none
 */
void usTimerInit(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
	if(usTimerInit_port() != true)
 8003730:	f000 f82a 	bl	8003788 <usTimerInit_port>
 8003734:	4603      	mov	r3, r0
 8003736:	f083 0301 	eor.w	r3, r3, #1
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <usTimerInit+0x18>
		Error_Handler();
 8003740:	f7fd fc3e 	bl	8000fc0 <Error_Handler>
}
 8003744:	bf00      	nop
 8003746:	bd80      	pop	{r7, pc}

08003748 <usTimerStart>:
 * @brief   Start of timer counting
 * @param   none
 * @return 	none
 */
void usTimerStart(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
	usTimerStart_port();
 800374c:	f000 f870 	bl	8003830 <usTimerStart_port>
}
 8003750:	bf00      	nop
 8003752:	bd80      	pop	{r7, pc}

08003754 <usTimerDelay>:
 * @details	Blocking delay in [us]
 * @param   uint16_t: delay [us]
 * @return 	none
 */
void usTimerDelay(uint16_t delay_us)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	80fb      	strh	r3, [r7, #6]
	usTimerDelay_port(delay_us);
 800375e:	88fb      	ldrh	r3, [r7, #6]
 8003760:	4618      	mov	r0, r3
 8003762:	f000 f879 	bl	8003858 <usTimerDelay_port>
}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <msTimerDelay>:
 * @details	Blocking delay in [ms]
 * @param   uint16_t: delay [ms]
 * @return 	none
 */
void msTimerDelay(uint16_t delay_us)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	4603      	mov	r3, r0
 8003776:	80fb      	strh	r3, [r7, #6]
	msTimerDelay_port(delay_us);
 8003778:	88fb      	ldrh	r3, [r7, #6]
 800377a:	4618      	mov	r0, r3
 800377c:	f000 f894 	bl	80038a8 <msTimerDelay_port>
}
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <usTimerInit_port>:
 * @details Initialize timer for 1 us period
 * @param   none
 * @return 	bool_t:	true if the initialization was successful. False if not.
 */
bool_t usTimerInit_port(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b088      	sub	sp, #32
 800378c:	af00      	add	r7, sp, #0
	bool_t returnValue = false;
 800378e:	2300      	movs	r3, #0
 8003790:	77fb      	strb	r3, [r7, #31]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003792:	f107 030c 	add.w	r3, r7, #12
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	605a      	str	r2, [r3, #4]
 800379c:	609a      	str	r2, [r3, #8]
 800379e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037a0:	1d3b      	adds	r3, r7, #4
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	605a      	str	r2, [r3, #4]

	/* Properties of the timer*/
	htim1.Instance = TIM1;
 80037a8:	4b1f      	ldr	r3, [pc, #124]	; (8003828 <usTimerInit_port+0xa0>)
 80037aa:	4a20      	ldr	r2, [pc, #128]	; (800382c <usTimerInit_port+0xa4>)
 80037ac:	601a      	str	r2, [r3, #0]

	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ae:	4b1e      	ldr	r3, [pc, #120]	; (8003828 <usTimerInit_port+0xa0>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	619a      	str	r2, [r3, #24]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037b4:	4b1c      	ldr	r3, [pc, #112]	; (8003828 <usTimerInit_port+0xa0>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	611a      	str	r2, [r3, #16]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ba:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <usTimerInit_port+0xa0>)
 80037bc:	2200      	movs	r2, #0
 80037be:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80037c0:	4b19      	ldr	r3, [pc, #100]	; (8003828 <usTimerInit_port+0xa0>)
 80037c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037c6:	60da      	str	r2, [r3, #12]
	htim1.Init.Prescaler = 168;
 80037c8:	4b17      	ldr	r3, [pc, #92]	; (8003828 <usTimerInit_port+0xa0>)
 80037ca:	22a8      	movs	r2, #168	; 0xa8
 80037cc:	605a      	str	r2, [r3, #4]
	htim1.Init.RepetitionCounter = 0;
 80037ce:	4b16      	ldr	r3, [pc, #88]	; (8003828 <usTimerInit_port+0xa0>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	615a      	str	r2, [r3, #20]

	if (HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80037d4:	4814      	ldr	r0, [pc, #80]	; (8003828 <usTimerInit_port+0xa0>)
 80037d6:	f7fe fe4d 	bl	8002474 <HAL_TIM_Base_Init>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <usTimerInit_port+0x5c>
	{
		returnValue = true;
 80037e0:	2301      	movs	r3, #1
 80037e2:	77fb      	strb	r3, [r7, #31]
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037e8:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) == HAL_OK)
 80037ea:	f107 030c 	add.w	r3, r7, #12
 80037ee:	4619      	mov	r1, r3
 80037f0:	480d      	ldr	r0, [pc, #52]	; (8003828 <usTimerInit_port+0xa0>)
 80037f2:	f7fe fef7 	bl	80025e4 <HAL_TIM_ConfigClockSource>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <usTimerInit_port+0x78>
	{
		returnValue = true;
 80037fc:	2301      	movs	r3, #1
 80037fe:	77fb      	strb	r3, [r7, #31]
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003800:	2300      	movs	r3, #0
 8003802:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003804:	2300      	movs	r3, #0
 8003806:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) == HAL_OK)
 8003808:	1d3b      	adds	r3, r7, #4
 800380a:	4619      	mov	r1, r3
 800380c:	4806      	ldr	r0, [pc, #24]	; (8003828 <usTimerInit_port+0xa0>)
 800380e:	f7ff f8eb 	bl	80029e8 <HAL_TIMEx_MasterConfigSynchronization>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <usTimerInit_port+0x94>
	{
		returnValue = true;
 8003818:	2301      	movs	r3, #1
 800381a:	77fb      	strb	r3, [r7, #31]
	}

	return returnValue;
 800381c:	7ffb      	ldrb	r3, [r7, #31]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3720      	adds	r7, #32
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	200000a8 	.word	0x200000a8
 800382c:	40010000 	.word	0x40010000

08003830 <usTimerStart_port>:
 * @brief   Start of timer counting
 * @param   none
 * @return 	bool_t:	true if the start was successful. False if not.
 */
bool_t usTimerStart_port(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
	bool_t returnValue = false;
 8003836:	2300      	movs	r3, #0
 8003838:	71fb      	strb	r3, [r7, #7]

	if(HAL_TIM_Base_Start(&htim1) == HAL_OK)
 800383a:	4806      	ldr	r0, [pc, #24]	; (8003854 <usTimerStart_port+0x24>)
 800383c:	f7fe fe6a 	bl	8002514 <HAL_TIM_Base_Start>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <usTimerStart_port+0x1a>
	{
		returnValue = true;
 8003846:	2301      	movs	r3, #1
 8003848:	71fb      	strb	r3, [r7, #7]
	}

	return returnValue;
 800384a:	79fb      	ldrb	r3, [r7, #7]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	200000a8 	.word	0x200000a8

08003858 <usTimerDelay_port>:
 * @details	Blocking delay in [us]
 * @param   uint16_t: delay [us]
 * @return 	none
 */
void usTimerDelay_port(uint16_t delay_us)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	80fb      	strh	r3, [r7, #6]
	uint32_t timeout = 0;
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]

	__HAL_TIM_SET_COUNTER(&htim1, 0);	// start of counting at zero
 8003866:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <usTimerDelay_port+0x48>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2200      	movs	r2, #0
 800386c:	625a      	str	r2, [r3, #36]	; 0x24

	while((__HAL_TIM_GET_COUNTER(&htim1) < delay_us) && timeout < MAX_TIMEOUT)
 800386e:	e002      	b.n	8003876 <usTimerDelay_port+0x1e>
	{
		timeout++;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	3301      	adds	r3, #1
 8003874:	60fb      	str	r3, [r7, #12]
	while((__HAL_TIM_GET_COUNTER(&htim1) < delay_us) && timeout < MAX_TIMEOUT)
 8003876:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <usTimerDelay_port+0x48>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	429a      	cmp	r2, r3
 8003880:	d203      	bcs.n	800388a <usTimerDelay_port+0x32>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4a07      	ldr	r2, [pc, #28]	; (80038a4 <usTimerDelay_port+0x4c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d9f2      	bls.n	8003870 <usTimerDelay_port+0x18>
	}

	if(timeout >= MAX_TIMEOUT)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4a05      	ldr	r2, [pc, #20]	; (80038a4 <usTimerDelay_port+0x4c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <usTimerDelay_port+0x3e>
		Error_Handler();
 8003892:	f000 f816 	bl	80038c2 <Error_Handler>
}
 8003896:	bf00      	nop
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	200000a8 	.word	0x200000a8
 80038a4:	0001869f 	.word	0x0001869f

080038a8 <msTimerDelay_port>:
 * @details	Blocking delay in [ms]
 * @param   uint16_t: delay [ms]
 * @return 	none
 */
void msTimerDelay_port(uint16_t delay_us)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(delay_us);
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fd fd65 	bl	8001384 <HAL_Delay>
}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 80038c2:	b480      	push	{r7}
 80038c4:	af00      	add	r7, sp, #0
	while (1);
 80038c6:	e7fe      	b.n	80038c6 <Error_Handler+0x4>

080038c8 <Valves_Init>:
 * @details By default, set off the valves
 * @param   none
 * @return 	none
 */
void Valves_Init(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
	valveSet(FillValve, false);
 80038cc:	2100      	movs	r1, #0
 80038ce:	2001      	movs	r0, #1
 80038d0:	f000 f806 	bl	80038e0 <valveSet>
	valveSet(ErogationValve, false);
 80038d4:	2100      	movs	r1, #0
 80038d6:	2000      	movs	r0, #0
 80038d8:	f000 f802 	bl	80038e0 <valveSet>
}
 80038dc:	bf00      	nop
 80038de:	bd80      	pop	{r7, pc}

080038e0 <valveSet>:
 * @param   Output_Valve_t valve: valve selected
 * 			bool_t state :	state to set
 * @return 	none
 */
void valveSet(Output_Valve_t valve, bool_t state)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	460a      	mov	r2, r1
 80038ea:	71fb      	strb	r3, [r7, #7]
 80038ec:	4613      	mov	r3, r2
 80038ee:	71bb      	strb	r3, [r7, #6]
	if(ErogationValve == valve)
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <valveSet+0x24>
	{
		uartSendString(VALVULA_EROGACION_MSJ);
 80038f6:	480f      	ldr	r0, [pc, #60]	; (8003934 <valveSet+0x54>)
 80038f8:	f7fd fba0 	bl	800103c <uartSendString>
		valveErogationState = state;
 80038fc:	4a0e      	ldr	r2, [pc, #56]	; (8003938 <valveSet+0x58>)
 80038fe:	79bb      	ldrb	r3, [r7, #6]
 8003900:	7013      	strb	r3, [r2, #0]
 8003902:	e008      	b.n	8003916 <valveSet+0x36>
	}else
	{
		if(FillValve == valve)
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d105      	bne.n	8003916 <valveSet+0x36>
		{
			uartSendString(VALVULA_LLENADO_MSJ);
 800390a:	480c      	ldr	r0, [pc, #48]	; (800393c <valveSet+0x5c>)
 800390c:	f7fd fb96 	bl	800103c <uartSendString>
			valveFillState = state;
 8003910:	4a0b      	ldr	r2, [pc, #44]	; (8003940 <valveSet+0x60>)
 8003912:	79bb      	ldrb	r3, [r7, #6]
 8003914:	7013      	strb	r3, [r2, #0]
		}
	}
	if(true == state)
 8003916:	79bb      	ldrb	r3, [r7, #6]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <valveSet+0x44>
	{
		uartSendString(ENDEDIDO_MSJ);
 800391c:	4809      	ldr	r0, [pc, #36]	; (8003944 <valveSet+0x64>)
 800391e:	f7fd fb8d 	bl	800103c <uartSendString>
	}
	else
	{
		uartSendString(APAGADO_MSJ);
	}
}
 8003922:	e002      	b.n	800392a <valveSet+0x4a>
		uartSendString(APAGADO_MSJ);
 8003924:	4808      	ldr	r0, [pc, #32]	; (8003948 <valveSet+0x68>)
 8003926:	f7fd fb89 	bl	800103c <uartSendString>
}
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	08003db8 	.word	0x08003db8
 8003938:	200000f0 	.word	0x200000f0
 800393c:	08003dcc 	.word	0x08003dcc
 8003940:	200000f1 	.word	0x200000f1
 8003944:	08003de0 	.word	0x08003de0
 8003948:	08003de8 	.word	0x08003de8

0800394c <getValveState>:
 * @details Read the current state of a valve
 * @param   Output_Pump_t valve: valve selected
 * @return 	bool_t:	current state
 */
bool_t getValveState(Output_Valve_t valve)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	71fb      	strb	r3, [r7, #7]
	bool_t returnValue = false;
 8003956:	2300      	movs	r3, #0
 8003958:	73fb      	strb	r3, [r7, #15]

	switch(valve)
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <getValveState+0x1a>
 8003960:	2b01      	cmp	r3, #1
 8003962:	d004      	beq.n	800396e <getValveState+0x22>
 8003964:	e007      	b.n	8003976 <getValveState+0x2a>
	{
	case ErogationValve:
		returnValue = valveErogationState;
 8003966:	4b08      	ldr	r3, [pc, #32]	; (8003988 <getValveState+0x3c>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	73fb      	strb	r3, [r7, #15]
		break;
 800396c:	e006      	b.n	800397c <getValveState+0x30>
	case FillValve:
		returnValue = valveFillState;
 800396e:	4b07      	ldr	r3, [pc, #28]	; (800398c <getValveState+0x40>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	73fb      	strb	r3, [r7, #15]
		break;
 8003974:	e002      	b.n	800397c <getValveState+0x30>
	default:
		Error_Handler();
 8003976:	f7fd fb23 	bl	8000fc0 <Error_Handler>
		break;
 800397a:	bf00      	nop
	}

	return returnValue;
 800397c:	7bfb      	ldrb	r3, [r7, #15]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	200000f0 	.word	0x200000f0
 800398c:	200000f1 	.word	0x200000f1

08003990 <main>:
 * @brief  Main program
 * @param  None
 * @return None
 */
int main(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
	FSM_State_t state = IDLE;
 8003996:	2300      	movs	r3, #0
 8003998:	75fb      	strb	r3, [r7, #23]
	double reservoirWeight = 0;
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	bool_t erogationButton = false;
 80039a6:	2300      	movs	r3, #0
 80039a8:	71fb      	strb	r3, [r7, #7]
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
	 */
	HAL_Init();
 80039aa:	f7fd fc7f 	bl	80012ac <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 80039ae:	f000 f90f 	bl	8003bd0 <SystemClock_Config>

	/* Initialize BSP Led */
	BSP_LED_Init(LED1);
 80039b2:	2000      	movs	r0, #0
 80039b4:	f7fd fb5a 	bl	800106c <BSP_LED_Init>
	BSP_LED_Init(LED2);
 80039b8:	2001      	movs	r0, #1
 80039ba:	f7fd fb57 	bl	800106c <BSP_LED_Init>
	BSP_LED_Init(LED3);
 80039be:	2002      	movs	r0, #2
 80039c0:	f7fd fb54 	bl	800106c <BSP_LED_Init>


	/* Initialize BSP PB for BUTTON_USER */
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 80039c4:	2100      	movs	r1, #0
 80039c6:	2000      	movs	r0, #0
 80039c8:	f7fd fba0 	bl	800110c <BSP_PB_Init>

	/* Initialize anti-debounce */
	debounceFSM_init();
 80039cc:	f7fd fa16 	bl	8000dfc <debounceFSM_init>

	/* Initialize UART to send */
	if(!uartInit())
 80039d0:	f7fd fafe 	bl	8000fd0 <uartInit>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f083 0301 	eor.w	r3, r3, #1
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <main+0x54>
		Error_Handler();
 80039e0:	f7fd faee 	bl	8000fc0 <Error_Handler>
	HX711_get_offset();
#endif

#ifndef _CALIBRATION__
	/* Initialize */
	HW_HX711_Init();
 80039e4:	f7ff fc3e 	bl	8003264 <HW_HX711_Init>
#endif

	Pump_Init();	// todo: Create a folder for HW_PUMP
 80039e8:	f7ff fe3c 	bl	8003664 <Pump_Init>
	Valves_Init();	// todo: Create a folder for HW_VALVE
 80039ec:	f7ff ff6c 	bl	80038c8 <Valves_Init>

	/* Infinite loop */
	while (1)
	{

		debounceFSM_update();	// Read the button user state with anti debounce applied
 80039f0:	f7fd fa18 	bl	8000e24 <debounceFSM_update>

		reservoirWeight = HX711_get_units(WEIGHT_READINGS);
 80039f4:	200a      	movs	r0, #10
 80039f6:	f7ff fc8f 	bl	8003318 <HX711_get_units>
 80039fa:	ed87 0b02 	vstr	d0, [r7, #8]
		erogationButton = readKeyPressed();		// ¿Was the Button User pressed?
 80039fe:	f7fd fa7b 	bl	8000ef8 <readKeyPressed>
 8003a02:	4603      	mov	r3, r0
 8003a04:	71fb      	strb	r3, [r7, #7]

		switch(state)
 8003a06:	7dfb      	ldrb	r3, [r7, #23]
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d07c      	beq.n	8003b06 <main+0x176>
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	f300 80cd 	bgt.w	8003bac <main+0x21c>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <main+0x8c>
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d014      	beq.n	8003a44 <main+0xb4>
 8003a1a:	e0c7      	b.n	8003bac <main+0x21c>
		{
		case IDLE:
			if(RESERVORY_LIMIT_MIN > reservoirWeight)	// Empty reservoir
 8003a1c:	a368      	add	r3, pc, #416	; (adr r3, 8003bc0 <main+0x230>)
 8003a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a26:	f7fc ff31 	bl	800088c <__aeabi_dcmplt>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <main+0xa6>
			{
				state = FILL;
 8003a30:	2301      	movs	r3, #1
 8003a32:	75fb      	strb	r3, [r7, #23]
				{
					state = EROGATION;
				}
			}

			break;
 8003a34:	e0bd      	b.n	8003bb2 <main+0x222>
				if(erogationButton)		// User demand of erogation
 8003a36:	79fb      	ldrb	r3, [r7, #7]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 80ba 	beq.w	8003bb2 <main+0x222>
					state = EROGATION;
 8003a3e:	2302      	movs	r3, #2
 8003a40:	75fb      	strb	r3, [r7, #23]
			break;
 8003a42:	e0b6      	b.n	8003bb2 <main+0x222>
		case FILL:

			if(erogationButton && (RESERVORY_LIMIT_MIN < reservoirWeight))	// Erogation demand and content of reservoir OK
 8003a44:	79fb      	ldrb	r3, [r7, #7]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d020      	beq.n	8003a8c <main+0xfc>
 8003a4a:	a35d      	add	r3, pc, #372	; (adr r3, 8003bc0 <main+0x230>)
 8003a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a54:	f7fc ff38 	bl	80008c8 <__aeabi_dcmpgt>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d016      	beq.n	8003a8c <main+0xfc>
			{
				state = EROGATION;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	75fb      	strb	r3, [r7, #23]

				// End of FILL
				if(getValveState(FillValve))
 8003a62:	2001      	movs	r0, #1
 8003a64:	f7ff ff72 	bl	800394c <getValveState>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <main+0xe6>
					valveSet(FillValve, false);
 8003a6e:	2100      	movs	r1, #0
 8003a70:	2001      	movs	r0, #1
 8003a72:	f7ff ff35 	bl	80038e0 <valveSet>
				if(getPumpState(FillPump))
 8003a76:	2001      	movs	r0, #1
 8003a78:	f7ff fe36 	bl	80036e8 <getPumpState>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d040      	beq.n	8003b04 <main+0x174>
					pumpSet(FillPump,false);
 8003a82:	2100      	movs	r1, #0
 8003a84:	2001      	movs	r0, #1
 8003a86:	f7ff fdf9 	bl	800367c <pumpSet>
				if(getPumpState(FillPump))
 8003a8a:	e03b      	b.n	8003b04 <main+0x174>
			}else
			{
				if(RESERVORY_LIMIT_MAX > reservoirWeight)	// Reservoir is not completely full
 8003a8c:	a34e      	add	r3, pc, #312	; (adr r3, 8003bc8 <main+0x238>)
 8003a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a96:	f7fc fef9 	bl	800088c <__aeabi_dcmplt>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d01a      	beq.n	8003ad6 <main+0x146>
				{
					// Start of FILL
					if(!getValveState(FillValve))
 8003aa0:	2001      	movs	r0, #1
 8003aa2:	f7ff ff53 	bl	800394c <getValveState>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f083 0301 	eor.w	r3, r3, #1
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <main+0x12a>
						valveSet(FillValve, true);
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	2001      	movs	r0, #1
 8003ab6:	f7ff ff13 	bl	80038e0 <valveSet>
					if(!getPumpState(FillPump))
 8003aba:	2001      	movs	r0, #1
 8003abc:	f7ff fe14 	bl	80036e8 <getPumpState>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f083 0301 	eor.w	r3, r3, #1
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d074      	beq.n	8003bb6 <main+0x226>
						pumpSet(FillPump,true);
 8003acc:	2101      	movs	r1, #1
 8003ace:	2001      	movs	r0, #1
 8003ad0:	f7ff fdd4 	bl	800367c <pumpSet>
						pumpSet(FillPump,false);

					state = IDLE;
				}
			}
			break;
 8003ad4:	e06f      	b.n	8003bb6 <main+0x226>
					if(getValveState(FillValve))
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	f7ff ff38 	bl	800394c <getValveState>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <main+0x15a>
						valveSet(FillValve, false);
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	f7ff fefb 	bl	80038e0 <valveSet>
					if(getPumpState(FillPump))
 8003aea:	2001      	movs	r0, #1
 8003aec:	f7ff fdfc 	bl	80036e8 <getPumpState>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <main+0x16e>
						pumpSet(FillPump,false);
 8003af6:	2100      	movs	r1, #0
 8003af8:	2001      	movs	r0, #1
 8003afa:	f7ff fdbf 	bl	800367c <pumpSet>
					state = IDLE;
 8003afe:	2300      	movs	r3, #0
 8003b00:	75fb      	strb	r3, [r7, #23]
			break;
 8003b02:	e058      	b.n	8003bb6 <main+0x226>
 8003b04:	e057      	b.n	8003bb6 <main+0x226>
		case EROGATION:
			if(erogationButton && (RESERVORY_LIMIT_MIN < reservoirWeight))	// Erogation demand and content of reservoir OK
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d024      	beq.n	8003b56 <main+0x1c6>
 8003b0c:	a32c      	add	r3, pc, #176	; (adr r3, 8003bc0 <main+0x230>)
 8003b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b16:	f7fc fed7 	bl	80008c8 <__aeabi_dcmpgt>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d01a      	beq.n	8003b56 <main+0x1c6>
			{
				// Start of EROGATION
				if(!getValveState(ErogationValve))
 8003b20:	2000      	movs	r0, #0
 8003b22:	f7ff ff13 	bl	800394c <getValveState>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f083 0301 	eor.w	r3, r3, #1
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <main+0x1aa>
					valveSet(ErogationValve, true);
 8003b32:	2101      	movs	r1, #1
 8003b34:	2000      	movs	r0, #0
 8003b36:	f7ff fed3 	bl	80038e0 <valveSet>
				if(!getPumpState(ErogationPump))
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	f7ff fdd4 	bl	80036e8 <getPumpState>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f083 0301 	eor.w	r3, r3, #1
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d02e      	beq.n	8003baa <main+0x21a>
					pumpSet(ErogationPump,true);
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	2000      	movs	r0, #0
 8003b50:	f7ff fd94 	bl	800367c <pumpSet>
				if(!getPumpState(ErogationPump))
 8003b54:	e029      	b.n	8003baa <main+0x21a>
			}
			else
			{
				// End of EROGATION
				if(getValveState(ErogationValve))
 8003b56:	2000      	movs	r0, #0
 8003b58:	f7ff fef8 	bl	800394c <getValveState>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <main+0x1da>
					valveSet(ErogationValve, false);
 8003b62:	2100      	movs	r1, #0
 8003b64:	2000      	movs	r0, #0
 8003b66:	f7ff febb 	bl	80038e0 <valveSet>
				if(getPumpState(ErogationPump))
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	f7ff fdbc 	bl	80036e8 <getPumpState>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <main+0x1ee>
					pumpSet(ErogationPump,false);
 8003b76:	2100      	movs	r1, #0
 8003b78:	2000      	movs	r0, #0
 8003b7a:	f7ff fd7f 	bl	800367c <pumpSet>

				if(RESERVORY_LIMIT_MIN > reservoirWeight)	// Empty reservoir
 8003b7e:	a310      	add	r3, pc, #64	; (adr r3, 8003bc0 <main+0x230>)
 8003b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b88:	f7fc fe80 	bl	800088c <__aeabi_dcmplt>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <main+0x208>
				{
					state = FILL;
 8003b92:	2301      	movs	r3, #1
 8003b94:	75fb      	strb	r3, [r7, #23]
				{
					if(!erogationButton)
						state = IDLE;
				}
			}
			break;
 8003b96:	e010      	b.n	8003bba <main+0x22a>
					if(!erogationButton)
 8003b98:	79fb      	ldrb	r3, [r7, #7]
 8003b9a:	f083 0301 	eor.w	r3, r3, #1
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <main+0x22a>
						state = IDLE;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	75fb      	strb	r3, [r7, #23]
			break;
 8003ba8:	e007      	b.n	8003bba <main+0x22a>
 8003baa:	e006      	b.n	8003bba <main+0x22a>
		default:
			Error_Handler();
 8003bac:	f7fd fa08 	bl	8000fc0 <Error_Handler>
			break;
 8003bb0:	e004      	b.n	8003bbc <main+0x22c>
			break;
 8003bb2:	bf00      	nop
 8003bb4:	e71c      	b.n	80039f0 <main+0x60>
			break;
 8003bb6:	bf00      	nop
 8003bb8:	e71a      	b.n	80039f0 <main+0x60>
			break;
 8003bba:	bf00      	nop
		debounceFSM_update();	// Read the button user state with anti debounce applied
 8003bbc:	e718      	b.n	80039f0 <main+0x60>
 8003bbe:	bf00      	nop
 8003bc0:	00000000 	.word	0x00000000
 8003bc4:	40b38800 	.word	0x40b38800
 8003bc8:	00000000 	.word	0x00000000
 8003bcc:	40cd4c00 	.word	0x40cd4c00

08003bd0 <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b094      	sub	sp, #80	; 0x50
 8003bd4:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	4b2c      	ldr	r3, [pc, #176]	; (8003c8c <SystemClock_Config+0xbc>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	4a2b      	ldr	r2, [pc, #172]	; (8003c8c <SystemClock_Config+0xbc>)
 8003be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be4:	6413      	str	r3, [r2, #64]	; 0x40
 8003be6:	4b29      	ldr	r3, [pc, #164]	; (8003c8c <SystemClock_Config+0xbc>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	607b      	str	r3, [r7, #4]
 8003bf6:	4b26      	ldr	r3, [pc, #152]	; (8003c90 <SystemClock_Config+0xc0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a25      	ldr	r2, [pc, #148]	; (8003c90 <SystemClock_Config+0xc0>)
 8003bfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	4b23      	ldr	r3, [pc, #140]	; (8003c90 <SystemClock_Config+0xc0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c0a:	607b      	str	r3, [r7, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003c12:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003c16:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c18:	2302      	movs	r3, #2
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c20:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8003c22:	2308      	movs	r3, #8
 8003c24:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8003c26:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003c2a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8003c30:	2307      	movs	r3, #7
 8003c32:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c34:	f107 030c 	add.w	r3, r7, #12
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fd ff83 	bl	8001b44 <HAL_RCC_OscConfig>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 8003c44:	f7fd f9bc 	bl	8000fc0 <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003c48:	f7fd ff2c 	bl	8001aa4 <HAL_PWREx_EnableOverDrive>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 8003c52:	f7fd f9b5 	bl	8000fc0 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003c56:	230f      	movs	r3, #15
 8003c58:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003c62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c66:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003c6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c72:	2105      	movs	r1, #5
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fe f9dd 	bl	8002034 <HAL_RCC_ClockConfig>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 8003c80:	f7fd f99e 	bl	8000fc0 <Error_Handler>
	}
}
 8003c84:	bf00      	nop
 8003c86:	3750      	adds	r7, #80	; 0x50
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	40007000 	.word	0x40007000

08003c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003c94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ccc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c9a:	e003      	b.n	8003ca4 <LoopCopyDataInit>

08003c9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003c9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ca0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003ca2:	3104      	adds	r1, #4

08003ca4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ca4:	480b      	ldr	r0, [pc, #44]	; (8003cd4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ca8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003caa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003cac:	d3f6      	bcc.n	8003c9c <CopyDataInit>
  ldr  r2, =_sbss
 8003cae:	4a0b      	ldr	r2, [pc, #44]	; (8003cdc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003cb0:	e002      	b.n	8003cb8 <LoopFillZerobss>

08003cb2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003cb2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003cb4:	f842 3b04 	str.w	r3, [r2], #4

08003cb8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003cb8:	4b09      	ldr	r3, [pc, #36]	; (8003ce0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003cba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003cbc:	d3f9      	bcc.n	8003cb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003cbe:	f7fd fa91 	bl	80011e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cc2:	f000 f811 	bl	8003ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cc6:	f7ff fe63 	bl	8003990 <main>
  bx  lr    
 8003cca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003ccc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003cd0:	08003e20 	.word	0x08003e20
  ldr  r0, =_sdata
 8003cd4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003cd8:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8003cdc:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8003ce0:	200000f4 	.word	0x200000f4

08003ce4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ce4:	e7fe      	b.n	8003ce4 <ADC_IRQHandler>
	...

08003ce8 <__libc_init_array>:
 8003ce8:	b570      	push	{r4, r5, r6, lr}
 8003cea:	4d0d      	ldr	r5, [pc, #52]	; (8003d20 <__libc_init_array+0x38>)
 8003cec:	4c0d      	ldr	r4, [pc, #52]	; (8003d24 <__libc_init_array+0x3c>)
 8003cee:	1b64      	subs	r4, r4, r5
 8003cf0:	10a4      	asrs	r4, r4, #2
 8003cf2:	2600      	movs	r6, #0
 8003cf4:	42a6      	cmp	r6, r4
 8003cf6:	d109      	bne.n	8003d0c <__libc_init_array+0x24>
 8003cf8:	4d0b      	ldr	r5, [pc, #44]	; (8003d28 <__libc_init_array+0x40>)
 8003cfa:	4c0c      	ldr	r4, [pc, #48]	; (8003d2c <__libc_init_array+0x44>)
 8003cfc:	f000 f818 	bl	8003d30 <_init>
 8003d00:	1b64      	subs	r4, r4, r5
 8003d02:	10a4      	asrs	r4, r4, #2
 8003d04:	2600      	movs	r6, #0
 8003d06:	42a6      	cmp	r6, r4
 8003d08:	d105      	bne.n	8003d16 <__libc_init_array+0x2e>
 8003d0a:	bd70      	pop	{r4, r5, r6, pc}
 8003d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d10:	4798      	blx	r3
 8003d12:	3601      	adds	r6, #1
 8003d14:	e7ee      	b.n	8003cf4 <__libc_init_array+0xc>
 8003d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d1a:	4798      	blx	r3
 8003d1c:	3601      	adds	r6, #1
 8003d1e:	e7f2      	b.n	8003d06 <__libc_init_array+0x1e>
 8003d20:	08003e18 	.word	0x08003e18
 8003d24:	08003e18 	.word	0x08003e18
 8003d28:	08003e18 	.word	0x08003e18
 8003d2c:	08003e1c 	.word	0x08003e1c

08003d30 <_init>:
 8003d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d32:	bf00      	nop
 8003d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d36:	bc08      	pop	{r3}
 8003d38:	469e      	mov	lr, r3
 8003d3a:	4770      	bx	lr

08003d3c <_fini>:
 8003d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3e:	bf00      	nop
 8003d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d42:	bc08      	pop	{r3}
 8003d44:	469e      	mov	lr, r3
 8003d46:	4770      	bx	lr
